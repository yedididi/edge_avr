
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001092  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bda  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000803  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000396  00000000  00000000  00002f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000032b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	be d0       	rcall	.+380    	; 0x226 <main>
  aa:	e4 c0       	rjmp	.+456    	; 0x274 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ledMachine_execute>:
﻿#include "./ledMachine.h"

void ledMachine_execute(uint8_t ledState, button_t *btnPrev, button_t *btnNext)
{
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	8b 01       	movw	r16, r22
  b8:	ea 01       	movw	r28, r20
	if (ledState == LED1)
  ba:	81 11       	cpse	r24, r1
  bc:	0f c0       	rjmp	.+30     	; 0xdc <ledMachine_execute+0x2e>
	{
		led1Blink();
  be:	93 d0       	rcall	.+294    	; 0x1e6 <led1Blink>
		if (buttonGetState(btnNext) == ACT_RELEASED) //뗄 때 동작을 하겠다
  c0:	ce 01       	movw	r24, r28
  c2:	60 d0       	rcall	.+192    	; 0x184 <buttonGetState>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	19 f4       	brne	.+6      	; 0xce <ledMachine_execute+0x20>
		{
			ledState = LED2;
			ledData = 0x00;
  c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if (buttonGetState(btnPrev) == ACT_RELEASED)
  cc:	39 c0       	rjmp	.+114    	; 0x140 <ledMachine_execute+0x92>
  ce:	c8 01       	movw	r24, r16
  d0:	59 d0       	rcall	.+178    	; 0x184 <buttonGetState>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	a9 f5       	brne	.+106    	; 0x140 <ledMachine_execute+0x92>
		{
			ledState = LED4;
			ledData = 0x00;
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	else if (ledState == LED2)
  da:	32 c0       	rjmp	.+100    	; 0x140 <ledMachine_execute+0x92>
	{
		led2Blink();
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	79 f4       	brne	.+30     	; 0xfe <ledMachine_execute+0x50>
		if (buttonGetState(btnNext) == ACT_RELEASED)
  e0:	8a d0       	rcall	.+276    	; 0x1f6 <led2Blink>
  e2:	ce 01       	movw	r24, r28
  e4:	4f d0       	rcall	.+158    	; 0x184 <buttonGetState>
  e6:	82 30       	cpi	r24, 0x02	; 2
		{
			ledState = LED3;
			ledData = 0x00;
  e8:	19 f4       	brne	.+6      	; 0xf0 <ledMachine_execute+0x42>
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if (buttonGetState(btnPrev) == ACT_RELEASED)
  ee:	28 c0       	rjmp	.+80     	; 0x140 <ledMachine_execute+0x92>
  f0:	c8 01       	movw	r24, r16
  f2:	48 d0       	rcall	.+144    	; 0x184 <buttonGetState>
  f4:	82 30       	cpi	r24, 0x02	; 2
		{
			ledState = LED1;
			ledData = 0x00;
  f6:	21 f5       	brne	.+72     	; 0x140 <ledMachine_execute+0x92>
  f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	else if (ledState == LED3)
  fc:	21 c0       	rjmp	.+66     	; 0x140 <ledMachine_execute+0x92>
	{
		led3Blink();
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	79 f4       	brne	.+30     	; 0x120 <ledMachine_execute+0x72>
		if (buttonGetState(btnNext) == ACT_RELEASED)
 102:	81 d0       	rcall	.+258    	; 0x206 <led3Blink>
 104:	ce 01       	movw	r24, r28
 106:	3e d0       	rcall	.+124    	; 0x184 <buttonGetState>
 108:	82 30       	cpi	r24, 0x02	; 2
		{
			ledState = LED4;
			ledData = 0x00;
 10a:	19 f4       	brne	.+6      	; 0x112 <ledMachine_execute+0x64>
 10c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if (buttonGetState(btnPrev) == ACT_RELEASED)
 110:	17 c0       	rjmp	.+46     	; 0x140 <ledMachine_execute+0x92>
 112:	c8 01       	movw	r24, r16
 114:	37 d0       	rcall	.+110    	; 0x184 <buttonGetState>
		{
			ledState = LED2;
			ledData = 0x00;
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	99 f4       	brne	.+38     	; 0x140 <ledMachine_execute+0x92>
 11a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	else if (ledState == LED4)
 11e:	10 c0       	rjmp	.+32     	; 0x140 <ledMachine_execute+0x92>
	{
		led4Blink();
 120:	83 30       	cpi	r24, 0x03	; 3
		if (buttonGetState(btnNext) == ACT_RELEASED)
 122:	71 f4       	brne	.+28     	; 0x140 <ledMachine_execute+0x92>
 124:	78 d0       	rcall	.+240    	; 0x216 <led4Blink>
 126:	ce 01       	movw	r24, r28
 128:	2d d0       	rcall	.+90     	; 0x184 <buttonGetState>
 12a:	82 30       	cpi	r24, 0x02	; 2
		{
			ledState = LED1;
			ledData = 0x00;
 12c:	19 f4       	brne	.+6      	; 0x134 <ledMachine_execute+0x86>
 12e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if (buttonGetState(btnPrev) == ACT_RELEASED)
 132:	06 c0       	rjmp	.+12     	; 0x140 <ledMachine_execute+0x92>
 134:	c8 01       	movw	r24, r16
 136:	26 d0       	rcall	.+76     	; 0x184 <buttonGetState>
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	11 f4       	brne	.+4      	; 0x140 <ledMachine_execute+0x92>
		{
			ledState = LED3;
			ledData = 0x00;
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	87 e8       	ldi	r24, 0x87	; 135
 144:	93 e1       	ldi	r25, 0x13	; 19
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <ledMachine_execute+0x98>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <ledMachine_execute+0xa2>
 150:	00 00       	nop
		}
	}
	_delay_ms(400);
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <buttonInit>:
﻿#include "./IncFile1.h"

void buttonInit(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 15c:	fc 01       	movw	r30, r24
	btn->DDR = ddr;
 15e:	71 83       	std	Z+1, r23	; 0x01
 160:	60 83       	st	Z, r22
	btn->PIN = pin;
 162:	53 83       	std	Z+3, r21	; 0x03
 164:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinNum;
 166:	24 83       	std	Z+4, r18	; 0x04
	btn->prevState = RELEASED;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	85 83       	std	Z+5, r24	; 0x05
	*btn->DDR &= (1<<btn->pinNum);
 16c:	fb 01       	movw	r30, r22
 16e:	30 81       	ld	r19, Z
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <buttonInit+0x1e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	2a 95       	dec	r18
 17c:	e2 f7       	brpl	.-8      	; 0x176 <buttonInit+0x1a>
 17e:	83 23       	and	r24, r19
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <buttonGetState>:
}

uint8_t buttonGetState(button_t *btn)
{
 184:	fc 01       	movw	r30, r24
	uint8_t	curState = *btn->PIN & (1<<btn->pinNum); //0번핀의 값 저장
 186:	a2 81       	ldd	r26, Z+2	; 0x02
 188:	b3 81       	ldd	r27, Z+3	; 0x03
 18a:	8c 91       	ld	r24, X
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	04 80       	ldd	r0, Z+4	; 0x04
 192:	02 c0       	rjmp	.+4      	; 0x198 <buttonGetState+0x14>
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <buttonGetState+0x10>
 19c:	28 23       	and	r18, r24
	
	if ((curState == PUSHED) && (btn->prevState == RELEASED))
 19e:	59 f4       	brne	.+22     	; 0x1b6 <buttonGetState+0x32>
 1a0:	85 81       	ldd	r24, Z+5	; 0x05
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	41 f4       	brne	.+16     	; 0x1b6 <buttonGetState+0x32>
 1a6:	af e3       	ldi	r26, 0x3F	; 63
 1a8:	bc e9       	ldi	r27, 0x9C	; 156
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <buttonGetState+0x26>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <buttonGetState+0x2c>
 1b0:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = PUSHED;
 1b2:	15 82       	std	Z+5, r1	; 0x05
		return (ACT_PUSHED);
 1b4:	08 95       	ret
	}
	else if ((curState != PUSHED) && (btn->prevState == PUSHED))
 1b6:	22 23       	and	r18, r18
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <buttonGetState+0x50>
 1ba:	85 81       	ldd	r24, Z+5	; 0x05
 1bc:	81 11       	cpse	r24, r1
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <buttonGetState+0x54>
 1c0:	8f e3       	ldi	r24, 0x3F	; 63
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <buttonGetState+0x40>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <buttonGetState+0x46>
 1ca:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = RELEASED;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	85 83       	std	Z+5, r24	; 0x05
		return (ACT_RELEASED);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	08 95       	ret
	}
	else
	return (ACT_NONE);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret

000001dc <Led_writeData>:
	LED_DDR = 0x00;
}

void led_allOn()
{
	LED_DDR = 0xff;
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	08 95       	ret

000001e0 <Led_init>:
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	81 bb       	out	0x11, r24	; 17
 1e4:	08 95       	ret

000001e6 <led1Blink>:
}

void led1Blink()
{
	ledData ^= 0x01;
 1e6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	89 27       	eor	r24, r25
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//LED_PORT = ledData;
	Led_writeData(ledData);
 1f2:	f4 cf       	rjmp	.-24     	; 0x1dc <Led_writeData>
 1f4:	08 95       	ret

000001f6 <led2Blink>:
}

void led2Blink()
{
	ledData ^= 0x02;
 1f6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	89 27       	eor	r24, r25
 1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//LED_PORT = ledData;
	Led_writeData(ledData);
 202:	ec cf       	rjmp	.-40     	; 0x1dc <Led_writeData>
 204:	08 95       	ret

00000206 <led3Blink>:
}


void led3Blink()
{
	ledData ^= 0x04;
 206:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	89 27       	eor	r24, r25
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//LED_PORT = ledData;
	Led_writeData(ledData);
 212:	e4 cf       	rjmp	.-56     	; 0x1dc <Led_writeData>
 214:	08 95       	ret

00000216 <led4Blink>:
}

void led4Blink()
{
	ledData ^= 0x08;
 216:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	89 27       	eor	r24, r25
 21e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//LED_PORT = ledData;
	Led_writeData(ledData);
 222:	dc cf       	rjmp	.-72     	; 0x1dc <Led_writeData>
 224:	08 95       	ret

00000226 <main>:
#include "./Button/IncFile1.h"
#include "./ap/ledMachine/ledMachine.h"

int main(void)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	2c 97       	sbiw	r28, 0x0c	; 12
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xff;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	81 bb       	out	0x11, r24	; 17
	PORTA = 0xff;
 23e:	8b bb       	out	0x1b, r24	; 27
	button_t btnNext, btnPrev; /////////////////////
	uint8_t ledState = LED1;
	//BUTTON_DDR &= ~((1<<0) | (1<<1));
	buttonInit(&btnNext, &DDRA, &PINA, 0);
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	49 e3       	ldi	r20, 0x39	; 57
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	6a e3       	ldi	r22, 0x3A	; 58
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	86 df       	rcall	.-244    	; 0x15c <buttonInit>
	buttonInit(&btnPrev, &DDRA, &PINA, 1);
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	49 e3       	ldi	r20, 0x39	; 57
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	6a e3       	ldi	r22, 0x3A	; 58
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	ce 01       	movw	r24, r28
 25c:	07 96       	adiw	r24, 0x07	; 7
	
	Led_init();
 25e:	7e df       	rcall	.-260    	; 0x15c <buttonInit>
 260:	bf df       	rcall	.-130    	; 0x1e0 <Led_init>
	
	while (1)
	{
		ledMachine_execute(ledState, &btnPrev, &btnNext);
 262:	ae 01       	movw	r20, r28
 264:	4f 5f       	subi	r20, 0xFF	; 255
 266:	5f 4f       	sbci	r21, 0xFF	; 255
 268:	be 01       	movw	r22, r28
 26a:	69 5f       	subi	r22, 0xF9	; 249
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	1e df       	rcall	.-452    	; 0xae <ledMachine_execute>
 272:	f7 cf       	rjmp	.-18     	; 0x262 <main+0x3c>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
