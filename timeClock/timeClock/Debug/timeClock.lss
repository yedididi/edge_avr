
timeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  0000054c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c41  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  000012bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064e  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000022d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004db  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ef  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002b02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	b2 c1       	rjmp	.+868    	; 0x38a <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8b d1       	rcall	.+790    	; 0x3da <main>
  c4:	f2 c1       	rjmp	.+996    	; 0x4aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <incMilisec>:
ï»¿#include "timeClock.h"

void incMilisec()
{
	milisec = (milisec + 1) % 1000;
  c8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <milisec>
  cc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <milisec+0x1>
  d0:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <milisec+0x2>
  d4:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <milisec+0x3>
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	8f 4f       	sbci	r24, 0xFF	; 255
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	28 ee       	ldi	r18, 0xE8	; 232
  e6:	33 e0       	ldi	r19, 0x03	; 3
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	99 d1       	rcall	.+818    	; 0x420 <__udivmodsi4>
  ee:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <milisec>
  f2:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <milisec+0x1>
  f6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <milisec+0x2>
  fa:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <milisec+0x3>
	if (milisec)
  fe:	67 2b       	or	r22, r23
 100:	68 2b       	or	r22, r24
 102:	69 2b       	or	r22, r25
 104:	f9 f4       	brne	.+62     	; 0x144 <incMilisec+0x7c>
	return;
	else
	{
		sec = (sec + 1) % 60;
 106:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sec>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	6c e3       	ldi	r22, 0x3C	; 60
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	73 d1       	rcall	.+742    	; 0x3fa <__divmodhi4>
 114:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sec>
		if (sec)
 118:	81 11       	cpse	r24, r1
 11a:	14 c0       	rjmp	.+40     	; 0x144 <incMilisec+0x7c>
		return;
		else
		{
			min = (min + 1) % 60;
 11c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <min>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	6c e3       	ldi	r22, 0x3C	; 60
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	68 d1       	rcall	.+720    	; 0x3fa <__divmodhi4>
 12a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <min>
			if (min)
 12e:	81 11       	cpse	r24, r1
 130:	09 c0       	rjmp	.+18     	; 0x144 <incMilisec+0x7c>
			return ;
			else
			hour = (hour + 1) % 24;
 132:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <hour>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	68 e1       	ldi	r22, 0x18	; 24
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	5d d1       	rcall	.+698    	; 0x3fa <__divmodhi4>
 140:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <hour>
 144:	08 95       	ret

00000146 <init_timeClock>:
	}
}

void init_timeClock()
{
	FND_init();
 146:	1e d0       	rcall	.+60     	; 0x184 <FND_init>
	
	milisec = 0;
 148:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <milisec>
 14c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <milisec+0x1>
 150:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <milisec+0x2>
 154:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <milisec+0x3>
	sec = 0;
 158:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sec>
	min = 0;
 15c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <min>
	hour = 0;
 160:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <hour>
	
	//initTIM0();
	initTIM2();
 164:	3e c1       	rjmp	.+636    	; 0x3e2 <initTIM2>
 166:	08 95       	ret

00000168 <displayTime>:

void displayTime()
{
	uint16_t stopWatchData = 0;
	
	stopWatchData = min * 100;
 168:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <min>
	stopWatchData += sec;
 16c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sec>
 170:	90 e0       	ldi	r25, 0x00	; 0
	FND_setfndData(stopWatchData);
 172:	34 e6       	ldi	r19, 0x64	; 100
 174:	23 9f       	mul	r18, r19
 176:	80 0d       	add	r24, r0
 178:	91 1d       	adc	r25, r1
 17a:	11 24       	eor	r1, r1
 17c:	fb c0       	rjmp	.+502    	; 0x374 <FND_setfndData>
 17e:	08 95       	ret

00000180 <execute_timeClock>:
}

void execute_timeClock()
{
	//FND_setfndData(1000);
	displayTime();
 180:	f3 cf       	rjmp	.-26     	; 0x168 <displayTime>
 182:	08 95       	ret

00000184 <FND_init>:

uint16_t data = 0;

void FND_init()
{
	FND_NUM_DDR = 0xff;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_DIGIT_DDR = 0xff;
 18a:	82 b9       	out	0x02, r24	; 2
 18c:	08 95       	ret

0000018e <showNum>:
}

void showNum(uint16_t num)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	2a 97       	sbiw	r28, 0x0a	; 10
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
 1a2:	ac 01       	movw	r20, r24
	uint8_t fndFont[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	e0 e0       	ldi	r30, 0x00	; 0
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	de 01       	movw	r26, r28
 1ac:	11 96       	adiw	r26, 0x01	; 1
 1ae:	01 90       	ld	r0, Z+
 1b0:	0d 92       	st	X+, r0
 1b2:	8a 95       	dec	r24
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <showNum+0x20>
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 4;
 1b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	83 70       	andi	r24, 0x03	; 3
 1c0:	90 78       	andi	r25, 0x80	; 128
 1c2:	99 23       	and	r25, r25
 1c4:	24 f4       	brge	.+8      	; 0x1ce <showNum+0x40>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	8c 6f       	ori	r24, 0xFC	; 252
 1ca:	9f 6f       	ori	r25, 0xFF	; 255
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	FND_DIGIT_PORT |= (1<<FND_DIGIT_4) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_1); //ì«ì ì°ê¸° ì ì ë¶ ë¤ ëê¸° (ì»¤ë¨¼í ë¤ 1ë¡ ì¤ì )
 1d2:	83 b1       	in	r24, 0x03	; 3
 1d4:	80 6f       	ori	r24, 0xF0	; 240
 1d6:	83 b9       	out	0x03, r24	; 3
	switch (fndDigitState)
 1d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	09 f4       	brne	.+2      	; 0x1e2 <showNum+0x54>
 1e0:	3e c0       	rjmp	.+124    	; 0x25e <showNum+0xd0>
 1e2:	38 f0       	brcs	.+14     	; 0x1f2 <showNum+0x64>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	09 f4       	brne	.+2      	; 0x1ea <showNum+0x5c>
 1e8:	6a c0       	rjmp	.+212    	; 0x2be <showNum+0x130>
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <showNum+0x62>
 1ee:	95 c0       	rjmp	.+298    	; 0x31a <showNum+0x18c>
 1f0:	b8 c0       	rjmp	.+368    	; 0x362 <showNum+0x1d4>
	{
		case 0:
		FND_NUM_PORT = fndFont[(num / 1000) % 10]; // number 1
 1f2:	9a 01       	movw	r18, r20
 1f4:	36 95       	lsr	r19
 1f6:	27 95       	ror	r18
 1f8:	36 95       	lsr	r19
 1fa:	27 95       	ror	r18
 1fc:	36 95       	lsr	r19
 1fe:	27 95       	ror	r18
 200:	a5 ec       	ldi	r26, 0xC5	; 197
 202:	b0 e2       	ldi	r27, 0x20	; 32
 204:	2f d1       	rcall	.+606    	; 0x464 <__umulhisi3>
 206:	ac 01       	movw	r20, r24
 208:	52 95       	swap	r21
 20a:	42 95       	swap	r20
 20c:	4f 70       	andi	r20, 0x0F	; 15
 20e:	45 27       	eor	r20, r21
 210:	5f 70       	andi	r21, 0x0F	; 15
 212:	45 27       	eor	r20, r21
 214:	9a 01       	movw	r18, r20
 216:	ad ec       	ldi	r26, 0xCD	; 205
 218:	bc ec       	ldi	r27, 0xCC	; 204
 21a:	24 d1       	rcall	.+584    	; 0x464 <__umulhisi3>
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	9c 01       	movw	r18, r24
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	82 0f       	add	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	9a 01       	movw	r18, r20
 240:	28 1b       	sub	r18, r24
 242:	39 0b       	sbc	r19, r25
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e2 0f       	add	r30, r18
 24e:	f3 1f       	adc	r31, r19
 250:	80 81       	ld	r24, Z
 252:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_1); //ì²ììë¦¬ì í
 256:	83 b1       	in	r24, 0x03	; 3
 258:	8f 7e       	andi	r24, 0xEF	; 239
 25a:	83 b9       	out	0x03, r24	; 3
		break;
 25c:	82 c0       	rjmp	.+260    	; 0x362 <showNum+0x1d4>
		
		case 1:
		FND_NUM_PORT = fndFont[(num / 100) % 10]; // number 1
 25e:	9a 01       	movw	r18, r20
 260:	36 95       	lsr	r19
 262:	27 95       	ror	r18
 264:	36 95       	lsr	r19
 266:	27 95       	ror	r18
 268:	ab e7       	ldi	r26, 0x7B	; 123
 26a:	b4 e1       	ldi	r27, 0x14	; 20
 26c:	fb d0       	rcall	.+502    	; 0x464 <__umulhisi3>
 26e:	ac 01       	movw	r20, r24
 270:	56 95       	lsr	r21
 272:	47 95       	ror	r20
 274:	9a 01       	movw	r18, r20
 276:	ad ec       	ldi	r26, 0xCD	; 205
 278:	bc ec       	ldi	r27, 0xCC	; 204
 27a:	f4 d0       	rcall	.+488    	; 0x464 <__umulhisi3>
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	9c 01       	movw	r18, r24
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	82 0f       	add	r24, r18
 29c:	93 1f       	adc	r25, r19
 29e:	9a 01       	movw	r18, r20
 2a0:	28 1b       	sub	r18, r24
 2a2:	39 0b       	sbc	r19, r25
 2a4:	e1 e0       	ldi	r30, 0x01	; 1
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ec 0f       	add	r30, r28
 2aa:	fd 1f       	adc	r31, r29
 2ac:	e2 0f       	add	r30, r18
 2ae:	f3 1f       	adc	r31, r19
 2b0:	80 81       	ld	r24, Z
 2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_2); //ë°±ììë¦¬ì í
 2b6:	83 b1       	in	r24, 0x03	; 3
 2b8:	8f 7d       	andi	r24, 0xDF	; 223
 2ba:	83 b9       	out	0x03, r24	; 3
		break;
		
		case 2:
		FND_NUM_PORT = fndFont[(num / 10) % 10]; // number 1
 2bc:	52 c0       	rjmp	.+164    	; 0x362 <showNum+0x1d4>
 2be:	9a 01       	movw	r18, r20
 2c0:	ad ec       	ldi	r26, 0xCD	; 205
 2c2:	bc ec       	ldi	r27, 0xCC	; 204
 2c4:	cf d0       	rcall	.+414    	; 0x464 <__umulhisi3>
 2c6:	ac 01       	movw	r20, r24
 2c8:	56 95       	lsr	r21
 2ca:	47 95       	ror	r20
 2cc:	56 95       	lsr	r21
 2ce:	47 95       	ror	r20
 2d0:	56 95       	lsr	r21
 2d2:	47 95       	ror	r20
 2d4:	9a 01       	movw	r18, r20
 2d6:	c6 d0       	rcall	.+396    	; 0x464 <__umulhisi3>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	9c 01       	movw	r18, r24
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	9a 01       	movw	r18, r20
 2fc:	28 1b       	sub	r18, r24
 2fe:	39 0b       	sbc	r19, r25
 300:	e1 e0       	ldi	r30, 0x01	; 1
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ec 0f       	add	r30, r28
 306:	fd 1f       	adc	r31, r29
 308:	e2 0f       	add	r30, r18
 30a:	f3 1f       	adc	r31, r19
 30c:	80 81       	ld	r24, Z
 30e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_3); //ì­ììë¦¬ì í
 312:	83 b1       	in	r24, 0x03	; 3
 314:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 316:	83 b9       	out	0x03, r24	; 3
		
		case 3:
		FND_NUM_PORT = fndFont[num % 10]; // number 1
 318:	24 c0       	rjmp	.+72     	; 0x362 <showNum+0x1d4>
 31a:	9a 01       	movw	r18, r20
 31c:	ad ec       	ldi	r26, 0xCD	; 205
 31e:	bc ec       	ldi	r27, 0xCC	; 204
 320:	a1 d0       	rcall	.+322    	; 0x464 <__umulhisi3>
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	9c 01       	movw	r18, r24
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	82 0f       	add	r24, r18
 342:	93 1f       	adc	r25, r19
 344:	9a 01       	movw	r18, r20
 346:	28 1b       	sub	r18, r24
 348:	39 0b       	sbc	r19, r25
 34a:	e1 e0       	ldi	r30, 0x01	; 1
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	e2 0f       	add	r30, r18
 354:	f3 1f       	adc	r31, r19
 356:	80 81       	ld	r24, Z
 358:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_4); //ì¼ììë¦¬ì í
 35c:	83 b1       	in	r24, 0x03	; 3
 35e:	8f 77       	andi	r24, 0x7F	; 127
 360:	83 b9       	out	0x03, r24	; 3
		break;
	}
}
 362:	2a 96       	adiw	r28, 0x0a	; 10
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <FND_setfndData>:

void FND_setfndData(uint16_t mydata)
{
	data = mydata;
 374:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <data+0x1>
 378:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <data>
 37c:	08 95       	ret

0000037e <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	showNum(data);
 37e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <data>
 382:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <data+0x1>
 386:	03 cf       	rjmp	.-506    	; 0x18e <showNum>
 388:	08 95       	ret

0000038a <__vector_9>:
#include "ap/timeClock/timeClock.h"

ISR(TIMER2_COMP_vect)
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	0b b6       	in	r0, 0x3b	; 59
 396:	0f 92       	push	r0
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	FND_ISR_Process();
 3b0:	e6 df       	rcall	.-52     	; 0x37e <FND_ISR_Process>
	incMilisec();
 3b2:	8a de       	rcall	.-748    	; 0xc8 <incMilisec>
 3b4:	ff 91       	pop	r31
}
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0b be       	out	0x3b, r0	; 59
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <main>:
 3da:	b5 de       	rcall	.-662    	; 0x146 <init_timeClock>
	init_timeClock();
	sei();
    while (1) 
    {
		//FND_setfndData(1000);
		execute_timeClock();
 3dc:	78 94       	sei
 3de:	d0 de       	rcall	.-608    	; 0x180 <execute_timeClock>
 3e0:	fe cf       	rjmp	.-4      	; 0x3de <main+0x4>

000003e2 <initTIM2>:
}

void initTIM2()
{
	//prescaler 1/64ë¡ ì¤ì  > cs22, cs21, cs20 0 1 1ë¡ ì¤ì í´ì¼ í¨
	TCCR2 |= (0 << CS22) | (1 << CS21) | (1 << CS20);
 3e2:	85 b5       	in	r24, 0x25	; 37
 3e4:	83 60       	ori	r24, 0x03	; 3
 3e6:	85 bd       	out	0x25, r24	; 37
	
	//CTC mode ì¤ì 
	TCCR2 |= (1 << WGM21) | (0 << WGM20);
 3e8:	85 b5       	in	r24, 0x25	; 37
 3ea:	88 60       	ori	r24, 0x08	; 8
 3ec:	85 bd       	out	0x25, r24	; 37
	
	//TIMSK timer compare bit on
	TIMSK |= (1 << OCIE2);
 3ee:	87 b7       	in	r24, 0x37	; 55
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	87 bf       	out	0x37, r24	; 55
	
	//ë¹êµí  ì«ì ì¤ì 
	OCR2 = 250 - 1;
 3f4:	89 ef       	ldi	r24, 0xF9	; 249
 3f6:	83 bd       	out	0x23, r24	; 35
 3f8:	08 95       	ret

000003fa <__divmodhi4>:
 3fa:	97 fb       	bst	r25, 7
 3fc:	07 2e       	mov	r0, r23
 3fe:	16 f4       	brtc	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	00 94       	com	r0
 402:	06 d0       	rcall	.+12     	; 0x410 <__divmodhi4_neg1>
 404:	77 fd       	sbrc	r23, 7
 406:	08 d0       	rcall	.+16     	; 0x418 <__divmodhi4_neg2>
 408:	3c d0       	rcall	.+120    	; 0x482 <__udivmodhi4>
 40a:	07 fc       	sbrc	r0, 7
 40c:	05 d0       	rcall	.+10     	; 0x418 <__divmodhi4_neg2>
 40e:	3e f4       	brtc	.+14     	; 0x41e <__divmodhi4_exit>

00000410 <__divmodhi4_neg1>:
 410:	90 95       	com	r25
 412:	81 95       	neg	r24
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	08 95       	ret

00000418 <__divmodhi4_neg2>:
 418:	70 95       	com	r23
 41a:	61 95       	neg	r22
 41c:	7f 4f       	sbci	r23, 0xFF	; 255

0000041e <__divmodhi4_exit>:
 41e:	08 95       	ret

00000420 <__udivmodsi4>:
 420:	a1 e2       	ldi	r26, 0x21	; 33
 422:	1a 2e       	mov	r1, r26
 424:	aa 1b       	sub	r26, r26
 426:	bb 1b       	sub	r27, r27
 428:	fd 01       	movw	r30, r26
 42a:	0d c0       	rjmp	.+26     	; 0x446 <__udivmodsi4_ep>

0000042c <__udivmodsi4_loop>:
 42c:	aa 1f       	adc	r26, r26
 42e:	bb 1f       	adc	r27, r27
 430:	ee 1f       	adc	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	a2 17       	cp	r26, r18
 436:	b3 07       	cpc	r27, r19
 438:	e4 07       	cpc	r30, r20
 43a:	f5 07       	cpc	r31, r21
 43c:	20 f0       	brcs	.+8      	; 0x446 <__udivmodsi4_ep>
 43e:	a2 1b       	sub	r26, r18
 440:	b3 0b       	sbc	r27, r19
 442:	e4 0b       	sbc	r30, r20
 444:	f5 0b       	sbc	r31, r21

00000446 <__udivmodsi4_ep>:
 446:	66 1f       	adc	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	1a 94       	dec	r1
 450:	69 f7       	brne	.-38     	; 0x42c <__udivmodsi4_loop>
 452:	60 95       	com	r22
 454:	70 95       	com	r23
 456:	80 95       	com	r24
 458:	90 95       	com	r25
 45a:	9b 01       	movw	r18, r22
 45c:	ac 01       	movw	r20, r24
 45e:	bd 01       	movw	r22, r26
 460:	cf 01       	movw	r24, r30
 462:	08 95       	ret

00000464 <__umulhisi3>:
 464:	a2 9f       	mul	r26, r18
 466:	b0 01       	movw	r22, r0
 468:	b3 9f       	mul	r27, r19
 46a:	c0 01       	movw	r24, r0
 46c:	a3 9f       	mul	r26, r19
 46e:	70 0d       	add	r23, r0
 470:	81 1d       	adc	r24, r1
 472:	11 24       	eor	r1, r1
 474:	91 1d       	adc	r25, r1
 476:	b2 9f       	mul	r27, r18
 478:	70 0d       	add	r23, r0
 47a:	81 1d       	adc	r24, r1
 47c:	11 24       	eor	r1, r1
 47e:	91 1d       	adc	r25, r1
 480:	08 95       	ret

00000482 <__udivmodhi4>:
 482:	aa 1b       	sub	r26, r26
 484:	bb 1b       	sub	r27, r27
 486:	51 e1       	ldi	r21, 0x11	; 17
 488:	07 c0       	rjmp	.+14     	; 0x498 <__udivmodhi4_ep>

0000048a <__udivmodhi4_loop>:
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	a6 17       	cp	r26, r22
 490:	b7 07       	cpc	r27, r23
 492:	10 f0       	brcs	.+4      	; 0x498 <__udivmodhi4_ep>
 494:	a6 1b       	sub	r26, r22
 496:	b7 0b       	sbc	r27, r23

00000498 <__udivmodhi4_ep>:
 498:	88 1f       	adc	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	5a 95       	dec	r21
 49e:	a9 f7       	brne	.-22     	; 0x48a <__udivmodhi4_loop>
 4a0:	80 95       	com	r24
 4a2:	90 95       	com	r25
 4a4:	bc 01       	movw	r22, r24
 4a6:	cd 01       	movw	r24, r26
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
