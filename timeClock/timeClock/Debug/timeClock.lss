
timeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000006ae  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080010c  0080010c  0000074e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c2  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1d  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad9  00000000  00000000  00002adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000035b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cc  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000439  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004305  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	98 c2       	rjmp	.+1328   	; 0x556 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	71 d2       	rcall	.+1250   	; 0x5a6 <main>
  c4:	f2 c2       	rjmp	.+1508   	; 0x6aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <incMilisec>:
ï»¿#include "timeClock.h"

void incMilisec()
{
	milisec = (milisec + 1) % 1000;
  c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <milisec>
  cc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <milisec+0x1>
  d0:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <milisec+0x2>
  d4:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <milisec+0x3>
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	8f 4f       	sbci	r24, 0xFF	; 255
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	28 ee       	ldi	r18, 0xE8	; 232
  e6:	33 e0       	ldi	r19, 0x03	; 3
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	99 d2       	rcall	.+1330   	; 0x620 <__udivmodsi4>
  ee:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <milisec>
  f2:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <milisec+0x1>
  f6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <milisec+0x2>
  fa:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <milisec+0x3>
	if (milisec)
  fe:	67 2b       	or	r22, r23
 100:	68 2b       	or	r22, r24
 102:	69 2b       	or	r22, r25
	return;
	else
	{
		changeFndColonFlag();
 104:	01 f5       	brne	.+64     	; 0x146 <incMilisec+0x7e>
 106:	11 d2       	rcall	.+1058   	; 0x52a <changeFndColonFlag>
		sec = (sec + 1) % 60;
 108:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sec>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	6c e3       	ldi	r22, 0x3C	; 60
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	72 d2       	rcall	.+1252   	; 0x5fa <__divmodhi4>
 116:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sec>
		if (sec)
 11a:	81 11       	cpse	r24, r1
 11c:	14 c0       	rjmp	.+40     	; 0x146 <incMilisec+0x7e>
		return;
		else
		{
			min = (min + 1) % 60;
 11e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <min>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	6c e3       	ldi	r22, 0x3C	; 60
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	67 d2       	rcall	.+1230   	; 0x5fa <__divmodhi4>
 12c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <min>
			if (min)
 130:	81 11       	cpse	r24, r1
 132:	09 c0       	rjmp	.+18     	; 0x146 <incMilisec+0x7e>
			return ;
			else
			hour = (hour + 1) % 24;
 134:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <hour>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	68 e1       	ldi	r22, 0x18	; 24
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	5c d2       	rcall	.+1208   	; 0x5fa <__divmodhi4>
 142:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <hour>
 146:	08 95       	ret

00000148 <init_timeClock>:
	}
}

void init_timeClock()
{
	FND_init();
 148:	e5 d0       	rcall	.+458    	; 0x314 <FND_init>
	
	milisec = 0;
 14a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <milisec>
 14e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <milisec+0x1>
 152:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <milisec+0x2>
 156:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <milisec+0x3>
	sec = 0;
 15a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sec>
	min = 0;
 15e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <min>
	hour = 0;
 162:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <hour>
	clockState = HOURMIN;
 166:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <clockState>
	
	//initTIM0();
	initTIM2();
 16a:	3b d2       	rcall	.+1142   	; 0x5e2 <initTIM2>
	Button_init(&changeclockStateBtn, &DDRA, &PINA, 0);
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	49 e3       	ldi	r20, 0x39	; 57
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	6a e3       	ldi	r22, 0x3A	; 58
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	85 e1       	ldi	r24, 0x15	; 21
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	93 d0       	rcall	.+294    	; 0x2a2 <Button_init>
	Button_init(&changeModifyStateBtn, &DDRA, &PINA, 1);
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	49 e3       	ldi	r20, 0x39	; 57
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	6a e3       	ldi	r22, 0x3A	; 58
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	8b e1       	ldi	r24, 0x1B	; 27
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	8b d0       	rcall	.+278    	; 0x2a2 <Button_init>
	Button_init(&plusHour, &DDRA, &PINA, 2);
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	49 e3       	ldi	r20, 0x39	; 57
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	6a e3       	ldi	r22, 0x3A	; 58
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	82 e2       	ldi	r24, 0x22	; 34
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	83 d0       	rcall	.+262    	; 0x2a2 <Button_init>
	Button_init(&plusMin, &DDRA, &PINA, 3);
 19c:	23 e0       	ldi	r18, 0x03	; 3
 19e:	49 e3       	ldi	r20, 0x39	; 57
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	6a e3       	ldi	r22, 0x3A	; 58
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	8a e2       	ldi	r24, 0x2A	; 42
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	7b c0       	rjmp	.+246    	; 0x2a2 <Button_init>
 1ac:	08 95       	ret

000001ae <displayHourMin>:

void displayHourMin()
{
	uint16_t stopWatchData = 0;
	
	stopWatchData = hour * 100;
 1ae:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <hour>
	stopWatchData += min;
 1b2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <min>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
	FND_setfndData(stopWatchData);
 1b8:	34 e6       	ldi	r19, 0x64	; 100
 1ba:	23 9f       	mul	r18, r19
 1bc:	80 0d       	add	r24, r0
 1be:	91 1d       	adc	r25, r1
 1c0:	11 24       	eor	r1, r1
 1c2:	be c1       	rjmp	.+892    	; 0x540 <FND_setfndData>
 1c4:	08 95       	ret

000001c6 <displaySecMilisec>:
}

void displaySecMilisec()
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
	uint16_t stopWatchData = 0;
	
	stopWatchData = sec * 100;
 1ca:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <sec>
 1ce:	84 e6       	ldi	r24, 0x64	; 100
 1d0:	28 9f       	mul	r18, r24
 1d2:	e0 01       	movw	r28, r0
 1d4:	11 24       	eor	r1, r1
	stopWatchData += milisec / 10;
 1d6:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <milisec>
 1da:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <milisec+0x1>
 1de:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <milisec+0x2>
 1e2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <milisec+0x3>
 1e6:	2a e0       	ldi	r18, 0x0A	; 10
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	18 d2       	rcall	.+1072   	; 0x620 <__udivmodsi4>
 1f0:	ce 01       	movw	r24, r28
 1f2:	82 0f       	add	r24, r18
 1f4:	93 1f       	adc	r25, r19
	FND_setfndData(stopWatchData);
 1f6:	a4 d1       	rcall	.+840    	; 0x540 <FND_setfndData>
 1f8:	df 91       	pop	r29
}
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <execute_timeClock>:
 1fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <clockState>

void execute_timeClock()
{
	switch(clockState)
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	a1 f0       	breq	.+40     	; 0x22e <execute_timeClock+0x30>
 206:	18 f0       	brcs	.+6      	; 0x20e <execute_timeClock+0x10>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	c9 f0       	breq	.+50     	; 0x23e <execute_timeClock+0x40>
 20c:	1f c0       	rjmp	.+62     	; 0x24c <execute_timeClock+0x4e>
	{
		case HOURMIN:
		if (Button_GetState(&changeclockStateBtn) == ACT_RELEASED)
 20e:	85 e1       	ldi	r24, 0x15	; 21
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	54 d0       	rcall	.+168    	; 0x2bc <Button_GetState>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	19 f4       	brne	.+6      	; 0x21e <execute_timeClock+0x20>
			clockState = SECMILISEC;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <clockState>
		if (Button_GetState(&changeModifyStateBtn) == ACT_RELEASED)
 21e:	8b e1       	ldi	r24, 0x1B	; 27
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	4c d0       	rcall	.+152    	; 0x2bc <Button_GetState>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	91 f4       	brne	.+36     	; 0x24c <execute_timeClock+0x4e>
			clockState = MODIFY;
 228:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <clockState>
 22c:	0f c0       	rjmp	.+30     	; 0x24c <execute_timeClock+0x4e>
		break;
		
		case SECMILISEC:
		if (Button_GetState(&changeclockStateBtn) == ACT_RELEASED)
 22e:	85 e1       	ldi	r24, 0x15	; 21
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	44 d0       	rcall	.+136    	; 0x2bc <Button_GetState>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	51 f4       	brne	.+20     	; 0x24c <execute_timeClock+0x4e>
			clockState = HOURMIN;
 238:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <clockState>
		break;
		
		case MODIFY:
		if (Button_GetState(&changeModifyStateBtn) == ACT_RELEASED)
 23c:	07 c0       	rjmp	.+14     	; 0x24c <execute_timeClock+0x4e>
 23e:	8b e1       	ldi	r24, 0x1B	; 27
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	3c d0       	rcall	.+120    	; 0x2bc <Button_GetState>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	11 f4       	brne	.+4      	; 0x24c <execute_timeClock+0x4e>
			clockState = HOURMIN;
 248:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <clockState>
		break;
	}
	
	switch(clockState)
 24c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <clockState>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	31 f0       	breq	.+12     	; 0x260 <execute_timeClock+0x62>
 254:	18 f0       	brcs	.+6      	; 0x25c <execute_timeClock+0x5e>
 256:	82 30       	cpi	r24, 0x02	; 2
	{
		case HOURMIN:
			displayHourMin();
 258:	29 f0       	breq	.+10     	; 0x264 <execute_timeClock+0x66>
 25a:	08 95       	ret
		break;
		
		case SECMILISEC:
			displaySecMilisec();
 25c:	a8 cf       	rjmp	.-176    	; 0x1ae <displayHourMin>
 25e:	08 95       	ret
		break;
 260:	b2 cf       	rjmp	.-156    	; 0x1c6 <displaySecMilisec>
		
		case MODIFY:
		if (Button_GetState(&plusHour) == ACT_RELEASED)
 262:	08 95       	ret
 264:	82 e2       	ldi	r24, 0x22	; 34
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	29 d0       	rcall	.+82     	; 0x2bc <Button_GetState>
 26a:	82 30       	cpi	r24, 0x02	; 2
		{
			hour = (hour + 1) % 24;
 26c:	51 f4       	brne	.+20     	; 0x282 <execute_timeClock+0x84>
 26e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <hour>
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	68 e1       	ldi	r22, 0x18	; 24
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	bf d1       	rcall	.+894    	; 0x5fa <__divmodhi4>
			displayHourMin();
 27c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <hour>
		}
		if (Button_GetState(&plusMin) == ACT_RELEASED)
 280:	96 df       	rcall	.-212    	; 0x1ae <displayHourMin>
 282:	8a e2       	ldi	r24, 0x2A	; 42
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	1a d0       	rcall	.+52     	; 0x2bc <Button_GetState>
 288:	82 30       	cpi	r24, 0x02	; 2
		{
			min = (min + 1) % 24;
 28a:	51 f4       	brne	.+20     	; 0x2a0 <execute_timeClock+0xa2>
 28c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <min>
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	68 e1       	ldi	r22, 0x18	; 24
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	b0 d1       	rcall	.+864    	; 0x5fa <__divmodhi4>
 29a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <min>
			displayHourMin();
 29e:	87 cf       	rjmp	.-242    	; 0x1ae <displayHourMin>
 2a0:	08 95       	ret

000002a2 <Button_init>:
ï»¿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 2a2:	fc 01       	movw	r30, r24
 2a4:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;		// í¬ë³ì¼ëë -> ì¬ì©
 2a6:	71 83       	std	Z+1, r23	; 0x01
 2a8:	60 83       	st	Z, r22
	btn ->PIN = pin;
 2aa:	53 83       	std	Z+3, r21	; 0x03
 2ac:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 2ae:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 2b0:	31 e0       	ldi	r19, 0x01	; 1
 2b2:	35 83       	std	Z+5, r19	; 0x05
	//*btn ->DDR &= (1 << btn -> pinNum);
	GPIO_initPin(btn->DDR, INPUT, btn->pinNum);
 2b4:	42 2f       	mov	r20, r18
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	7a c1       	rjmp	.+756    	; 0x5ae <GPIO_initPin>
 2ba:	08 95       	ret

000002bc <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn ì£¼ì ì í¨ë²ì button_t
{
 2bc:	fc 01       	movw	r30, r24
	uint8_t curState = *btn->PIN & (1 << btn->pinNum);
 2be:	a2 81       	ldd	r26, Z+2	; 0x02
 2c0:	b3 81       	ldd	r27, Z+3	; 0x03
 2c2:	8c 91       	ld	r24, X
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	04 80       	ldd	r0, Z+4	; 0x04
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <Button_GetState+0x14>
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <Button_GetState+0x10>
 2d4:	28 23       	and	r18, r24
	//uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum);
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 2d6:	59 f4       	brne	.+22     	; 0x2ee <Button_GetState+0x32>
 2d8:	85 81       	ldd	r24, Z+5	; 0x05
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	41 f4       	brne	.+16     	; 0x2ee <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	af e3       	ldi	r26, 0x3F	; 63
 2e0:	bc e9       	ldi	r27, 0x9C	; 156
 2e2:	11 97       	sbiw	r26, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <Button_GetState+0x26>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Button_GetState+0x2c>
 2e8:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 2ea:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 2ec:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 2ee:	22 23       	and	r18, r18
 2f0:	69 f0       	breq	.+26     	; 0x30c <Button_GetState+0x50>
 2f2:	85 81       	ldd	r24, Z+5	; 0x05
 2f4:	81 11       	cpse	r24, r1
 2f6:	0c c0       	rjmp	.+24     	; 0x310 <Button_GetState+0x54>
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9c e9       	ldi	r25, 0x9C	; 156
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <Button_GetState+0x40>
 300:	00 c0       	rjmp	.+0      	; 0x302 <Button_GetState+0x46>
 302:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;	
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	08 95       	ret
	}
	return ACT_NONE;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
 310:	80 e0       	ldi	r24, 0x00	; 0
}
 312:	08 95       	ret

00000314 <FND_init>:
uint16_t data = 0;
uint8_t fndColonFlag = 0;

void FND_init()
{
	FND_NUM_DDR = 0xff;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_DIGIT_DDR = 0xff;
 31a:	82 b9       	out	0x02, r24	; 2
 31c:	08 95       	ret

0000031e <showNum>:
}

void showNum(uint16_t num)
{
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	2b 97       	sbiw	r28, 0x0b	; 11
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	8c 01       	movw	r16, r24
	uint8_t fndFont[11] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67, 0x80};
 338:	8b e0       	ldi	r24, 0x0B	; 11
 33a:	e0 e0       	ldi	r30, 0x00	; 0
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	de 01       	movw	r26, r28
 340:	11 96       	adiw	r26, 0x01	; 1
 342:	01 90       	ld	r0, Z+
 344:	0d 92       	st	X+, r0
 346:	8a 95       	dec	r24
 348:	e1 f7       	brne	.-8      	; 0x342 <showNum+0x24>
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 5;
 34a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	65 e0       	ldi	r22, 0x05	; 5
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	51 d1       	rcall	.+674    	; 0x5fa <__divmodhi4>
 358:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
	FND_DIGIT_PORT |= (1<<FND_DIGIT_4) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_1); //ì«ì ì°ê¸° ì ì ë¶ ë¤ ëê¸° (ì»¤ë¨¼í ë¤ 1ë¡ ì¤ì )
 35c:	83 b1       	in	r24, 0x03	; 3
 35e:	80 6f       	ori	r24, 0xF0	; 240
 360:	83 b9       	out	0x03, r24	; 3
	switch (fndDigitState)
 362:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	09 f4       	brne	.+2      	; 0x36c <showNum+0x4e>
 36a:	74 c0       	rjmp	.+232    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 36c:	30 f4       	brcc	.+12     	; 0x37a <showNum+0x5c>
 36e:	88 23       	and	r24, r24
 370:	59 f0       	breq	.+22     	; 0x388 <showNum+0x6a>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	09 f4       	brne	.+2      	; 0x378 <showNum+0x5a>
 376:	3e c0       	rjmp	.+124    	; 0x3f4 <showNum+0xd6>
 378:	cd c0       	rjmp	.+410    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	09 f4       	brne	.+2      	; 0x380 <showNum+0x62>
 37e:	98 c0       	rjmp	.+304    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 380:	84 30       	cpi	r24, 0x04	; 4
 382:	09 f4       	brne	.+2      	; 0x386 <showNum+0x68>
 384:	ba c0       	rjmp	.+372    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 386:	c6 c0       	rjmp	.+396    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	{
		case 0:
		FND_NUM_PORT = fndFont[(num / 1000) % 10]; // number 1
 388:	98 01       	movw	r18, r16
 38a:	36 95       	lsr	r19
 38c:	27 95       	ror	r18
 38e:	36 95       	lsr	r19
 390:	27 95       	ror	r18
 392:	36 95       	lsr	r19
 394:	27 95       	ror	r18
 396:	a5 ec       	ldi	r26, 0xC5	; 197
 398:	b0 e2       	ldi	r27, 0x20	; 32
 39a:	64 d1       	rcall	.+712    	; 0x664 <__umulhisi3>
 39c:	ac 01       	movw	r20, r24
 39e:	52 95       	swap	r21
 3a0:	42 95       	swap	r20
 3a2:	4f 70       	andi	r20, 0x0F	; 15
 3a4:	45 27       	eor	r20, r21
 3a6:	5f 70       	andi	r21, 0x0F	; 15
 3a8:	45 27       	eor	r20, r21
 3aa:	9a 01       	movw	r18, r20
 3ac:	ad ec       	ldi	r26, 0xCD	; 205
 3ae:	bc ec       	ldi	r27, 0xCC	; 204
 3b0:	59 d1       	rcall	.+690    	; 0x664 <__umulhisi3>
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	9c 01       	movw	r18, r24
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	82 0f       	add	r24, r18
 3d2:	93 1f       	adc	r25, r19
 3d4:	9a 01       	movw	r18, r20
 3d6:	28 1b       	sub	r18, r24
 3d8:	39 0b       	sbc	r19, r25
 3da:	e1 e0       	ldi	r30, 0x01	; 1
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	ec 0f       	add	r30, r28
 3e0:	fd 1f       	adc	r31, r29
 3e2:	e2 0f       	add	r30, r18
 3e4:	f3 1f       	adc	r31, r19
 3e6:	80 81       	ld	r24, Z
 3e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_1); //ì²ììë¦¬ì í
 3ec:	83 b1       	in	r24, 0x03	; 3
 3ee:	8f 7e       	andi	r24, 0xEF	; 239
 3f0:	83 b9       	out	0x03, r24	; 3
		break;
 3f2:	90 c0       	rjmp	.+288    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		
		case 1:
		FND_NUM_PORT = fndFont[(num / 100) % 10]; // number 1
 3f4:	98 01       	movw	r18, r16
 3f6:	36 95       	lsr	r19
 3f8:	27 95       	ror	r18
 3fa:	36 95       	lsr	r19
 3fc:	27 95       	ror	r18
 3fe:	ab e7       	ldi	r26, 0x7B	; 123
 400:	b4 e1       	ldi	r27, 0x14	; 20
 402:	30 d1       	rcall	.+608    	; 0x664 <__umulhisi3>
 404:	ac 01       	movw	r20, r24
 406:	56 95       	lsr	r21
 408:	47 95       	ror	r20
 40a:	9a 01       	movw	r18, r20
 40c:	ad ec       	ldi	r26, 0xCD	; 205
 40e:	bc ec       	ldi	r27, 0xCC	; 204
 410:	29 d1       	rcall	.+594    	; 0x664 <__umulhisi3>
 412:	96 95       	lsr	r25
 414:	87 95       	ror	r24
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	9c 01       	movw	r18, r24
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	82 0f       	add	r24, r18
 432:	93 1f       	adc	r25, r19
 434:	9a 01       	movw	r18, r20
 436:	28 1b       	sub	r18, r24
 438:	39 0b       	sbc	r19, r25
 43a:	e1 e0       	ldi	r30, 0x01	; 1
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ec 0f       	add	r30, r28
 440:	fd 1f       	adc	r31, r29
 442:	e2 0f       	add	r30, r18
 444:	f3 1f       	adc	r31, r19
 446:	80 81       	ld	r24, Z
 448:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_2); //ë°±ììë¦¬ì í
 44c:	83 b1       	in	r24, 0x03	; 3
 44e:	8f 7d       	andi	r24, 0xDF	; 223
		break;
 450:	83 b9       	out	0x03, r24	; 3
		
		case 2:
		FND_NUM_PORT = fndFont[(num / 10) % 10]; // number 1
 452:	60 c0       	rjmp	.+192    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 454:	98 01       	movw	r18, r16
 456:	ad ec       	ldi	r26, 0xCD	; 205
 458:	bc ec       	ldi	r27, 0xCC	; 204
 45a:	04 d1       	rcall	.+520    	; 0x664 <__umulhisi3>
 45c:	ac 01       	movw	r20, r24
 45e:	56 95       	lsr	r21
 460:	47 95       	ror	r20
 462:	56 95       	lsr	r21
 464:	47 95       	ror	r20
 466:	56 95       	lsr	r21
 468:	47 95       	ror	r20
 46a:	9a 01       	movw	r18, r20
 46c:	fb d0       	rcall	.+502    	; 0x664 <__umulhisi3>
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	9c 01       	movw	r18, r24
 47c:	22 0f       	add	r18, r18
 47e:	33 1f       	adc	r19, r19
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	82 0f       	add	r24, r18
 48e:	93 1f       	adc	r25, r19
 490:	9a 01       	movw	r18, r20
 492:	28 1b       	sub	r18, r24
 494:	39 0b       	sbc	r19, r25
 496:	e1 e0       	ldi	r30, 0x01	; 1
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	ec 0f       	add	r30, r28
 49c:	fd 1f       	adc	r31, r29
 49e:	e2 0f       	add	r30, r18
 4a0:	f3 1f       	adc	r31, r19
 4a2:	80 81       	ld	r24, Z
 4a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_3); //ì­ììë¦¬ì í
 4a8:	83 b1       	in	r24, 0x03	; 3
 4aa:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 4ac:	83 b9       	out	0x03, r24	; 3
		
		case 3:
		FND_NUM_PORT = fndFont[num % 10]; // number 1
 4ae:	32 c0       	rjmp	.+100    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4b0:	98 01       	movw	r18, r16
 4b2:	ad ec       	ldi	r26, 0xCD	; 205
 4b4:	bc ec       	ldi	r27, 0xCC	; 204
 4b6:	d6 d0       	rcall	.+428    	; 0x664 <__umulhisi3>
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	9c 01       	movw	r18, r24
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	82 0f       	add	r24, r18
 4d8:	93 1f       	adc	r25, r19
 4da:	98 01       	movw	r18, r16
 4dc:	28 1b       	sub	r18, r24
 4de:	39 0b       	sbc	r19, r25
 4e0:	e1 e0       	ldi	r30, 0x01	; 1
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	ec 0f       	add	r30, r28
 4e6:	fd 1f       	adc	r31, r29
 4e8:	e2 0f       	add	r30, r18
 4ea:	f3 1f       	adc	r31, r19
 4ec:	80 81       	ld	r24, Z
 4ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_4); //ì¼ììë¦¬ì í
 4f2:	83 b1       	in	r24, 0x03	; 3
 4f4:	8f 77       	andi	r24, 0x7F	; 127
 4f6:	83 b9       	out	0x03, r24	; 3
		break;
 4f8:	0d c0       	rjmp	.+26     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		
		case 4:
		if (fndColonFlag)
 4fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <fndColonFlag>
 4fe:	88 23       	and	r24, r24
 500:	21 f0       	breq	.+8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
			FND_NUM_PORT = fndFont[FND_COLON]; //dp
 502:	8b 85       	ldd	r24, Y+11	; 0x0b
 504:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 508:	02 c0       	rjmp	.+4      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		else
			FND_NUM_PORT = 0x00;
 50a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_2); //100ììë¦¬ dp
 50e:	83 b1       	in	r24, 0x03	; 3
 510:	8f 7d       	andi	r24, 0xDF	; 223
 512:	83 b9       	out	0x03, r24	; 3
	}
}
 514:	2b 96       	adiw	r28, 0x0b	; 11
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <changeFndColonFlag>:

void changeFndColonFlag()
{
	if (fndColonFlag)
 52a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <fndColonFlag>
 52e:	88 23       	and	r24, r24
 530:	19 f0       	breq	.+6      	; 0x538 <changeFndColonFlag+0xe>
		fndColonFlag = 0;
 532:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <fndColonFlag>
 536:	08 95       	ret
	else
		fndColonFlag = 1;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <fndColonFlag>
 53e:	08 95       	ret

00000540 <FND_setfndData>:
}

void FND_setfndData(uint16_t mydata)
{
	data = mydata;
 540:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <data+0x1>
 544:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <data>
 548:	08 95       	ret

0000054a <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	showNum(data);
 54a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <data>
 54e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <data+0x1>
 552:	e5 ce       	rjmp	.-566    	; 0x31e <showNum>
 554:	08 95       	ret

00000556 <__vector_9>:
#include "ap/timeClock/timeClock.h"

ISR(TIMER2_COMP_vect)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	0b b6       	in	r0, 0x3b	; 59
 562:	0f 92       	push	r0
 564:	2f 93       	push	r18
 566:	3f 93       	push	r19
 568:	4f 93       	push	r20
 56a:	5f 93       	push	r21
 56c:	6f 93       	push	r22
 56e:	7f 93       	push	r23
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
 574:	af 93       	push	r26
 576:	bf 93       	push	r27
 578:	ef 93       	push	r30
 57a:	ff 93       	push	r31
	FND_ISR_Process();
 57c:	e6 df       	rcall	.-52     	; 0x54a <FND_ISR_Process>
	incMilisec();
 57e:	a4 dd       	rcall	.-1208   	; 0xc8 <incMilisec>
 580:	ff 91       	pop	r31
}
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0b be       	out	0x3b, r0	; 59
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <main>:
 5a6:	d0 dd       	rcall	.-1120   	; 0x148 <init_timeClock>
{
	init_timeClock();
	sei();
    while (1) 
    {
		execute_timeClock();
 5a8:	78 94       	sei
 5aa:	29 de       	rcall	.-942    	; 0x1fe <execute_timeClock>
 5ac:	fe cf       	rjmp	.-4      	; 0x5aa <main+0x4>

000005ae <GPIO_initPin>:
	*DDR = 0x00;
}

//init - pin (1EA)
void GPIO_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum)
{
 5ae:	fc 01       	movw	r30, r24
	if (dir == OUTPUT)
 5b0:	61 30       	cpi	r22, 0x01	; 1
 5b2:	59 f4       	brne	.+22     	; 0x5ca <GPIO_initPin+0x1c>
	*DDR |= (1 << pinNum); //no ~?
 5b4:	20 81       	ld	r18, Z
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <GPIO_initPin+0x12>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	4a 95       	dec	r20
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <GPIO_initPin+0xe>
 5c4:	82 2b       	or	r24, r18
 5c6:	80 83       	st	Z, r24
 5c8:	08 95       	ret
	else
	*DDR &= ~(1 << pinNum);
 5ca:	90 81       	ld	r25, Z
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <GPIO_initPin+0x28>
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	4a 95       	dec	r20
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <GPIO_initPin+0x24>
 5da:	20 95       	com	r18
 5dc:	29 23       	and	r18, r25
 5de:	20 83       	st	Z, r18
 5e0:	08 95       	ret

000005e2 <initTIM2>:
}

void initTIM2()
{
	//prescaler 1/64ë¡ ì¤ì  > cs22, cs21, cs20 0 1 1ë¡ ì¤ì í´ì¼ í¨
	TCCR2 |= (0 << CS22) | (1 << CS21) | (1 << CS20);
 5e2:	85 b5       	in	r24, 0x25	; 37
 5e4:	83 60       	ori	r24, 0x03	; 3
 5e6:	85 bd       	out	0x25, r24	; 37
	
	//CTC mode ì¤ì 
	TCCR2 |= (1 << WGM21) | (0 << WGM20);
 5e8:	85 b5       	in	r24, 0x25	; 37
 5ea:	88 60       	ori	r24, 0x08	; 8
 5ec:	85 bd       	out	0x25, r24	; 37
	
	//TIMSK timer compare bit on
	TIMSK |= (1 << OCIE2);
 5ee:	87 b7       	in	r24, 0x37	; 55
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	87 bf       	out	0x37, r24	; 55
	
	//ë¹êµí  ì«ì ì¤ì 
	OCR2 = 250 - 1;
 5f4:	89 ef       	ldi	r24, 0xF9	; 249
 5f6:	83 bd       	out	0x23, r24	; 35
 5f8:	08 95       	ret

000005fa <__divmodhi4>:
 5fa:	97 fb       	bst	r25, 7
 5fc:	07 2e       	mov	r0, r23
 5fe:	16 f4       	brtc	.+4      	; 0x604 <__divmodhi4+0xa>
 600:	00 94       	com	r0
 602:	06 d0       	rcall	.+12     	; 0x610 <__divmodhi4_neg1>
 604:	77 fd       	sbrc	r23, 7
 606:	08 d0       	rcall	.+16     	; 0x618 <__divmodhi4_neg2>
 608:	3c d0       	rcall	.+120    	; 0x682 <__udivmodhi4>
 60a:	07 fc       	sbrc	r0, 7
 60c:	05 d0       	rcall	.+10     	; 0x618 <__divmodhi4_neg2>
 60e:	3e f4       	brtc	.+14     	; 0x61e <__divmodhi4_exit>

00000610 <__divmodhi4_neg1>:
 610:	90 95       	com	r25
 612:	81 95       	neg	r24
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	08 95       	ret

00000618 <__divmodhi4_neg2>:
 618:	70 95       	com	r23
 61a:	61 95       	neg	r22
 61c:	7f 4f       	sbci	r23, 0xFF	; 255

0000061e <__divmodhi4_exit>:
 61e:	08 95       	ret

00000620 <__udivmodsi4>:
 620:	a1 e2       	ldi	r26, 0x21	; 33
 622:	1a 2e       	mov	r1, r26
 624:	aa 1b       	sub	r26, r26
 626:	bb 1b       	sub	r27, r27
 628:	fd 01       	movw	r30, r26
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__udivmodsi4_ep>

0000062c <__udivmodsi4_loop>:
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	ee 1f       	adc	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	a2 17       	cp	r26, r18
 636:	b3 07       	cpc	r27, r19
 638:	e4 07       	cpc	r30, r20
 63a:	f5 07       	cpc	r31, r21
 63c:	20 f0       	brcs	.+8      	; 0x646 <__udivmodsi4_ep>
 63e:	a2 1b       	sub	r26, r18
 640:	b3 0b       	sbc	r27, r19
 642:	e4 0b       	sbc	r30, r20
 644:	f5 0b       	sbc	r31, r21

00000646 <__udivmodsi4_ep>:
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	1a 94       	dec	r1
 650:	69 f7       	brne	.-38     	; 0x62c <__udivmodsi4_loop>
 652:	60 95       	com	r22
 654:	70 95       	com	r23
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	9b 01       	movw	r18, r22
 65c:	ac 01       	movw	r20, r24
 65e:	bd 01       	movw	r22, r26
 660:	cf 01       	movw	r24, r30
 662:	08 95       	ret

00000664 <__umulhisi3>:
 664:	a2 9f       	mul	r26, r18
 666:	b0 01       	movw	r22, r0
 668:	b3 9f       	mul	r27, r19
 66a:	c0 01       	movw	r24, r0
 66c:	a3 9f       	mul	r26, r19
 66e:	70 0d       	add	r23, r0
 670:	81 1d       	adc	r24, r1
 672:	11 24       	eor	r1, r1
 674:	91 1d       	adc	r25, r1
 676:	b2 9f       	mul	r27, r18
 678:	70 0d       	add	r23, r0
 67a:	81 1d       	adc	r24, r1
 67c:	11 24       	eor	r1, r1
 67e:	91 1d       	adc	r25, r1
 680:	08 95       	ret

00000682 <__udivmodhi4>:
 682:	aa 1b       	sub	r26, r26
 684:	bb 1b       	sub	r27, r27
 686:	51 e1       	ldi	r21, 0x11	; 17
 688:	07 c0       	rjmp	.+14     	; 0x698 <__udivmodhi4_ep>

0000068a <__udivmodhi4_loop>:
 68a:	aa 1f       	adc	r26, r26
 68c:	bb 1f       	adc	r27, r27
 68e:	a6 17       	cp	r26, r22
 690:	b7 07       	cpc	r27, r23
 692:	10 f0       	brcs	.+4      	; 0x698 <__udivmodhi4_ep>
 694:	a6 1b       	sub	r26, r22
 696:	b7 0b       	sbc	r27, r23

00000698 <__udivmodhi4_ep>:
 698:	88 1f       	adc	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	5a 95       	dec	r21
 69e:	a9 f7       	brne	.-22     	; 0x68a <__udivmodhi4_loop>
 6a0:	80 95       	com	r24
 6a2:	90 95       	com	r25
 6a4:	bc 01       	movw	r22, r24
 6a6:	cd 01       	movw	r24, r26
 6a8:	08 95       	ret

000006aa <_exit>:
 6aa:	f8 94       	cli

000006ac <__stop_program>:
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <__stop_program>
