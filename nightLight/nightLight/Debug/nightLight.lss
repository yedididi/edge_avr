
nightLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecf  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad4  00000000  00000000  00001287  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ad  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 30       	cpi	r26, 0x0D	; 13
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	43 d0       	rcall	.+134    	; 0x130 <main>
  aa:	ba c0       	rjmp	.+372    	; 0x220 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <initLight>:
#include "../../driver/button/button.h"
#include "../../driver/led/led.h"

void initLight()
{
	Button_init(&nextLevelbtn, &BUTTON_DDR, &BUTTON_PIN, 0);
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	49 e3       	ldi	r20, 0x39	; 57
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	6a e3       	ldi	r22, 0x3A	; 58
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	3c d0       	rcall	.+120    	; 0x136 <Button_init>
	Button_init(&offBtn, &BUTTON_DDR, &BUTTON_PIN, 1);
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	49 e3       	ldi	r20, 0x39	; 57
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	6a e3       	ldi	r22, 0x3A	; 58
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	34 d0       	rcall	.+104    	; 0x136 <Button_init>

	lightState = OFF;
  ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	08 95       	ret

000000d4 <executeLight>:
}

void executeLight()
{
	if (Button_GetState(&nextLevelbtn) == ACT_RELEASED)
  d4:	87 e0       	ldi	r24, 0x07	; 7
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	42 d0       	rcall	.+132    	; 0x15e <Button_GetState>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	49 f4       	brne	.+18     	; 0xf0 <executeLight+0x1c>
		lightState = (lightState + 1) % 5;
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	73 d0       	rcall	.+230    	; 0x1d2 <__divmodhi4>
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (Button_GetState(&offBtn) == ACT_RELEASED)
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	34 d0       	rcall	.+104    	; 0x15e <Button_GetState>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	11 f4       	brne	.+4      	; 0xfe <executeLight+0x2a>
		lightState = OFF;
  fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

	switch (lightState)
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	79 f0       	breq	.+30     	; 0x124 <executeLight+0x50>
 106:	28 f4       	brcc	.+10     	; 0x112 <executeLight+0x3e>
 108:	88 23       	and	r24, r24
 10a:	41 f0       	breq	.+16     	; 0x11c <executeLight+0x48>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <executeLight+0x4c>
 110:	08 95       	ret
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	49 f0       	breq	.+18     	; 0x128 <executeLight+0x54>
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	49 f0       	breq	.+18     	; 0x12c <executeLight+0x58>
	{
		case OFF:
		turnOFFLight();
 11a:	08 95       	ret
		break;
 11c:	4c c0       	rjmp	.+152    	; 0x1b6 <turnOFFLight>

		case TWO:
		turnTWOLight();
 11e:	08 95       	ret
		break;

		case FOUR:
		turnFOURLight();
 120:	4c c0       	rjmp	.+152    	; 0x1ba <turnTWOLight>
 122:	08 95       	ret
		break;
 124:	4d c0       	rjmp	.+154    	; 0x1c0 <turnFOURLight>

		case SIX:
		turnSIXLight();
 126:	08 95       	ret
 128:	4e c0       	rjmp	.+156    	; 0x1c6 <turnSIXLight>
		break;
 12a:	08 95       	ret

		case EIGHT:
		turnEIGHTLight();
 12c:	4f c0       	rjmp	.+158    	; 0x1cc <turnEIGHTLight>
 12e:	08 95       	ret

00000130 <main>:
#include "executeLight/executeLight.h"

int main(void)
{
	initLight();
 130:	be df       	rcall	.-132    	; 0xae <initLight>
	while (1)
	{
		executeLight();
 132:	d0 df       	rcall	.-96     	; 0xd4 <executeLight>
 134:	fe cf       	rjmp	.-4      	; 0x132 <main+0x2>

00000136 <Button_init>:
 136:	fc 01       	movw	r30, r24
﻿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
	btn ->DDR = ddr;		// 포변일때는 -> 사용
 138:	71 83       	std	Z+1, r23	; 0x01
 13a:	60 83       	st	Z, r22
	btn ->PIN = pin;
 13c:	53 83       	std	Z+3, r21	; 0x03
 13e:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 140:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	85 83       	std	Z+5, r24	; 0x05
	*btn ->DDR &= (1 << btn -> pinNum);
 146:	fb 01       	movw	r30, r22
 148:	30 81       	ld	r19, Z
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Button_init+0x1e>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	2a 95       	dec	r18
 156:	e2 f7       	brpl	.-8      	; 0x150 <Button_init+0x1a>
 158:	83 23       	and	r24, r19
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn 주소 유효범위 button_t
{
 15e:	fc 01       	movw	r30, r24
	uint8_t curState = *btn -> PIN & (1<<btn -> pinNum);
 160:	a2 81       	ldd	r26, Z+2	; 0x02
 162:	b3 81       	ldd	r27, Z+3	; 0x03
 164:	8c 91       	ld	r24, X
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	04 80       	ldd	r0, Z+4	; 0x04
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Button_GetState+0x14>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <Button_GetState+0x10>
 176:	28 23       	and	r18, r24
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 178:	59 f4       	brne	.+22     	; 0x190 <Button_GetState+0x32>
 17a:	85 81       	ldd	r24, Z+5	; 0x05
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	41 f4       	brne	.+16     	; 0x190 <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	af e3       	ldi	r26, 0x3F	; 63
 182:	bc e9       	ldi	r27, 0x9C	; 156
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <Button_GetState+0x26>
 188:	00 c0       	rjmp	.+0      	; 0x18a <Button_GetState+0x2c>
 18a:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 18c:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 18e:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 190:	22 23       	and	r18, r18
 192:	69 f0       	breq	.+26     	; 0x1ae <Button_GetState+0x50>
 194:	85 81       	ldd	r24, Z+5	; 0x05
 196:	81 11       	cpse	r24, r1
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <Button_GetState+0x54>
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	9c e9       	ldi	r25, 0x9C	; 156
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <Button_GetState+0x40>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <Button_GetState+0x46>
 1a4:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	08 95       	ret
		
	}
	return ACT_NONE;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
 1b2:	80 e0       	ldi	r24, 0x00	; 0
}
 1b4:	08 95       	ret

000001b6 <turnOFFLight>:
﻿#include "led.h"

void turnOFFLight()
{
	PORTD = 0b00000000;
 1b6:	12 ba       	out	0x12, r1	; 18
 1b8:	08 95       	ret

000001ba <turnTWOLight>:
}

void turnTWOLight()
{
	PORTD = 0b00000011;
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	08 95       	ret

000001c0 <turnFOURLight>:
}

void turnFOURLight()
{
	PORTD = 0b00001111;
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <turnSIXLight>:
}

void turnSIXLight()
{
	PORTD = 0b00111111;
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	08 95       	ret

000001cc <turnEIGHTLight>:
}

void turnEIGHTLight()
{
	PORTD = 0b11111111;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	08 95       	ret

000001d2 <__divmodhi4>:
 1d2:	97 fb       	bst	r25, 7
 1d4:	07 2e       	mov	r0, r23
 1d6:	16 f4       	brtc	.+4      	; 0x1dc <__divmodhi4+0xa>
 1d8:	00 94       	com	r0
 1da:	06 d0       	rcall	.+12     	; 0x1e8 <__divmodhi4_neg1>
 1dc:	77 fd       	sbrc	r23, 7
 1de:	08 d0       	rcall	.+16     	; 0x1f0 <__divmodhi4_neg2>
 1e0:	0b d0       	rcall	.+22     	; 0x1f8 <__udivmodhi4>
 1e2:	07 fc       	sbrc	r0, 7
 1e4:	05 d0       	rcall	.+10     	; 0x1f0 <__divmodhi4_neg2>
 1e6:	3e f4       	brtc	.+14     	; 0x1f6 <__divmodhi4_exit>

000001e8 <__divmodhi4_neg1>:
 1e8:	90 95       	com	r25
 1ea:	81 95       	neg	r24
 1ec:	9f 4f       	sbci	r25, 0xFF	; 255
 1ee:	08 95       	ret

000001f0 <__divmodhi4_neg2>:
 1f0:	70 95       	com	r23
 1f2:	61 95       	neg	r22
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255

000001f6 <__divmodhi4_exit>:
 1f6:	08 95       	ret

000001f8 <__udivmodhi4>:
 1f8:	aa 1b       	sub	r26, r26
 1fa:	bb 1b       	sub	r27, r27
 1fc:	51 e1       	ldi	r21, 0x11	; 17
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <__udivmodhi4_ep>

00000200 <__udivmodhi4_loop>:
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	a6 17       	cp	r26, r22
 206:	b7 07       	cpc	r27, r23
 208:	10 f0       	brcs	.+4      	; 0x20e <__udivmodhi4_ep>
 20a:	a6 1b       	sub	r26, r22
 20c:	b7 0b       	sbc	r27, r23

0000020e <__udivmodhi4_ep>:
 20e:	88 1f       	adc	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	5a 95       	dec	r21
 214:	a9 f7       	brne	.-22     	; 0x200 <__udivmodhi4_loop>
 216:	80 95       	com	r24
 218:	90 95       	com	r25
 21a:	bc 01       	movw	r22, r24
 21c:	cd 01       	movw	r24, r26
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
