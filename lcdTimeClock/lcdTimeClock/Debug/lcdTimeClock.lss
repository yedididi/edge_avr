
lcdTimeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000bf2  00000c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800116  00800116  00000c9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a20  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dff  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cce  00000000  00000000  000036e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000043b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000761  00000000  00000000  000046e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f0  00000000  00000000  00004e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	6f c2       	rjmp	.+1246   	; 0x504 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 33       	cpi	r26, 0x3A	; 58
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	47 d2       	rcall	.+1166   	; 0x552 <main>
  c4:	94 c5       	rjmp	.+2856   	; 0xbee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <incMilisec>:
ï»¿#include "lcdTimeClock.h"

void incMilisec()
{
	milisec = (milisec + 1) % 1000;
  c8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <milisec>
  cc:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <milisec+0x1>
  d0:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <milisec+0x2>
  d4:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <milisec+0x3>
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	8f 4f       	sbci	r24, 0xFF	; 255
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	28 ee       	ldi	r18, 0xE8	; 232
  e6:	33 e0       	ldi	r19, 0x03	; 3
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	6f d2       	rcall	.+1246   	; 0x5cc <__udivmodsi4>
  ee:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <milisec>
  f2:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <milisec+0x1>
  f6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <milisec+0x2>
  fa:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <milisec+0x3>
	if (milisec)
  fe:	67 2b       	or	r22, r23
 100:	68 2b       	or	r22, r24
 102:	69 2b       	or	r22, r25
 104:	f9 f4       	brne	.+62     	; 0x144 <incMilisec+0x7c>
	return;
	else
	{
		sec = (sec + 1) % 60;
 106:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sec>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	6c e3       	ldi	r22, 0x3C	; 60
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	49 d2       	rcall	.+1170   	; 0x5a6 <__divmodhi4>
 114:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <sec>
		if (sec)
 118:	81 11       	cpse	r24, r1
 11a:	14 c0       	rjmp	.+40     	; 0x144 <incMilisec+0x7c>
		return;
		else
		{
			min = (min + 1) % 60;
 11c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <min>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	6c e3       	ldi	r22, 0x3C	; 60
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	3e d2       	rcall	.+1148   	; 0x5a6 <__divmodhi4>
 12a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <min>
			if (min)
 12e:	81 11       	cpse	r24, r1
 130:	09 c0       	rjmp	.+18     	; 0x144 <incMilisec+0x7c>
			return ;
			else
			hour = (hour + 1) % 24;
 132:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <hour>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	68 e1       	ldi	r22, 0x18	; 24
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	33 d2       	rcall	.+1126   	; 0x5a6 <__divmodhi4>
 140:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <hour>
 144:	08 95       	ret

00000146 <init_timeClock>:
	}
}

void init_timeClock()
{
	LCD_init();
 146:	88 d1       	rcall	.+784    	; 0x458 <LCD_init>
	
	milisec = 0;
 148:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <milisec>
 14c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <milisec+0x1>
 150:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <milisec+0x2>
 154:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <milisec+0x3>
	sec = 0;
 158:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <sec>
	min = 0;
 15c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <min>
	hour = 0;
 160:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <hour>
	clockState = CLOCK;
 164:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
	
	//initTIM0();
	initTIM2();
 168:	12 d2       	rcall	.+1060   	; 0x58e <initTIM2>
	Button_init(&changeStateBtn, &DDRA, &PINA, 0);
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	49 e3       	ldi	r20, 0x39	; 57
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	6a e3       	ldi	r22, 0x3A	; 58
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	8b e1       	ldi	r24, 0x1B	; 27
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	f0 d0       	rcall	.+480    	; 0x35a <Button_init>
	Button_init(&plusHour, &DDRA, &PINA, 1);
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	49 e3       	ldi	r20, 0x39	; 57
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	6a e3       	ldi	r22, 0x3A	; 58
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	8b e2       	ldi	r24, 0x2B	; 43
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	e8 d0       	rcall	.+464    	; 0x35a <Button_init>
	Button_init(&plusMin, &DDRA, &PINA, 2);
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	49 e3       	ldi	r20, 0x39	; 57
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	6a e3       	ldi	r22, 0x3A	; 58
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	84 e3       	ldi	r24, 0x34	; 52
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	e0 d0       	rcall	.+448    	; 0x35a <Button_init>
	Button_init(&plusSec, &DDRA, &PINA, 3);
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	49 e3       	ldi	r20, 0x39	; 57
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	6a e3       	ldi	r22, 0x3A	; 58
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	83 e2       	ldi	r24, 0x23	; 35
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	d8 c0       	rjmp	.+432    	; 0x35a <Button_init>
 1aa:	08 95       	ret

000001ac <displayClock>:
}

void displayClock()
{
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	6e 97       	sbiw	r28, 0x1e	; 30
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
	char buff[30];
	
	sprintf(buff, "%d:%d:%d", hour, min, sec);
 1c4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sec>
 1c8:	1f 92       	push	r1
 1ca:	8f 93       	push	r24
 1cc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <min>
 1d0:	1f 92       	push	r1
 1d2:	8f 93       	push	r24
 1d4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <hour>
 1d8:	1f 92       	push	r1
 1da:	8f 93       	push	r24
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	9f 93       	push	r25
 1e2:	8f 93       	push	r24
 1e4:	8e 01       	movw	r16, r28
 1e6:	0f 5f       	subi	r16, 0xFF	; 255
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ea:	1f 93       	push	r17
 1ec:	0f 93       	push	r16
 1ee:	24 d2       	rcall	.+1096   	; 0x638 <sprintf>
	LCD_writeStringXY(0, 5, buff);
 1f0:	a8 01       	movw	r20, r16
 1f2:	65 e0       	ldi	r22, 0x05	; 5
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	7d d1       	rcall	.+762    	; 0x4f2 <LCD_writeStringXY>
}
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	6e 96       	adiw	r28, 0x1e	; 30
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <modifyMode>:

void modifyMode()
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	6e 97       	sbiw	r28, 0x1e	; 30
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	if (Button_GetState(&plusHour) == ACT_RELEASED)
 230:	8b e2       	ldi	r24, 0x2B	; 43
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	9f d0       	rcall	.+318    	; 0x374 <Button_GetState>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	49 f4       	brne	.+18     	; 0x24c <modifyMode+0x34>
	{
		backupHour = (backupHour + 1) % 24;
 23a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <backupHour>
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	68 e1       	ldi	r22, 0x18	; 24
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	af d1       	rcall	.+862    	; 0x5a6 <__divmodhi4>
 248:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <backupHour>
	}
	if (Button_GetState(&plusMin) == ACT_RELEASED)
 24c:	84 e3       	ldi	r24, 0x34	; 52
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	91 d0       	rcall	.+290    	; 0x374 <Button_GetState>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	49 f4       	brne	.+18     	; 0x268 <modifyMode+0x50>
	{
		backupMin = (backupMin + 1) % 24;
 256:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <backupMin>
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	68 e1       	ldi	r22, 0x18	; 24
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	a1 d1       	rcall	.+834    	; 0x5a6 <__divmodhi4>
 264:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <backupMin>
	}
	if (Button_GetState(&plusSec) == ACT_RELEASED)
 268:	83 e2       	ldi	r24, 0x23	; 35
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	83 d0       	rcall	.+262    	; 0x374 <Button_GetState>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	49 f4       	brne	.+18     	; 0x284 <modifyMode+0x6c>
	{
		backupSec = (backupSec + 1) % 60;
 272:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <backupSec>
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	6c e3       	ldi	r22, 0x3C	; 60
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	93 d1       	rcall	.+806    	; 0x5a6 <__divmodhi4>
 280:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <backupSec>
	}
	
	hour = backupHour;
 284:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <backupHour>
 288:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <hour>
	min = backupMin;
 28c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <backupMin>
 290:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <min>
	sec = backupSec; 
 294:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <backupSec>
 298:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <sec>
	
	LCD_writeStringXY(0, 3, "Modify mode");
 29c:	49 e0       	ldi	r20, 0x09	; 9
 29e:	51 e0       	ldi	r21, 0x01	; 1
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	26 d1       	rcall	.+588    	; 0x4f2 <LCD_writeStringXY>
	char buff[30];
	sprintf(buff, "%d:%d:%d", hour, min, sec);
 2a6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sec>
 2aa:	1f 92       	push	r1
 2ac:	8f 93       	push	r24
 2ae:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <min>
 2b2:	1f 92       	push	r1
 2b4:	8f 93       	push	r24
 2b6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <hour>
 2ba:	1f 92       	push	r1
 2bc:	8f 93       	push	r24
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	8e 01       	movw	r16, r28
 2c8:	0f 5f       	subi	r16, 0xFF	; 255
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
 2cc:	1f 93       	push	r17
 2ce:	0f 93       	push	r16
	LCD_writeStringXY(1, 5, buff);
 2d0:	b3 d1       	rcall	.+870    	; 0x638 <sprintf>
 2d2:	a8 01       	movw	r20, r16
 2d4:	65 e0       	ldi	r22, 0x05	; 5
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0c d1       	rcall	.+536    	; 0x4f2 <LCD_writeStringXY>
}
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	6e 96       	adiw	r28, 0x1e	; 30
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <execute_timeClock>:

void execute_timeClock()
{
	switch(clockState)
 2fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 2fe:	88 23       	and	r24, r24
 300:	19 f0       	breq	.+6      	; 0x308 <execute_timeClock+0xe>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	b1 f0       	breq	.+44     	; 0x332 <execute_timeClock+0x38>
 306:	1e c0       	rjmp	.+60     	; 0x344 <execute_timeClock+0x4a>
	{
		case CLOCK:
		if (Button_GetState(&changeStateBtn) == ACT_RELEASED)
 308:	8b e1       	ldi	r24, 0x1B	; 27
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	33 d0       	rcall	.+102    	; 0x374 <Button_GetState>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	c9 f4       	brne	.+50     	; 0x344 <execute_timeClock+0x4a>
		{
			clockState = MODIFY;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
			backupHour = hour;
 318:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <hour>
 31c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <backupHour>
			backupMin = min;
 320:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <min>
 324:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <backupMin>
			backupSec = sec;
 328:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sec>
 32c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <backupSec>
 330:	09 c0       	rjmp	.+18     	; 0x344 <execute_timeClock+0x4a>
		}
		break;
		
		case MODIFY:
		if (Button_GetState(&changeStateBtn) == ACT_RELEASED)
 332:	8b e1       	ldi	r24, 0x1B	; 27
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	1e d0       	rcall	.+60     	; 0x374 <Button_GetState>
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	21 f4       	brne	.+8      	; 0x344 <execute_timeClock+0x4a>
		{
			clockState = CLOCK;
 33c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
			LCD_writeCmdData(LCD_DISPLAY_CLEAR);
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 d0       	rcall	.+256    	; 0x444 <LCD_writeCmdData>
		}
		break;
	}
	
	switch(clockState)
 344:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 348:	88 23       	and	r24, r24
 34a:	19 f0       	breq	.+6      	; 0x352 <execute_timeClock+0x58>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	19 f0       	breq	.+6      	; 0x356 <execute_timeClock+0x5c>
	{
		case CLOCK:
		displayClock();
 350:	08 95       	ret
 352:	2c cf       	rjmp	.-424    	; 0x1ac <displayClock>
		break;
 354:	08 95       	ret
		
		case MODIFY:
		modifyMode();
 356:	60 cf       	rjmp	.-320    	; 0x218 <modifyMode>
 358:	08 95       	ret

0000035a <Button_init>:
ï»¿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 35a:	fc 01       	movw	r30, r24
 35c:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;		// í¬ë³ì¼ëë -> ì¬ì©
 35e:	71 83       	std	Z+1, r23	; 0x01
 360:	60 83       	st	Z, r22
	btn ->PIN = pin;
 362:	53 83       	std	Z+3, r21	; 0x03
 364:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 366:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 368:	31 e0       	ldi	r19, 0x01	; 1
 36a:	35 83       	std	Z+5, r19	; 0x05
	//*btn ->DDR &= (1 << btn -> pinNum);
	GPIO_initPin(btn->DDR, INPUT, btn->pinNum);
 36c:	42 2f       	mov	r20, r18
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	f4 c0       	rjmp	.+488    	; 0x55a <GPIO_initPin>
 372:	08 95       	ret

00000374 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn ì£¼ì ì í¨ë²ì button_t
{
 374:	fc 01       	movw	r30, r24
	uint8_t curState = *btn->PIN & (1 << btn->pinNum);
 376:	a2 81       	ldd	r26, Z+2	; 0x02
 378:	b3 81       	ldd	r27, Z+3	; 0x03
 37a:	8c 91       	ld	r24, X
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	04 80       	ldd	r0, Z+4	; 0x04
 382:	02 c0       	rjmp	.+4      	; 0x388 <Button_GetState+0x14>
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <Button_GetState+0x10>
 38c:	28 23       	and	r18, r24
	//uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum);
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 38e:	59 f4       	brne	.+22     	; 0x3a6 <Button_GetState+0x32>
 390:	85 81       	ldd	r24, Z+5	; 0x05
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	41 f4       	brne	.+16     	; 0x3a6 <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 396:	af e3       	ldi	r26, 0x3F	; 63
 398:	bc e9       	ldi	r27, 0x9C	; 156
 39a:	11 97       	sbiw	r26, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <Button_GetState+0x26>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <Button_GetState+0x2c>
 3a0:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 3a2:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 3a4:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 3a6:	22 23       	and	r18, r18
 3a8:	69 f0       	breq	.+26     	; 0x3c4 <Button_GetState+0x50>
 3aa:	85 81       	ldd	r24, Z+5	; 0x05
 3ac:	81 11       	cpse	r24, r1
 3ae:	0c c0       	rjmp	.+24     	; 0x3c8 <Button_GetState+0x54>
 3b0:	8f e3       	ldi	r24, 0x3F	; 63
 3b2:	9c e9       	ldi	r25, 0x9C	; 156
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <Button_GetState+0x40>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <Button_GetState+0x46>
 3ba:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;	
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	08 95       	ret
	}
	return ACT_NONE;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret
 3c8:	80 e0       	ldi	r24, 0x00	; 0
}
 3ca:	08 95       	ret

000003cc <GPIO_writeControlData>:
ï»¿#include "LCD.h"

void GPIO_writeControlData(uint8_t data)
{
	LCD_CONTROL_PORT = data;
 3cc:	88 bb       	out	0x18, r24	; 24
 3ce:	08 95       	ret

000003d0 <GPIO_writeData>:
}

void GPIO_writeData(uint8_t data)
{
	LCD_DATA_PORT = data;
 3d0:	85 bb       	out	0x15, r24	; 21
 3d2:	08 95       	ret

000003d4 <GPIO_init>:
}

void GPIO_init()
{
	LCD_CONTROL_DDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_E);
 3d4:	87 b3       	in	r24, 0x17	; 23
 3d6:	80 6e       	ori	r24, 0xE0	; 224
 3d8:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_DDR |= 0xff;
 3da:	84 b3       	in	r24, 0x14	; 20
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	84 bb       	out	0x14, r24	; 20
 3e0:	08 95       	ret

000003e2 <LCD_cmdMode>:
}

void LCD_cmdMode()
{
	//RS -> low
	lcdControlData &= ~(1 << LCD_RS);
 3e2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <lcdControlData>
 3e6:	8f 7d       	andi	r24, 0xDF	; 223
 3e8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 3ec:	ef cf       	rjmp	.-34     	; 0x3cc <GPIO_writeControlData>
 3ee:	08 95       	ret

000003f0 <LCD_charMode>:
}
void LCD_charMode()
{
	//RS -> high
	lcdControlData |= (1 << LCD_RS);
 3f0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <lcdControlData>
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 3fa:	e8 cf       	rjmp	.-48     	; 0x3cc <GPIO_writeControlData>
 3fc:	08 95       	ret

000003fe <LCD_writeMode>:
}

void LCD_writeMode()
{
	//RW -> low
	lcdControlData &= ~(1 << LCD_RW);
 3fe:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <lcdControlData>
 402:	8f 7b       	andi	r24, 0xBF	; 191
 404:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 408:	e1 cf       	rjmp	.-62     	; 0x3cc <GPIO_writeControlData>
 40a:	08 95       	ret

0000040c <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	lcdControlData |= (1 << LCD_E);
 40c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <lcdControlData>
 410:	80 68       	ori	r24, 0x80	; 128
 412:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 416:	da df       	rcall	.-76     	; 0x3cc <GPIO_writeControlData>
 418:	8f e9       	ldi	r24, 0x9F	; 159
 41a:	9f e0       	ldi	r25, 0x0F	; 15
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <LCD_enableHigh+0x10>
 420:	00 c0       	rjmp	.+0      	; 0x422 <LCD_enableHigh+0x16>
 422:	00 00       	nop
 424:	08 95       	ret

00000426 <LCD_enableLow>:
	_delay_ms(1);
}

void LCD_enableLow()
{
	lcdControlData &= ~(1 << LCD_E);
 426:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <lcdControlData>
 42a:	8f 77       	andi	r24, 0x7F	; 127
 42c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 430:	cd df       	rcall	.-102    	; 0x3cc <GPIO_writeControlData>
 432:	8f e9       	ldi	r24, 0x9F	; 159
 434:	9f e0       	ldi	r25, 0x0F	; 15
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCD_enableLow+0x10>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_enableLow+0x16>
 43c:	00 00       	nop
 43e:	08 95       	ret

00000440 <LCD_writeByte>:
	_delay_ms(1);
}

void LCD_writeByte(uint8_t data)
{
	GPIO_writeData(data);
 440:	c7 cf       	rjmp	.-114    	; 0x3d0 <GPIO_writeData>
 442:	08 95       	ret

00000444 <LCD_writeCmdData>:
}

void LCD_writeCmdData(uint8_t data)
{
 444:	cf 93       	push	r28
 446:	c8 2f       	mov	r28, r24
	//lcd ë´ë¶ ëªë ¹ì´ ëìì ëí í¨ì
	LCD_cmdMode();
 448:	cc df       	rcall	.-104    	; 0x3e2 <LCD_cmdMode>
	LCD_writeMode();
 44a:	d9 df       	rcall	.-78     	; 0x3fe <LCD_writeMode>
	LCD_enableHigh();
 44c:	df df       	rcall	.-66     	; 0x40c <LCD_enableHigh>
	LCD_writeByte(data);
 44e:	8c 2f       	mov	r24, r28
 450:	f7 df       	rcall	.-18     	; 0x440 <LCD_writeByte>
 452:	e9 df       	rcall	.-46     	; 0x426 <LCD_enableLow>
	LCD_enableLow();
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <LCD_init>:
}
 458:	bd df       	rcall	.-134    	; 0x3d4 <GPIO_init>
 45a:	8f e5       	ldi	r24, 0x5F	; 95
 45c:	9a ee       	ldi	r25, 0xEA	; 234
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_init+0x6>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_init+0xc>
 464:	00 00       	nop
{
	GPIO_init();
	
	_delay_ms(15);
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(0x38);
 466:	88 e3       	ldi	r24, 0x38	; 56
 468:	ed df       	rcall	.-38     	; 0x444 <LCD_writeCmdData>
 46a:	8f e1       	ldi	r24, 0x1F	; 31
 46c:	9e e4       	ldi	r25, 0x4E	; 78
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_init+0x16>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_init+0x1c>
	_delay_ms(5);
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(0x38);
 474:	00 00       	nop
 476:	88 e3       	ldi	r24, 0x38	; 56
 478:	e5 df       	rcall	.-54     	; 0x444 <LCD_writeCmdData>
 47a:	8f e9       	ldi	r24, 0x9F	; 159
 47c:	9f e0       	ldi	r25, 0x0F	; 15
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_init+0x26>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_init+0x2c>
	_delay_ms(1);
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(0x38);
 484:	00 00       	nop
 486:	88 e3       	ldi	r24, 0x38	; 56
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(0x38);
 488:	dd df       	rcall	.-70     	; 0x444 <LCD_writeCmdData>
 48a:	88 e3       	ldi	r24, 0x38	; 56
	//LCD_DISPLAY_OFF
	LCD_writeCmdData(0x08);
 48c:	db df       	rcall	.-74     	; 0x444 <LCD_writeCmdData>
 48e:	88 e0       	ldi	r24, 0x08	; 8
	//LCD_DISPLAY_CLEAR
	LCD_writeCmdData(0x01);
 490:	d9 df       	rcall	.-78     	; 0x444 <LCD_writeCmdData>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	d7 df       	rcall	.-82     	; 0x444 <LCD_writeCmdData>
	//ENTRY_MODE_SET
	LCD_writeCmdData(0x06);
 496:	86 e0       	ldi	r24, 0x06	; 6
 498:	d5 df       	rcall	.-86     	; 0x444 <LCD_writeCmdData>
 49a:	8c e0       	ldi	r24, 0x0C	; 12
	
	//LCD_DISPLAY_ON
	LCD_writeCmdData(0x0C);
 49c:	d3 cf       	rjmp	.-90     	; 0x444 <LCD_writeCmdData>
 49e:	08 95       	ret

000004a0 <LCD_writeCharData>:
 4a0:	cf 93       	push	r28
 4a2:	c8 2f       	mov	r28, r24
}

void LCD_writeCharData(uint8_t data)
{
	//lcd char ì°ë ëì
	LCD_charMode();
 4a4:	a5 df       	rcall	.-182    	; 0x3f0 <LCD_charMode>
	LCD_writeMode();
 4a6:	ab df       	rcall	.-170    	; 0x3fe <LCD_writeMode>
	LCD_enableHigh();
 4a8:	b1 df       	rcall	.-158    	; 0x40c <LCD_enableHigh>
	LCD_writeByte(data);
 4aa:	8c 2f       	mov	r24, r28
 4ac:	c9 df       	rcall	.-110    	; 0x440 <LCD_writeByte>
 4ae:	bb df       	rcall	.-138    	; 0x426 <LCD_enableLow>
	LCD_enableLow();
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <LCD_writeString>:
}
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17

void LCD_writeString(const char *str)
{
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++)
 4be:	c0 e0       	ldi	r28, 0x00	; 0
 4c0:	d0 e0       	ldi	r29, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <LCD_writeString+0x14>
	LCD_writeCharData(str[i]);
 4c4:	ed df       	rcall	.-38     	; 0x4a0 <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(const char *str)
{
	for (int i = 0; str[i]; i++)
 4c6:	21 96       	adiw	r28, 0x01	; 1
 4c8:	f8 01       	movw	r30, r16
 4ca:	ec 0f       	add	r30, r28
 4cc:	fd 1f       	adc	r31, r29
 4ce:	80 81       	ld	r24, Z
 4d0:	81 11       	cpse	r24, r1
 4d2:	f8 cf       	rjmp	.-16     	; 0x4c4 <LCD_writeString+0x10>
	LCD_writeCharData(str[i]);
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

000004de <LCD_goToXY>:

void LCD_goToXY(uint8_t row, uint8_t col)
{
	col %= 16, row %= 2;
 4de:	6f 70       	andi	r22, 0x0F	; 15
 4e0:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdRegisterAddress = (0x40 * row) + col;
 4e2:	90 e4       	ldi	r25, 0x40	; 64
 4e4:	89 9f       	mul	r24, r25
 4e6:	60 0d       	add	r22, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdRegisterAddress;
	LCD_writeCmdData(command);
 4ec:	80 58       	subi	r24, 0x80	; 128
 4ee:	aa cf       	rjmp	.-172    	; 0x444 <LCD_writeCmdData>
 4f0:	08 95       	ret

000004f2 <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, const char *str)
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ea 01       	movw	r28, r20
	LCD_goToXY(row, col);
 4f8:	f2 df       	rcall	.-28     	; 0x4de <LCD_goToXY>
	LCD_writeString(str);
 4fa:	ce 01       	movw	r24, r28
 4fc:	db df       	rcall	.-74     	; 0x4b4 <LCD_writeString>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <__vector_9>:
#include "ap/lcdTimeClock/lcdTimeClock.h"

ISR(TIMER2_COMP_vect)
{
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	0b b6       	in	r0, 0x3b	; 59
 510:	0f 92       	push	r0
 512:	2f 93       	push	r18
 514:	3f 93       	push	r19
 516:	4f 93       	push	r20
 518:	5f 93       	push	r21
 51a:	6f 93       	push	r22
 51c:	7f 93       	push	r23
 51e:	8f 93       	push	r24
 520:	9f 93       	push	r25
 522:	af 93       	push	r26
 524:	bf 93       	push	r27
 526:	ef 93       	push	r30
 528:	ff 93       	push	r31
	//FND_ISR_Process();
	incMilisec();
 52a:	ce dd       	rcall	.-1124   	; 0xc8 <incMilisec>
}
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	0f 90       	pop	r0
 546:	0b be       	out	0x3b, r0	; 59
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <main>:

int main(void)
{
    init_timeClock();
 552:	f9 dd       	rcall	.-1038   	; 0x146 <init_timeClock>
	sei();
    while (1) 
    {
		execute_timeClock();
 554:	78 94       	sei
 556:	d1 de       	rcall	.-606    	; 0x2fa <execute_timeClock>
 558:	fe cf       	rjmp	.-4      	; 0x556 <main+0x4>

0000055a <GPIO_initPin>:
	*DDR = 0x00;
}

//init - pin (1EA)
void GPIO_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum)
{
 55a:	fc 01       	movw	r30, r24
	if (dir == OUTPUT)
 55c:	61 30       	cpi	r22, 0x01	; 1
 55e:	59 f4       	brne	.+22     	; 0x576 <GPIO_initPin+0x1c>
	*DDR |= (1 << pinNum); //no ~?
 560:	20 81       	ld	r18, Z
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <GPIO_initPin+0x12>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	4a 95       	dec	r20
 56e:	e2 f7       	brpl	.-8      	; 0x568 <GPIO_initPin+0xe>
 570:	82 2b       	or	r24, r18
 572:	80 83       	st	Z, r24
 574:	08 95       	ret
	else
	*DDR &= ~(1 << pinNum);
 576:	90 81       	ld	r25, Z
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <GPIO_initPin+0x28>
 57e:	22 0f       	add	r18, r18
 580:	33 1f       	adc	r19, r19
 582:	4a 95       	dec	r20
 584:	e2 f7       	brpl	.-8      	; 0x57e <GPIO_initPin+0x24>
 586:	20 95       	com	r18
 588:	29 23       	and	r18, r25
 58a:	20 83       	st	Z, r18
 58c:	08 95       	ret

0000058e <initTIM2>:
}

void initTIM2()
{
	//prescaler 1/64ë¡ ì¤ì  > cs22, cs21, cs20 0 1 1ë¡ ì¤ì í´ì¼ í¨
	TCCR2 |= (0 << CS22) | (1 << CS21) | (1 << CS20);
 58e:	85 b5       	in	r24, 0x25	; 37
 590:	83 60       	ori	r24, 0x03	; 3
 592:	85 bd       	out	0x25, r24	; 37
	
	//CTC mode ì¤ì 
	TCCR2 |= (1 << WGM21) | (0 << WGM20);
 594:	85 b5       	in	r24, 0x25	; 37
 596:	88 60       	ori	r24, 0x08	; 8
 598:	85 bd       	out	0x25, r24	; 37
	
	//TIMSK timer compare bit on
	TIMSK |= (1 << OCIE2);
 59a:	87 b7       	in	r24, 0x37	; 55
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	87 bf       	out	0x37, r24	; 55
	
	//ë¹êµí  ì«ì ì¤ì 
	OCR2 = 250 - 1;
 5a0:	89 ef       	ldi	r24, 0xF9	; 249
 5a2:	83 bd       	out	0x23, r24	; 35
 5a4:	08 95       	ret

000005a6 <__divmodhi4>:
 5a6:	97 fb       	bst	r25, 7
 5a8:	07 2e       	mov	r0, r23
 5aa:	16 f4       	brtc	.+4      	; 0x5b0 <__divmodhi4+0xa>
 5ac:	00 94       	com	r0
 5ae:	06 d0       	rcall	.+12     	; 0x5bc <__divmodhi4_neg1>
 5b0:	77 fd       	sbrc	r23, 7
 5b2:	08 d0       	rcall	.+16     	; 0x5c4 <__divmodhi4_neg2>
 5b4:	2d d0       	rcall	.+90     	; 0x610 <__udivmodhi4>
 5b6:	07 fc       	sbrc	r0, 7
 5b8:	05 d0       	rcall	.+10     	; 0x5c4 <__divmodhi4_neg2>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__divmodhi4_exit>

000005bc <__divmodhi4_neg1>:
 5bc:	90 95       	com	r25
 5be:	81 95       	neg	r24
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__divmodhi4_neg2>:
 5c4:	70 95       	com	r23
 5c6:	61 95       	neg	r22
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ca <__divmodhi4_exit>:
 5ca:	08 95       	ret

000005cc <__udivmodsi4>:
 5cc:	a1 e2       	ldi	r26, 0x21	; 33
 5ce:	1a 2e       	mov	r1, r26
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	fd 01       	movw	r30, r26
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__udivmodsi4_ep>

000005d8 <__udivmodsi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	ee 1f       	adc	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	a2 17       	cp	r26, r18
 5e2:	b3 07       	cpc	r27, r19
 5e4:	e4 07       	cpc	r30, r20
 5e6:	f5 07       	cpc	r31, r21
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__udivmodsi4_ep>
 5ea:	a2 1b       	sub	r26, r18
 5ec:	b3 0b       	sbc	r27, r19
 5ee:	e4 0b       	sbc	r30, r20
 5f0:	f5 0b       	sbc	r31, r21

000005f2 <__udivmodsi4_ep>:
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	1a 94       	dec	r1
 5fc:	69 f7       	brne	.-38     	; 0x5d8 <__udivmodsi4_loop>
 5fe:	60 95       	com	r22
 600:	70 95       	com	r23
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	9b 01       	movw	r18, r22
 608:	ac 01       	movw	r20, r24
 60a:	bd 01       	movw	r22, r26
 60c:	cf 01       	movw	r24, r30
 60e:	08 95       	ret

00000610 <__udivmodhi4>:
 610:	aa 1b       	sub	r26, r26
 612:	bb 1b       	sub	r27, r27
 614:	51 e1       	ldi	r21, 0x11	; 17
 616:	07 c0       	rjmp	.+14     	; 0x626 <__udivmodhi4_ep>

00000618 <__udivmodhi4_loop>:
 618:	aa 1f       	adc	r26, r26
 61a:	bb 1f       	adc	r27, r27
 61c:	a6 17       	cp	r26, r22
 61e:	b7 07       	cpc	r27, r23
 620:	10 f0       	brcs	.+4      	; 0x626 <__udivmodhi4_ep>
 622:	a6 1b       	sub	r26, r22
 624:	b7 0b       	sbc	r27, r23

00000626 <__udivmodhi4_ep>:
 626:	88 1f       	adc	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	5a 95       	dec	r21
 62c:	a9 f7       	brne	.-22     	; 0x618 <__udivmodhi4_loop>
 62e:	80 95       	com	r24
 630:	90 95       	com	r25
 632:	bc 01       	movw	r22, r24
 634:	cd 01       	movw	r24, r26
 636:	08 95       	ret

00000638 <sprintf>:
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	2e 97       	sbiw	r28, 0x0e	; 14
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	0d 89       	ldd	r16, Y+21	; 0x15
 652:	1e 89       	ldd	r17, Y+22	; 0x16
 654:	86 e0       	ldi	r24, 0x06	; 6
 656:	8c 83       	std	Y+4, r24	; 0x04
 658:	1a 83       	std	Y+2, r17	; 0x02
 65a:	09 83       	std	Y+1, r16	; 0x01
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	9f e7       	ldi	r25, 0x7F	; 127
 660:	9e 83       	std	Y+6, r25	; 0x06
 662:	8d 83       	std	Y+5, r24	; 0x05
 664:	ae 01       	movw	r20, r28
 666:	47 5e       	subi	r20, 0xE7	; 231
 668:	5f 4f       	sbci	r21, 0xFF	; 255
 66a:	6f 89       	ldd	r22, Y+23	; 0x17
 66c:	78 8d       	ldd	r23, Y+24	; 0x18
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	10 d0       	rcall	.+32     	; 0x694 <vfprintf>
 674:	ef 81       	ldd	r30, Y+7	; 0x07
 676:	f8 85       	ldd	r31, Y+8	; 0x08
 678:	e0 0f       	add	r30, r16
 67a:	f1 1f       	adc	r31, r17
 67c:	10 82       	st	Z, r1
 67e:	2e 96       	adiw	r28, 0x0e	; 14
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	f8 94       	cli
 684:	de bf       	out	0x3e, r29	; 62
 686:	0f be       	out	0x3f, r0	; 63
 688:	cd bf       	out	0x3d, r28	; 61
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <vfprintf>:
 694:	2f 92       	push	r2
 696:	3f 92       	push	r3
 698:	4f 92       	push	r4
 69a:	5f 92       	push	r5
 69c:	6f 92       	push	r6
 69e:	7f 92       	push	r7
 6a0:	8f 92       	push	r8
 6a2:	9f 92       	push	r9
 6a4:	af 92       	push	r10
 6a6:	bf 92       	push	r11
 6a8:	cf 92       	push	r12
 6aa:	df 92       	push	r13
 6ac:	ef 92       	push	r14
 6ae:	ff 92       	push	r15
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
 6bc:	2b 97       	sbiw	r28, 0x0b	; 11
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	cd bf       	out	0x3d, r28	; 61
 6c8:	6c 01       	movw	r12, r24
 6ca:	7b 01       	movw	r14, r22
 6cc:	8a 01       	movw	r16, r20
 6ce:	fc 01       	movw	r30, r24
 6d0:	17 82       	std	Z+7, r1	; 0x07
 6d2:	16 82       	std	Z+6, r1	; 0x06
 6d4:	83 81       	ldd	r24, Z+3	; 0x03
 6d6:	81 ff       	sbrs	r24, 1
 6d8:	bf c1       	rjmp	.+894    	; 0xa58 <vfprintf+0x3c4>
 6da:	ce 01       	movw	r24, r28
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	3c 01       	movw	r6, r24
 6e0:	f6 01       	movw	r30, r12
 6e2:	93 81       	ldd	r25, Z+3	; 0x03
 6e4:	f7 01       	movw	r30, r14
 6e6:	93 fd       	sbrc	r25, 3
 6e8:	85 91       	lpm	r24, Z+
 6ea:	93 ff       	sbrs	r25, 3
 6ec:	81 91       	ld	r24, Z+
 6ee:	7f 01       	movw	r14, r30
 6f0:	88 23       	and	r24, r24
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <vfprintf+0x62>
 6f4:	ad c1       	rjmp	.+858    	; 0xa50 <vfprintf+0x3bc>
 6f6:	85 32       	cpi	r24, 0x25	; 37
 6f8:	39 f4       	brne	.+14     	; 0x708 <vfprintf+0x74>
 6fa:	93 fd       	sbrc	r25, 3
 6fc:	85 91       	lpm	r24, Z+
 6fe:	93 ff       	sbrs	r25, 3
 700:	81 91       	ld	r24, Z+
 702:	7f 01       	movw	r14, r30
 704:	85 32       	cpi	r24, 0x25	; 37
 706:	21 f4       	brne	.+8      	; 0x710 <vfprintf+0x7c>
 708:	b6 01       	movw	r22, r12
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	d6 d1       	rcall	.+940    	; 0xaba <fputc>
 70e:	e8 cf       	rjmp	.-48     	; 0x6e0 <vfprintf+0x4c>
 710:	91 2c       	mov	r9, r1
 712:	21 2c       	mov	r2, r1
 714:	31 2c       	mov	r3, r1
 716:	ff e1       	ldi	r31, 0x1F	; 31
 718:	f3 15       	cp	r31, r3
 71a:	d8 f0       	brcs	.+54     	; 0x752 <vfprintf+0xbe>
 71c:	8b 32       	cpi	r24, 0x2B	; 43
 71e:	79 f0       	breq	.+30     	; 0x73e <vfprintf+0xaa>
 720:	38 f4       	brcc	.+14     	; 0x730 <vfprintf+0x9c>
 722:	80 32       	cpi	r24, 0x20	; 32
 724:	79 f0       	breq	.+30     	; 0x744 <vfprintf+0xb0>
 726:	83 32       	cpi	r24, 0x23	; 35
 728:	a1 f4       	brne	.+40     	; 0x752 <vfprintf+0xbe>
 72a:	23 2d       	mov	r18, r3
 72c:	20 61       	ori	r18, 0x10	; 16
 72e:	1d c0       	rjmp	.+58     	; 0x76a <vfprintf+0xd6>
 730:	8d 32       	cpi	r24, 0x2D	; 45
 732:	61 f0       	breq	.+24     	; 0x74c <vfprintf+0xb8>
 734:	80 33       	cpi	r24, 0x30	; 48
 736:	69 f4       	brne	.+26     	; 0x752 <vfprintf+0xbe>
 738:	23 2d       	mov	r18, r3
 73a:	21 60       	ori	r18, 0x01	; 1
 73c:	16 c0       	rjmp	.+44     	; 0x76a <vfprintf+0xd6>
 73e:	83 2d       	mov	r24, r3
 740:	82 60       	ori	r24, 0x02	; 2
 742:	38 2e       	mov	r3, r24
 744:	e3 2d       	mov	r30, r3
 746:	e4 60       	ori	r30, 0x04	; 4
 748:	3e 2e       	mov	r3, r30
 74a:	2a c0       	rjmp	.+84     	; 0x7a0 <vfprintf+0x10c>
 74c:	f3 2d       	mov	r31, r3
 74e:	f8 60       	ori	r31, 0x08	; 8
 750:	1d c0       	rjmp	.+58     	; 0x78c <vfprintf+0xf8>
 752:	37 fc       	sbrc	r3, 7
 754:	2d c0       	rjmp	.+90     	; 0x7b0 <vfprintf+0x11c>
 756:	20 ed       	ldi	r18, 0xD0	; 208
 758:	28 0f       	add	r18, r24
 75a:	2a 30       	cpi	r18, 0x0A	; 10
 75c:	40 f0       	brcs	.+16     	; 0x76e <vfprintf+0xda>
 75e:	8e 32       	cpi	r24, 0x2E	; 46
 760:	b9 f4       	brne	.+46     	; 0x790 <vfprintf+0xfc>
 762:	36 fc       	sbrc	r3, 6
 764:	75 c1       	rjmp	.+746    	; 0xa50 <vfprintf+0x3bc>
 766:	23 2d       	mov	r18, r3
 768:	20 64       	ori	r18, 0x40	; 64
 76a:	32 2e       	mov	r3, r18
 76c:	19 c0       	rjmp	.+50     	; 0x7a0 <vfprintf+0x10c>
 76e:	36 fe       	sbrs	r3, 6
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0xea>
 772:	8a e0       	ldi	r24, 0x0A	; 10
 774:	98 9e       	mul	r9, r24
 776:	20 0d       	add	r18, r0
 778:	11 24       	eor	r1, r1
 77a:	92 2e       	mov	r9, r18
 77c:	11 c0       	rjmp	.+34     	; 0x7a0 <vfprintf+0x10c>
 77e:	ea e0       	ldi	r30, 0x0A	; 10
 780:	2e 9e       	mul	r2, r30
 782:	20 0d       	add	r18, r0
 784:	11 24       	eor	r1, r1
 786:	22 2e       	mov	r2, r18
 788:	f3 2d       	mov	r31, r3
 78a:	f0 62       	ori	r31, 0x20	; 32
 78c:	3f 2e       	mov	r3, r31
 78e:	08 c0       	rjmp	.+16     	; 0x7a0 <vfprintf+0x10c>
 790:	8c 36       	cpi	r24, 0x6C	; 108
 792:	21 f4       	brne	.+8      	; 0x79c <vfprintf+0x108>
 794:	83 2d       	mov	r24, r3
 796:	80 68       	ori	r24, 0x80	; 128
 798:	38 2e       	mov	r3, r24
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x10c>
 79c:	88 36       	cpi	r24, 0x68	; 104
 79e:	41 f4       	brne	.+16     	; 0x7b0 <vfprintf+0x11c>
 7a0:	f7 01       	movw	r30, r14
 7a2:	93 fd       	sbrc	r25, 3
 7a4:	85 91       	lpm	r24, Z+
 7a6:	93 ff       	sbrs	r25, 3
 7a8:	81 91       	ld	r24, Z+
 7aa:	7f 01       	movw	r14, r30
 7ac:	81 11       	cpse	r24, r1
 7ae:	b3 cf       	rjmp	.-154    	; 0x716 <vfprintf+0x82>
 7b0:	98 2f       	mov	r25, r24
 7b2:	9f 7d       	andi	r25, 0xDF	; 223
 7b4:	95 54       	subi	r25, 0x45	; 69
 7b6:	93 30       	cpi	r25, 0x03	; 3
 7b8:	28 f4       	brcc	.+10     	; 0x7c4 <vfprintf+0x130>
 7ba:	0c 5f       	subi	r16, 0xFC	; 252
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	9f e3       	ldi	r25, 0x3F	; 63
 7c0:	99 83       	std	Y+1, r25	; 0x01
 7c2:	0d c0       	rjmp	.+26     	; 0x7de <vfprintf+0x14a>
 7c4:	83 36       	cpi	r24, 0x63	; 99
 7c6:	31 f0       	breq	.+12     	; 0x7d4 <vfprintf+0x140>
 7c8:	83 37       	cpi	r24, 0x73	; 115
 7ca:	71 f0       	breq	.+28     	; 0x7e8 <vfprintf+0x154>
 7cc:	83 35       	cpi	r24, 0x53	; 83
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <vfprintf+0x13e>
 7d0:	55 c0       	rjmp	.+170    	; 0x87c <vfprintf+0x1e8>
 7d2:	20 c0       	rjmp	.+64     	; 0x814 <vfprintf+0x180>
 7d4:	f8 01       	movw	r30, r16
 7d6:	80 81       	ld	r24, Z
 7d8:	89 83       	std	Y+1, r24	; 0x01
 7da:	0e 5f       	subi	r16, 0xFE	; 254
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	88 24       	eor	r8, r8
 7e0:	83 94       	inc	r8
 7e2:	91 2c       	mov	r9, r1
 7e4:	53 01       	movw	r10, r6
 7e6:	12 c0       	rjmp	.+36     	; 0x80c <vfprintf+0x178>
 7e8:	28 01       	movw	r4, r16
 7ea:	f2 e0       	ldi	r31, 0x02	; 2
 7ec:	4f 0e       	add	r4, r31
 7ee:	51 1c       	adc	r5, r1
 7f0:	f8 01       	movw	r30, r16
 7f2:	a0 80       	ld	r10, Z
 7f4:	b1 80       	ldd	r11, Z+1	; 0x01
 7f6:	36 fe       	sbrs	r3, 6
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <vfprintf+0x16c>
 7fa:	69 2d       	mov	r22, r9
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <vfprintf+0x170>
 800:	6f ef       	ldi	r22, 0xFF	; 255
 802:	7f ef       	ldi	r23, 0xFF	; 255
 804:	c5 01       	movw	r24, r10
 806:	4e d1       	rcall	.+668    	; 0xaa4 <strnlen>
 808:	4c 01       	movw	r8, r24
 80a:	82 01       	movw	r16, r4
 80c:	f3 2d       	mov	r31, r3
 80e:	ff 77       	andi	r31, 0x7F	; 127
 810:	3f 2e       	mov	r3, r31
 812:	15 c0       	rjmp	.+42     	; 0x83e <vfprintf+0x1aa>
 814:	28 01       	movw	r4, r16
 816:	22 e0       	ldi	r18, 0x02	; 2
 818:	42 0e       	add	r4, r18
 81a:	51 1c       	adc	r5, r1
 81c:	f8 01       	movw	r30, r16
 81e:	a0 80       	ld	r10, Z
 820:	b1 80       	ldd	r11, Z+1	; 0x01
 822:	36 fe       	sbrs	r3, 6
 824:	03 c0       	rjmp	.+6      	; 0x82c <vfprintf+0x198>
 826:	69 2d       	mov	r22, r9
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <vfprintf+0x19c>
 82c:	6f ef       	ldi	r22, 0xFF	; 255
 82e:	7f ef       	ldi	r23, 0xFF	; 255
 830:	c5 01       	movw	r24, r10
 832:	2d d1       	rcall	.+602    	; 0xa8e <strnlen_P>
 834:	4c 01       	movw	r8, r24
 836:	f3 2d       	mov	r31, r3
 838:	f0 68       	ori	r31, 0x80	; 128
 83a:	3f 2e       	mov	r3, r31
 83c:	82 01       	movw	r16, r4
 83e:	33 fc       	sbrc	r3, 3
 840:	19 c0       	rjmp	.+50     	; 0x874 <vfprintf+0x1e0>
 842:	82 2d       	mov	r24, r2
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	88 16       	cp	r8, r24
 848:	99 06       	cpc	r9, r25
 84a:	a0 f4       	brcc	.+40     	; 0x874 <vfprintf+0x1e0>
 84c:	b6 01       	movw	r22, r12
 84e:	80 e2       	ldi	r24, 0x20	; 32
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	33 d1       	rcall	.+614    	; 0xaba <fputc>
 854:	2a 94       	dec	r2
 856:	f5 cf       	rjmp	.-22     	; 0x842 <vfprintf+0x1ae>
 858:	f5 01       	movw	r30, r10
 85a:	37 fc       	sbrc	r3, 7
 85c:	85 91       	lpm	r24, Z+
 85e:	37 fe       	sbrs	r3, 7
 860:	81 91       	ld	r24, Z+
 862:	5f 01       	movw	r10, r30
 864:	b6 01       	movw	r22, r12
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	28 d1       	rcall	.+592    	; 0xaba <fputc>
 86a:	21 10       	cpse	r2, r1
 86c:	2a 94       	dec	r2
 86e:	21 e0       	ldi	r18, 0x01	; 1
 870:	82 1a       	sub	r8, r18
 872:	91 08       	sbc	r9, r1
 874:	81 14       	cp	r8, r1
 876:	91 04       	cpc	r9, r1
 878:	79 f7       	brne	.-34     	; 0x858 <vfprintf+0x1c4>
 87a:	e1 c0       	rjmp	.+450    	; 0xa3e <vfprintf+0x3aa>
 87c:	84 36       	cpi	r24, 0x64	; 100
 87e:	11 f0       	breq	.+4      	; 0x884 <vfprintf+0x1f0>
 880:	89 36       	cpi	r24, 0x69	; 105
 882:	39 f5       	brne	.+78     	; 0x8d2 <vfprintf+0x23e>
 884:	f8 01       	movw	r30, r16
 886:	37 fe       	sbrs	r3, 7
 888:	07 c0       	rjmp	.+14     	; 0x898 <vfprintf+0x204>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	82 81       	ldd	r24, Z+2	; 0x02
 890:	93 81       	ldd	r25, Z+3	; 0x03
 892:	0c 5f       	subi	r16, 0xFC	; 252
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <vfprintf+0x214>
 898:	60 81       	ld	r22, Z
 89a:	71 81       	ldd	r23, Z+1	; 0x01
 89c:	07 2e       	mov	r0, r23
 89e:	00 0c       	add	r0, r0
 8a0:	88 0b       	sbc	r24, r24
 8a2:	99 0b       	sbc	r25, r25
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	f3 2d       	mov	r31, r3
 8aa:	ff 76       	andi	r31, 0x6F	; 111
 8ac:	3f 2e       	mov	r3, r31
 8ae:	97 ff       	sbrs	r25, 7
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <vfprintf+0x230>
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	f0 68       	ori	r31, 0x80	; 128
 8c2:	3f 2e       	mov	r3, r31
 8c4:	2a e0       	ldi	r18, 0x0A	; 10
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	a3 01       	movw	r20, r6
 8ca:	33 d1       	rcall	.+614    	; 0xb32 <__ultoa_invert>
 8cc:	88 2e       	mov	r8, r24
 8ce:	86 18       	sub	r8, r6
 8d0:	44 c0       	rjmp	.+136    	; 0x95a <vfprintf+0x2c6>
 8d2:	85 37       	cpi	r24, 0x75	; 117
 8d4:	31 f4       	brne	.+12     	; 0x8e2 <vfprintf+0x24e>
 8d6:	23 2d       	mov	r18, r3
 8d8:	2f 7e       	andi	r18, 0xEF	; 239
 8da:	b2 2e       	mov	r11, r18
 8dc:	2a e0       	ldi	r18, 0x0A	; 10
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	25 c0       	rjmp	.+74     	; 0x92c <vfprintf+0x298>
 8e2:	93 2d       	mov	r25, r3
 8e4:	99 7f       	andi	r25, 0xF9	; 249
 8e6:	b9 2e       	mov	r11, r25
 8e8:	8f 36       	cpi	r24, 0x6F	; 111
 8ea:	c1 f0       	breq	.+48     	; 0x91c <vfprintf+0x288>
 8ec:	18 f4       	brcc	.+6      	; 0x8f4 <vfprintf+0x260>
 8ee:	88 35       	cpi	r24, 0x58	; 88
 8f0:	79 f0       	breq	.+30     	; 0x910 <vfprintf+0x27c>
 8f2:	ae c0       	rjmp	.+348    	; 0xa50 <vfprintf+0x3bc>
 8f4:	80 37       	cpi	r24, 0x70	; 112
 8f6:	19 f0       	breq	.+6      	; 0x8fe <vfprintf+0x26a>
 8f8:	88 37       	cpi	r24, 0x78	; 120
 8fa:	21 f0       	breq	.+8      	; 0x904 <vfprintf+0x270>
 8fc:	a9 c0       	rjmp	.+338    	; 0xa50 <vfprintf+0x3bc>
 8fe:	e9 2f       	mov	r30, r25
 900:	e0 61       	ori	r30, 0x10	; 16
 902:	be 2e       	mov	r11, r30
 904:	b4 fe       	sbrs	r11, 4
 906:	0d c0       	rjmp	.+26     	; 0x922 <vfprintf+0x28e>
 908:	fb 2d       	mov	r31, r11
 90a:	f4 60       	ori	r31, 0x04	; 4
 90c:	bf 2e       	mov	r11, r31
 90e:	09 c0       	rjmp	.+18     	; 0x922 <vfprintf+0x28e>
 910:	34 fe       	sbrs	r3, 4
 912:	0a c0       	rjmp	.+20     	; 0x928 <vfprintf+0x294>
 914:	29 2f       	mov	r18, r25
 916:	26 60       	ori	r18, 0x06	; 6
 918:	b2 2e       	mov	r11, r18
 91a:	06 c0       	rjmp	.+12     	; 0x928 <vfprintf+0x294>
 91c:	28 e0       	ldi	r18, 0x08	; 8
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	05 c0       	rjmp	.+10     	; 0x92c <vfprintf+0x298>
 922:	20 e1       	ldi	r18, 0x10	; 16
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <vfprintf+0x298>
 928:	20 e1       	ldi	r18, 0x10	; 16
 92a:	32 e0       	ldi	r19, 0x02	; 2
 92c:	f8 01       	movw	r30, r16
 92e:	b7 fe       	sbrs	r11, 7
 930:	07 c0       	rjmp	.+14     	; 0x940 <vfprintf+0x2ac>
 932:	60 81       	ld	r22, Z
 934:	71 81       	ldd	r23, Z+1	; 0x01
 936:	82 81       	ldd	r24, Z+2	; 0x02
 938:	93 81       	ldd	r25, Z+3	; 0x03
 93a:	0c 5f       	subi	r16, 0xFC	; 252
 93c:	1f 4f       	sbci	r17, 0xFF	; 255
 93e:	06 c0       	rjmp	.+12     	; 0x94c <vfprintf+0x2b8>
 940:	60 81       	ld	r22, Z
 942:	71 81       	ldd	r23, Z+1	; 0x01
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 5f       	subi	r16, 0xFE	; 254
 94a:	1f 4f       	sbci	r17, 0xFF	; 255
 94c:	a3 01       	movw	r20, r6
 94e:	f1 d0       	rcall	.+482    	; 0xb32 <__ultoa_invert>
 950:	88 2e       	mov	r8, r24
 952:	86 18       	sub	r8, r6
 954:	fb 2d       	mov	r31, r11
 956:	ff 77       	andi	r31, 0x7F	; 127
 958:	3f 2e       	mov	r3, r31
 95a:	36 fe       	sbrs	r3, 6
 95c:	0d c0       	rjmp	.+26     	; 0x978 <vfprintf+0x2e4>
 95e:	23 2d       	mov	r18, r3
 960:	2e 7f       	andi	r18, 0xFE	; 254
 962:	a2 2e       	mov	r10, r18
 964:	89 14       	cp	r8, r9
 966:	58 f4       	brcc	.+22     	; 0x97e <vfprintf+0x2ea>
 968:	34 fe       	sbrs	r3, 4
 96a:	0b c0       	rjmp	.+22     	; 0x982 <vfprintf+0x2ee>
 96c:	32 fc       	sbrc	r3, 2
 96e:	09 c0       	rjmp	.+18     	; 0x982 <vfprintf+0x2ee>
 970:	83 2d       	mov	r24, r3
 972:	8e 7e       	andi	r24, 0xEE	; 238
 974:	a8 2e       	mov	r10, r24
 976:	05 c0       	rjmp	.+10     	; 0x982 <vfprintf+0x2ee>
 978:	b8 2c       	mov	r11, r8
 97a:	a3 2c       	mov	r10, r3
 97c:	03 c0       	rjmp	.+6      	; 0x984 <vfprintf+0x2f0>
 97e:	b8 2c       	mov	r11, r8
 980:	01 c0       	rjmp	.+2      	; 0x984 <vfprintf+0x2f0>
 982:	b9 2c       	mov	r11, r9
 984:	a4 fe       	sbrs	r10, 4
 986:	0f c0       	rjmp	.+30     	; 0x9a6 <vfprintf+0x312>
 988:	fe 01       	movw	r30, r28
 98a:	e8 0d       	add	r30, r8
 98c:	f1 1d       	adc	r31, r1
 98e:	80 81       	ld	r24, Z
 990:	80 33       	cpi	r24, 0x30	; 48
 992:	21 f4       	brne	.+8      	; 0x99c <vfprintf+0x308>
 994:	9a 2d       	mov	r25, r10
 996:	99 7e       	andi	r25, 0xE9	; 233
 998:	a9 2e       	mov	r10, r25
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <vfprintf+0x31a>
 99c:	a2 fe       	sbrs	r10, 2
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <vfprintf+0x318>
 9a0:	b3 94       	inc	r11
 9a2:	b3 94       	inc	r11
 9a4:	04 c0       	rjmp	.+8      	; 0x9ae <vfprintf+0x31a>
 9a6:	8a 2d       	mov	r24, r10
 9a8:	86 78       	andi	r24, 0x86	; 134
 9aa:	09 f0       	breq	.+2      	; 0x9ae <vfprintf+0x31a>
 9ac:	b3 94       	inc	r11
 9ae:	a3 fc       	sbrc	r10, 3
 9b0:	10 c0       	rjmp	.+32     	; 0x9d2 <vfprintf+0x33e>
 9b2:	a0 fe       	sbrs	r10, 0
 9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <vfprintf+0x32e>
 9b6:	b2 14       	cp	r11, r2
 9b8:	80 f4       	brcc	.+32     	; 0x9da <vfprintf+0x346>
 9ba:	28 0c       	add	r2, r8
 9bc:	92 2c       	mov	r9, r2
 9be:	9b 18       	sub	r9, r11
 9c0:	0d c0       	rjmp	.+26     	; 0x9dc <vfprintf+0x348>
 9c2:	b2 14       	cp	r11, r2
 9c4:	58 f4       	brcc	.+22     	; 0x9dc <vfprintf+0x348>
 9c6:	b6 01       	movw	r22, r12
 9c8:	80 e2       	ldi	r24, 0x20	; 32
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	76 d0       	rcall	.+236    	; 0xaba <fputc>
 9ce:	b3 94       	inc	r11
 9d0:	f8 cf       	rjmp	.-16     	; 0x9c2 <vfprintf+0x32e>
 9d2:	b2 14       	cp	r11, r2
 9d4:	18 f4       	brcc	.+6      	; 0x9dc <vfprintf+0x348>
 9d6:	2b 18       	sub	r2, r11
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <vfprintf+0x34a>
 9da:	98 2c       	mov	r9, r8
 9dc:	21 2c       	mov	r2, r1
 9de:	a4 fe       	sbrs	r10, 4
 9e0:	0f c0       	rjmp	.+30     	; 0xa00 <vfprintf+0x36c>
 9e2:	b6 01       	movw	r22, r12
 9e4:	80 e3       	ldi	r24, 0x30	; 48
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	68 d0       	rcall	.+208    	; 0xaba <fputc>
 9ea:	a2 fe       	sbrs	r10, 2
 9ec:	16 c0       	rjmp	.+44     	; 0xa1a <vfprintf+0x386>
 9ee:	a1 fc       	sbrc	r10, 1
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <vfprintf+0x364>
 9f2:	88 e7       	ldi	r24, 0x78	; 120
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <vfprintf+0x368>
 9f8:	88 e5       	ldi	r24, 0x58	; 88
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	b6 01       	movw	r22, r12
 9fe:	0c c0       	rjmp	.+24     	; 0xa18 <vfprintf+0x384>
 a00:	8a 2d       	mov	r24, r10
 a02:	86 78       	andi	r24, 0x86	; 134
 a04:	51 f0       	breq	.+20     	; 0xa1a <vfprintf+0x386>
 a06:	a1 fe       	sbrs	r10, 1
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x37a>
 a0a:	8b e2       	ldi	r24, 0x2B	; 43
 a0c:	01 c0       	rjmp	.+2      	; 0xa10 <vfprintf+0x37c>
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	a7 fc       	sbrc	r10, 7
 a12:	8d e2       	ldi	r24, 0x2D	; 45
 a14:	b6 01       	movw	r22, r12
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	50 d0       	rcall	.+160    	; 0xaba <fputc>
 a1a:	89 14       	cp	r8, r9
 a1c:	30 f4       	brcc	.+12     	; 0xa2a <vfprintf+0x396>
 a1e:	b6 01       	movw	r22, r12
 a20:	80 e3       	ldi	r24, 0x30	; 48
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	4a d0       	rcall	.+148    	; 0xaba <fputc>
 a26:	9a 94       	dec	r9
 a28:	f8 cf       	rjmp	.-16     	; 0xa1a <vfprintf+0x386>
 a2a:	8a 94       	dec	r8
 a2c:	f3 01       	movw	r30, r6
 a2e:	e8 0d       	add	r30, r8
 a30:	f1 1d       	adc	r31, r1
 a32:	80 81       	ld	r24, Z
 a34:	b6 01       	movw	r22, r12
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	40 d0       	rcall	.+128    	; 0xaba <fputc>
 a3a:	81 10       	cpse	r8, r1
 a3c:	f6 cf       	rjmp	.-20     	; 0xa2a <vfprintf+0x396>
 a3e:	22 20       	and	r2, r2
 a40:	09 f4       	brne	.+2      	; 0xa44 <vfprintf+0x3b0>
 a42:	4e ce       	rjmp	.-868    	; 0x6e0 <vfprintf+0x4c>
 a44:	b6 01       	movw	r22, r12
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	37 d0       	rcall	.+110    	; 0xaba <fputc>
 a4c:	2a 94       	dec	r2
 a4e:	f7 cf       	rjmp	.-18     	; 0xa3e <vfprintf+0x3aa>
 a50:	f6 01       	movw	r30, r12
 a52:	86 81       	ldd	r24, Z+6	; 0x06
 a54:	97 81       	ldd	r25, Z+7	; 0x07
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <vfprintf+0x3c8>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	9f ef       	ldi	r25, 0xFF	; 255
 a5c:	2b 96       	adiw	r28, 0x0b	; 11
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	f8 94       	cli
 a62:	de bf       	out	0x3e, r29	; 62
 a64:	0f be       	out	0x3f, r0	; 63
 a66:	cd bf       	out	0x3d, r28	; 61
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	0f 91       	pop	r16
 a70:	ff 90       	pop	r15
 a72:	ef 90       	pop	r14
 a74:	df 90       	pop	r13
 a76:	cf 90       	pop	r12
 a78:	bf 90       	pop	r11
 a7a:	af 90       	pop	r10
 a7c:	9f 90       	pop	r9
 a7e:	8f 90       	pop	r8
 a80:	7f 90       	pop	r7
 a82:	6f 90       	pop	r6
 a84:	5f 90       	pop	r5
 a86:	4f 90       	pop	r4
 a88:	3f 90       	pop	r3
 a8a:	2f 90       	pop	r2
 a8c:	08 95       	ret

00000a8e <strnlen_P>:
 a8e:	fc 01       	movw	r30, r24
 a90:	05 90       	lpm	r0, Z+
 a92:	61 50       	subi	r22, 0x01	; 1
 a94:	70 40       	sbci	r23, 0x00	; 0
 a96:	01 10       	cpse	r0, r1
 a98:	d8 f7       	brcc	.-10     	; 0xa90 <strnlen_P+0x2>
 a9a:	80 95       	com	r24
 a9c:	90 95       	com	r25
 a9e:	8e 0f       	add	r24, r30
 aa0:	9f 1f       	adc	r25, r31
 aa2:	08 95       	ret

00000aa4 <strnlen>:
 aa4:	fc 01       	movw	r30, r24
 aa6:	61 50       	subi	r22, 0x01	; 1
 aa8:	70 40       	sbci	r23, 0x00	; 0
 aaa:	01 90       	ld	r0, Z+
 aac:	01 10       	cpse	r0, r1
 aae:	d8 f7       	brcc	.-10     	; 0xaa6 <strnlen+0x2>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	8e 0f       	add	r24, r30
 ab6:	9f 1f       	adc	r25, r31
 ab8:	08 95       	ret

00000aba <fputc>:
 aba:	0f 93       	push	r16
 abc:	1f 93       	push	r17
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	fb 01       	movw	r30, r22
 ac4:	23 81       	ldd	r18, Z+3	; 0x03
 ac6:	21 fd       	sbrc	r18, 1
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <fputc+0x16>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	2c c0       	rjmp	.+88     	; 0xb28 <fputc+0x6e>
 ad0:	22 ff       	sbrs	r18, 2
 ad2:	16 c0       	rjmp	.+44     	; 0xb00 <fputc+0x46>
 ad4:	46 81       	ldd	r20, Z+6	; 0x06
 ad6:	57 81       	ldd	r21, Z+7	; 0x07
 ad8:	24 81       	ldd	r18, Z+4	; 0x04
 ada:	35 81       	ldd	r19, Z+5	; 0x05
 adc:	42 17       	cp	r20, r18
 ade:	53 07       	cpc	r21, r19
 ae0:	44 f4       	brge	.+16     	; 0xaf2 <fputc+0x38>
 ae2:	a0 81       	ld	r26, Z
 ae4:	b1 81       	ldd	r27, Z+1	; 0x01
 ae6:	9d 01       	movw	r18, r26
 ae8:	2f 5f       	subi	r18, 0xFF	; 255
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	31 83       	std	Z+1, r19	; 0x01
 aee:	20 83       	st	Z, r18
 af0:	8c 93       	st	X, r24
 af2:	26 81       	ldd	r18, Z+6	; 0x06
 af4:	37 81       	ldd	r19, Z+7	; 0x07
 af6:	2f 5f       	subi	r18, 0xFF	; 255
 af8:	3f 4f       	sbci	r19, 0xFF	; 255
 afa:	37 83       	std	Z+7, r19	; 0x07
 afc:	26 83       	std	Z+6, r18	; 0x06
 afe:	14 c0       	rjmp	.+40     	; 0xb28 <fputc+0x6e>
 b00:	8b 01       	movw	r16, r22
 b02:	ec 01       	movw	r28, r24
 b04:	fb 01       	movw	r30, r22
 b06:	00 84       	ldd	r0, Z+8	; 0x08
 b08:	f1 85       	ldd	r31, Z+9	; 0x09
 b0a:	e0 2d       	mov	r30, r0
 b0c:	09 95       	icall
 b0e:	89 2b       	or	r24, r25
 b10:	e1 f6       	brne	.-72     	; 0xaca <fputc+0x10>
 b12:	d8 01       	movw	r26, r16
 b14:	16 96       	adiw	r26, 0x06	; 6
 b16:	8d 91       	ld	r24, X+
 b18:	9c 91       	ld	r25, X
 b1a:	17 97       	sbiw	r26, 0x07	; 7
 b1c:	01 96       	adiw	r24, 0x01	; 1
 b1e:	17 96       	adiw	r26, 0x07	; 7
 b20:	9c 93       	st	X, r25
 b22:	8e 93       	st	-X, r24
 b24:	16 97       	sbiw	r26, 0x06	; 6
 b26:	ce 01       	movw	r24, r28
 b28:	df 91       	pop	r29
 b2a:	cf 91       	pop	r28
 b2c:	1f 91       	pop	r17
 b2e:	0f 91       	pop	r16
 b30:	08 95       	ret

00000b32 <__ultoa_invert>:
 b32:	fa 01       	movw	r30, r20
 b34:	aa 27       	eor	r26, r26
 b36:	28 30       	cpi	r18, 0x08	; 8
 b38:	51 f1       	breq	.+84     	; 0xb8e <__ultoa_invert+0x5c>
 b3a:	20 31       	cpi	r18, 0x10	; 16
 b3c:	81 f1       	breq	.+96     	; 0xb9e <__ultoa_invert+0x6c>
 b3e:	e8 94       	clt
 b40:	6f 93       	push	r22
 b42:	6e 7f       	andi	r22, 0xFE	; 254
 b44:	6e 5f       	subi	r22, 0xFE	; 254
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	8f 4f       	sbci	r24, 0xFF	; 255
 b4a:	9f 4f       	sbci	r25, 0xFF	; 255
 b4c:	af 4f       	sbci	r26, 0xFF	; 255
 b4e:	b1 e0       	ldi	r27, 0x01	; 1
 b50:	3e d0       	rcall	.+124    	; 0xbce <__ultoa_invert+0x9c>
 b52:	b4 e0       	ldi	r27, 0x04	; 4
 b54:	3c d0       	rcall	.+120    	; 0xbce <__ultoa_invert+0x9c>
 b56:	67 0f       	add	r22, r23
 b58:	78 1f       	adc	r23, r24
 b5a:	89 1f       	adc	r24, r25
 b5c:	9a 1f       	adc	r25, r26
 b5e:	a1 1d       	adc	r26, r1
 b60:	68 0f       	add	r22, r24
 b62:	79 1f       	adc	r23, r25
 b64:	8a 1f       	adc	r24, r26
 b66:	91 1d       	adc	r25, r1
 b68:	a1 1d       	adc	r26, r1
 b6a:	6a 0f       	add	r22, r26
 b6c:	71 1d       	adc	r23, r1
 b6e:	81 1d       	adc	r24, r1
 b70:	91 1d       	adc	r25, r1
 b72:	a1 1d       	adc	r26, r1
 b74:	20 d0       	rcall	.+64     	; 0xbb6 <__ultoa_invert+0x84>
 b76:	09 f4       	brne	.+2      	; 0xb7a <__ultoa_invert+0x48>
 b78:	68 94       	set
 b7a:	3f 91       	pop	r19
 b7c:	2a e0       	ldi	r18, 0x0A	; 10
 b7e:	26 9f       	mul	r18, r22
 b80:	11 24       	eor	r1, r1
 b82:	30 19       	sub	r19, r0
 b84:	30 5d       	subi	r19, 0xD0	; 208
 b86:	31 93       	st	Z+, r19
 b88:	de f6       	brtc	.-74     	; 0xb40 <__ultoa_invert+0xe>
 b8a:	cf 01       	movw	r24, r30
 b8c:	08 95       	ret
 b8e:	46 2f       	mov	r20, r22
 b90:	47 70       	andi	r20, 0x07	; 7
 b92:	40 5d       	subi	r20, 0xD0	; 208
 b94:	41 93       	st	Z+, r20
 b96:	b3 e0       	ldi	r27, 0x03	; 3
 b98:	0f d0       	rcall	.+30     	; 0xbb8 <__ultoa_invert+0x86>
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__ultoa_invert+0x5c>
 b9c:	f6 cf       	rjmp	.-20     	; 0xb8a <__ultoa_invert+0x58>
 b9e:	46 2f       	mov	r20, r22
 ba0:	4f 70       	andi	r20, 0x0F	; 15
 ba2:	40 5d       	subi	r20, 0xD0	; 208
 ba4:	4a 33       	cpi	r20, 0x3A	; 58
 ba6:	18 f0       	brcs	.+6      	; 0xbae <__ultoa_invert+0x7c>
 ba8:	49 5d       	subi	r20, 0xD9	; 217
 baa:	31 fd       	sbrc	r19, 1
 bac:	40 52       	subi	r20, 0x20	; 32
 bae:	41 93       	st	Z+, r20
 bb0:	02 d0       	rcall	.+4      	; 0xbb6 <__ultoa_invert+0x84>
 bb2:	a9 f7       	brne	.-22     	; 0xb9e <__ultoa_invert+0x6c>
 bb4:	ea cf       	rjmp	.-44     	; 0xb8a <__ultoa_invert+0x58>
 bb6:	b4 e0       	ldi	r27, 0x04	; 4
 bb8:	a6 95       	lsr	r26
 bba:	97 95       	ror	r25
 bbc:	87 95       	ror	r24
 bbe:	77 95       	ror	r23
 bc0:	67 95       	ror	r22
 bc2:	ba 95       	dec	r27
 bc4:	c9 f7       	brne	.-14     	; 0xbb8 <__ultoa_invert+0x86>
 bc6:	00 97       	sbiw	r24, 0x00	; 0
 bc8:	61 05       	cpc	r22, r1
 bca:	71 05       	cpc	r23, r1
 bcc:	08 95       	ret
 bce:	9b 01       	movw	r18, r22
 bd0:	ac 01       	movw	r20, r24
 bd2:	0a 2e       	mov	r0, r26
 bd4:	06 94       	lsr	r0
 bd6:	57 95       	ror	r21
 bd8:	47 95       	ror	r20
 bda:	37 95       	ror	r19
 bdc:	27 95       	ror	r18
 bde:	ba 95       	dec	r27
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__ultoa_invert+0xa2>
 be2:	62 0f       	add	r22, r18
 be4:	73 1f       	adc	r23, r19
 be6:	84 1f       	adc	r24, r20
 be8:	95 1f       	adc	r25, r21
 bea:	a0 1d       	adc	r26, r0
 bec:	08 95       	ret

00000bee <_exit>:
 bee:	f8 94       	cli

00000bf0 <__stop_program>:
 bf0:	ff cf       	rjmp	.-2      	; 0xbf0 <__stop_program>
