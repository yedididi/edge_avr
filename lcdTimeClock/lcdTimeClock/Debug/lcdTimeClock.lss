
lcdTimeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000bae  00000c42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800118  00800118  00000c5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a83  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e22  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d02  00000000  00000000  00003735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00004438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ba  00000000  00000000  0000475c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000800  00000000  00000000  00004f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c2       	rjmp	.+1172   	; 0x4ba <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 33       	cpi	r26, 0x3C	; 60
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	22 d2       	rcall	.+1092   	; 0x508 <main>
  c4:	72 c5       	rjmp	.+2788   	; 0xbaa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <incMilisec>:
ï»¿#include "lcdTimeClock.h"

void incMilisec()
{
	milisec = (milisec + 1) % 1000;
  c8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <milisec>
  cc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <milisec+0x1>
  d0:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <milisec+0x2>
  d4:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <milisec+0x3>
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	8f 4f       	sbci	r24, 0xFF	; 255
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	28 ee       	ldi	r18, 0xE8	; 232
  e6:	33 e0       	ldi	r19, 0x03	; 3
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	4d d2       	rcall	.+1178   	; 0x588 <__udivmodsi4>
  ee:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <milisec>
  f2:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <milisec+0x1>
  f6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <milisec+0x2>
  fa:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <milisec+0x3>
	if (milisec)
  fe:	67 2b       	or	r22, r23
 100:	68 2b       	or	r22, r24
 102:	69 2b       	or	r22, r25
 104:	f9 f4       	brne	.+62     	; 0x144 <incMilisec+0x7c>
	return;
	else
	{
		sec = (sec + 1) % 60;
 106:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <sec>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	6c e3       	ldi	r22, 0x3C	; 60
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	27 d2       	rcall	.+1102   	; 0x562 <__divmodhi4>
 114:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <sec>
		if (sec)
 118:	81 11       	cpse	r24, r1
 11a:	14 c0       	rjmp	.+40     	; 0x144 <incMilisec+0x7c>
		return;
		else
		{
			min = (min + 1) % 60;
 11c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <min>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	6c e3       	ldi	r22, 0x3C	; 60
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	1c d2       	rcall	.+1080   	; 0x562 <__divmodhi4>
 12a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <min>
			if (min)
 12e:	81 11       	cpse	r24, r1
 130:	09 c0       	rjmp	.+18     	; 0x144 <incMilisec+0x7c>
			return ;
			else
			hour = (hour + 1) % 24;
 132:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <hour>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	68 e1       	ldi	r22, 0x18	; 24
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	11 d2       	rcall	.+1058   	; 0x562 <__divmodhi4>
 140:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <hour>
 144:	08 95       	ret

00000146 <init_timeClock>:
	}
}

void init_timeClock()
{
	LCD_init();
 146:	63 d1       	rcall	.+710    	; 0x40e <LCD_init>
	
	milisec = 0;
 148:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <milisec>
 14c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <milisec+0x1>
 150:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <milisec+0x2>
 154:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <milisec+0x3>
	sec = 0;
 158:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <sec>
	min = 0;
 15c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <min>
	hour = 0;
 160:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <hour>
	clockState = CLOCK;
 164:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
	
	//initTIM0();
	initTIM2();
 168:	f0 d1       	rcall	.+992    	; 0x54a <initTIM2>
	Button_init(&changeStateBtn, &DDRA, &PINA, 0);
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	49 e3       	ldi	r20, 0x39	; 57
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	6a e3       	ldi	r22, 0x3A	; 58
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	8d e1       	ldi	r24, 0x1D	; 29
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	ca d0       	rcall	.+404    	; 0x30e <Button_init>
	Button_init(&plusHour, &DDRA, &PINA, 1);
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	49 e3       	ldi	r20, 0x39	; 57
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	6a e3       	ldi	r22, 0x3A	; 58
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	8d e2       	ldi	r24, 0x2D	; 45
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	c2 d0       	rcall	.+388    	; 0x30e <Button_init>
	Button_init(&plusMin, &DDRA, &PINA, 2);
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	49 e3       	ldi	r20, 0x39	; 57
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	6a e3       	ldi	r22, 0x3A	; 58
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	86 e3       	ldi	r24, 0x36	; 54
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	ba d0       	rcall	.+372    	; 0x30e <Button_init>
	Button_init(&plusSec, &DDRA, &PINA, 3);
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	49 e3       	ldi	r20, 0x39	; 57
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	6a e3       	ldi	r22, 0x3A	; 58
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	b2 c0       	rjmp	.+356    	; 0x30e <Button_init>
 1aa:	08 95       	ret

000001ac <displayClock>:
}

void displayClock(int row, int col)
{
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	6e 97       	sbiw	r28, 0x1e	; 30
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	f8 2e       	mov	r15, r24
 1ca:	e6 2e       	mov	r14, r22
	char buff[30];
	
	//if (sec < 10)
		//sprintf(buff, "%d:%d:0%d   ", hour, min, sec);
	//else
	sprintf(buff, "%d:%d:%d   ", hour, min, sec);
 1cc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <sec>
 1d0:	1f 92       	push	r1
 1d2:	8f 93       	push	r24
 1d4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <min>
 1d8:	1f 92       	push	r1
 1da:	8f 93       	push	r24
 1dc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <hour>
 1e0:	1f 92       	push	r1
 1e2:	8f 93       	push	r24
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	9f 93       	push	r25
 1ea:	8f 93       	push	r24
 1ec:	8e 01       	movw	r16, r28
 1ee:	0f 5f       	subi	r16, 0xFF	; 255
 1f0:	1f 4f       	sbci	r17, 0xFF	; 255
 1f2:	1f 93       	push	r17
 1f4:	0f 93       	push	r16
 1f6:	fe d1       	rcall	.+1020   	; 0x5f4 <sprintf>
	LCD_writeStringXY(row, col, buff);
 1f8:	a8 01       	movw	r20, r16
 1fa:	6e 2d       	mov	r22, r14
 1fc:	8f 2d       	mov	r24, r15
 1fe:	54 d1       	rcall	.+680    	; 0x4a8 <LCD_writeStringXY>
}
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	6e 96       	adiw	r28, 0x1e	; 30
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <modifyMode>:

void modifyMode()
{
	if (Button_GetState(&plusHour) == ACT_RELEASED)
 224:	8d e2       	ldi	r24, 0x2D	; 45
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	7f d0       	rcall	.+254    	; 0x328 <Button_GetState>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	49 f4       	brne	.+18     	; 0x240 <modifyMode+0x1c>
		backupHour = (backupHour + 1) % 24;
 22e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <backupHour>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	68 e1       	ldi	r22, 0x18	; 24
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	93 d1       	rcall	.+806    	; 0x562 <__divmodhi4>
 23c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <backupHour>
	if (Button_GetState(&plusMin) == ACT_RELEASED)
 240:	86 e3       	ldi	r24, 0x36	; 54
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	71 d0       	rcall	.+226    	; 0x328 <Button_GetState>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	49 f4       	brne	.+18     	; 0x25c <modifyMode+0x38>
		backupMin = (backupMin + 1) % 60;
 24a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <backupMin>
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	6c e3       	ldi	r22, 0x3C	; 60
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	85 d1       	rcall	.+778    	; 0x562 <__divmodhi4>
 258:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <backupMin>
	if (Button_GetState(&plusSec) == ACT_RELEASED)
 25c:	85 e2       	ldi	r24, 0x25	; 37
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	63 d0       	rcall	.+198    	; 0x328 <Button_GetState>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	49 f4       	brne	.+18     	; 0x278 <modifyMode+0x54>
		backupSec = (backupSec + 1) % 60;
 266:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <backupSec>
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	6c e3       	ldi	r22, 0x3C	; 60
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	77 d1       	rcall	.+750    	; 0x562 <__divmodhi4>
 274:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <backupSec>
	
	hour = backupHour;
 278:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <backupHour>
 27c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <hour>
	min = backupMin;
 280:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <backupMin>
 284:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <min>
	sec = backupSec; 
 288:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <backupSec>
 28c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <sec>
	
	LCD_writeStringXY(0, 3, "Modify mode");
 290:	4c e0       	ldi	r20, 0x0C	; 12
 292:	51 e0       	ldi	r21, 0x01	; 1
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	80 e0       	ldi	r24, 0x00	; 0
	displayClock(1, 5);
 298:	07 d1       	rcall	.+526    	; 0x4a8 <LCD_writeStringXY>
 29a:	65 e0       	ldi	r22, 0x05	; 5
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	84 cf       	rjmp	.-248    	; 0x1ac <displayClock>
 2a4:	08 95       	ret

000002a6 <execute_timeClock>:
}

void execute_timeClock()
{
	switch(clockState)
 2a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2aa:	88 23       	and	r24, r24
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <execute_timeClock+0xe>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	b1 f0       	breq	.+44     	; 0x2de <execute_timeClock+0x38>
 2b2:	1e c0       	rjmp	.+60     	; 0x2f0 <execute_timeClock+0x4a>
	{
		case CLOCK:
		if (Button_GetState(&changeStateBtn) == ACT_RELEASED)
 2b4:	8d e1       	ldi	r24, 0x1D	; 29
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	37 d0       	rcall	.+110    	; 0x328 <Button_GetState>
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	c9 f4       	brne	.+50     	; 0x2f0 <execute_timeClock+0x4a>
		{
			clockState = MODIFY;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
			backupHour = hour;
 2c4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <hour>
 2c8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <backupHour>
			backupMin = min;
 2cc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <min>
 2d0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <backupMin>
			backupSec = sec;
 2d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <sec>
 2d8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <backupSec>
 2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <execute_timeClock+0x4a>
		}
		break;
		
		case MODIFY:
		if (Button_GetState(&changeStateBtn) == ACT_RELEASED)
 2de:	8d e1       	ldi	r24, 0x1D	; 29
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	22 d0       	rcall	.+68     	; 0x328 <Button_GetState>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <execute_timeClock+0x4a>
		{
			clockState = CLOCK;
 2e8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
			LCD_writeCmdData(LCD_DISPLAY_CLEAR);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	85 d0       	rcall	.+266    	; 0x3fa <LCD_writeCmdData>
		}
		break;
	}
	
	switch(clockState)
 2f0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2f4:	88 23       	and	r24, r24
 2f6:	19 f0       	breq	.+6      	; 0x2fe <execute_timeClock+0x58>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	39 f0       	breq	.+14     	; 0x30a <execute_timeClock+0x64>
 2fc:	08 95       	ret
	{
		case CLOCK:
		displayClock(0, 5);
 2fe:	65 e0       	ldi	r22, 0x05	; 5
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
		break;
 306:	52 cf       	rjmp	.-348    	; 0x1ac <displayClock>
		
		case MODIFY:
		modifyMode();
 308:	08 95       	ret
 30a:	8c cf       	rjmp	.-232    	; 0x224 <modifyMode>
 30c:	08 95       	ret

0000030e <Button_init>:
ï»¿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 30e:	fc 01       	movw	r30, r24
 310:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;		// í¬ë³ì¼ëë -> ì¬ì©
 312:	71 83       	std	Z+1, r23	; 0x01
 314:	60 83       	st	Z, r22
	btn ->PIN = pin;
 316:	53 83       	std	Z+3, r21	; 0x03
 318:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 31a:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 31c:	31 e0       	ldi	r19, 0x01	; 1
 31e:	35 83       	std	Z+5, r19	; 0x05
	//*btn ->DDR &= (1 << btn -> pinNum);
	GPIO_initPin(btn->DDR, INPUT, btn->pinNum);
 320:	42 2f       	mov	r20, r18
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	f5 c0       	rjmp	.+490    	; 0x510 <GPIO_initPin>
 326:	08 95       	ret

00000328 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn ì£¼ì ì í¨ë²ì button_t
{
 328:	fc 01       	movw	r30, r24
	uint8_t curState = *btn->PIN & (1 << btn->pinNum);
 32a:	a2 81       	ldd	r26, Z+2	; 0x02
 32c:	b3 81       	ldd	r27, Z+3	; 0x03
 32e:	8c 91       	ld	r24, X
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	04 80       	ldd	r0, Z+4	; 0x04
 336:	02 c0       	rjmp	.+4      	; 0x33c <Button_GetState+0x14>
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <Button_GetState+0x10>
 340:	28 23       	and	r18, r24
	//uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum);
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 342:	59 f4       	brne	.+22     	; 0x35a <Button_GetState+0x32>
 344:	85 81       	ldd	r24, Z+5	; 0x05
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	41 f4       	brne	.+16     	; 0x35a <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	af e3       	ldi	r26, 0x3F	; 63
 34c:	bc e9       	ldi	r27, 0x9C	; 156
 34e:	11 97       	sbiw	r26, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <Button_GetState+0x26>
 352:	00 c0       	rjmp	.+0      	; 0x354 <Button_GetState+0x2c>
 354:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 356:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 358:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 35a:	22 23       	and	r18, r18
 35c:	69 f0       	breq	.+26     	; 0x378 <Button_GetState+0x50>
 35e:	85 81       	ldd	r24, Z+5	; 0x05
 360:	81 11       	cpse	r24, r1
 362:	0c c0       	rjmp	.+24     	; 0x37c <Button_GetState+0x54>
 364:	8f e3       	ldi	r24, 0x3F	; 63
 366:	9c e9       	ldi	r25, 0x9C	; 156
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <Button_GetState+0x40>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <Button_GetState+0x46>
 36e:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;	
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	08 95       	ret
	}
	return ACT_NONE;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
 37c:	80 e0       	ldi	r24, 0x00	; 0
}
 37e:	08 95       	ret

00000380 <GPIO_writeControlData>:
	LCD_CONTROL_PORT = data;
}

void GPIO_writeData(uint8_t data)
{
	LCD_DATA_PORT = data;
 380:	88 bb       	out	0x18, r24	; 24
 382:	08 95       	ret

00000384 <GPIO_init>:
}

void GPIO_init()
{
	LCD_CONTROL_DDR |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_E);
 384:	87 b3       	in	r24, 0x17	; 23
 386:	80 6e       	ori	r24, 0xE0	; 224
 388:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_DDR |= 0xff;
 38a:	84 b3       	in	r24, 0x14	; 20
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	84 bb       	out	0x14, r24	; 20
 390:	08 95       	ret

00000392 <LCD_cmdMode>:
}

void LCD_cmdMode()
{
	//RS -> low
	lcdControlData &= ~(1 << LCD_RS);
 392:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <lcdControlData>
 396:	8f 7d       	andi	r24, 0xDF	; 223
 398:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 39c:	f1 cf       	rjmp	.-30     	; 0x380 <GPIO_writeControlData>
 39e:	08 95       	ret

000003a0 <LCD_charMode>:
	//GPIO_writePin(&LCD_CONTROL_PORT, LCD_RS, GPIO_RESET);
}
void LCD_charMode()
{
	//RS -> high
	lcdControlData |= (1 << LCD_RS);
 3a0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <lcdControlData>
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 3aa:	ea cf       	rjmp	.-44     	; 0x380 <GPIO_writeControlData>
 3ac:	08 95       	ret

000003ae <LCD_writeMode>:
}

void LCD_writeMode()
{
	//RW -> low
	lcdControlData &= ~(1 << LCD_RW);
 3ae:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <lcdControlData>
 3b2:	8f 7b       	andi	r24, 0xBF	; 191
 3b4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 3b8:	e3 cf       	rjmp	.-58     	; 0x380 <GPIO_writeControlData>
 3ba:	08 95       	ret

000003bc <LCD_enableHigh>:
	//GPIO_writePin(&LCD_CONTROL_PORT, LCD_RW, GPIO_RESET);
}

void LCD_enableHigh()
{
	lcdControlData |= (1 << LCD_E);
 3bc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <lcdControlData>
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 3c6:	dc df       	rcall	.-72     	; 0x380 <GPIO_writeControlData>
 3c8:	8f e9       	ldi	r24, 0x9F	; 159
 3ca:	9f e0       	ldi	r25, 0x0F	; 15
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_enableHigh+0x10>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_enableHigh+0x16>
 3d2:	00 00       	nop
 3d4:	08 95       	ret

000003d6 <LCD_enableLow>:
	_delay_ms(1);
}

void LCD_enableLow()
{
	lcdControlData &= ~(1 << LCD_E);
 3d6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <lcdControlData>
 3da:	8f 77       	andi	r24, 0x7F	; 127
 3dc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 3e0:	cf df       	rcall	.-98     	; 0x380 <GPIO_writeControlData>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_enableLow+0x10>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_enableLow+0x16>
 3ec:	00 00       	nop
 3ee:	08 95       	ret

000003f0 <LCD_writeByte>:

void LCD_writeByte(uint8_t data)
{
	//GPIO_writeData(data);
	
	GPIO_writePort(&LCD_DATA_PORT, data);
 3f0:	68 2f       	mov	r22, r24
 3f2:	85 e3       	ldi	r24, 0x35	; 53
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	a6 c0       	rjmp	.+332    	; 0x544 <GPIO_writePort>
 3f8:	08 95       	ret

000003fa <LCD_writeCmdData>:
}

void LCD_writeCmdData(uint8_t data)
{
 3fa:	cf 93       	push	r28
 3fc:	c8 2f       	mov	r28, r24
	//lcd ë´ë¶ ëªë ¹ì´ ëìì ëí í¨ì
	LCD_cmdMode();
 3fe:	c9 df       	rcall	.-110    	; 0x392 <LCD_cmdMode>
	LCD_writeMode();
 400:	d6 df       	rcall	.-84     	; 0x3ae <LCD_writeMode>
	LCD_enableHigh();
 402:	dc df       	rcall	.-72     	; 0x3bc <LCD_enableHigh>
	LCD_writeByte(data);
 404:	8c 2f       	mov	r24, r28
 406:	f4 df       	rcall	.-24     	; 0x3f0 <LCD_writeByte>
 408:	e6 df       	rcall	.-52     	; 0x3d6 <LCD_enableLow>
	LCD_enableLow();
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <LCD_init>:
}
 40e:	ba df       	rcall	.-140    	; 0x384 <GPIO_init>
 410:	8f e5       	ldi	r24, 0x5F	; 95
 412:	9a ee       	ldi	r25, 0xEA	; 234
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <LCD_init+0x6>
 418:	00 c0       	rjmp	.+0      	; 0x41a <LCD_init+0xc>
 41a:	00 00       	nop
{
	GPIO_init();
	
	_delay_ms(15);
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(LCD_FUNCTION_SET);
 41c:	88 e3       	ldi	r24, 0x38	; 56
 41e:	ed df       	rcall	.-38     	; 0x3fa <LCD_writeCmdData>
 420:	8f e1       	ldi	r24, 0x1F	; 31
 422:	9e e4       	ldi	r25, 0x4E	; 78
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <LCD_init+0x16>
 428:	00 c0       	rjmp	.+0      	; 0x42a <LCD_init+0x1c>
	_delay_ms(5);
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(LCD_FUNCTION_SET);
 42a:	00 00       	nop
 42c:	88 e3       	ldi	r24, 0x38	; 56
 42e:	e5 df       	rcall	.-54     	; 0x3fa <LCD_writeCmdData>
 430:	8f e9       	ldi	r24, 0x9F	; 159
 432:	9f e0       	ldi	r25, 0x0F	; 15
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <LCD_init+0x26>
 438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_init+0x2c>
	_delay_ms(1);
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(LCD_FUNCTION_SET);
 43a:	00 00       	nop
 43c:	88 e3       	ldi	r24, 0x38	; 56
	//function set: 0 0 1 DL=1 N=1 F=0 0 0  -> 0x38
	LCD_writeCmdData(LCD_FUNCTION_SET);
 43e:	dd df       	rcall	.-70     	; 0x3fa <LCD_writeCmdData>
 440:	88 e3       	ldi	r24, 0x38	; 56
	//LCD_DISPLAY_OFF
	LCD_writeCmdData(LCD_DISPLAY_OFF);
 442:	db df       	rcall	.-74     	; 0x3fa <LCD_writeCmdData>
 444:	88 e0       	ldi	r24, 0x08	; 8
	//LCD_DISPLAY_CLEAR
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);
 446:	d9 df       	rcall	.-78     	; 0x3fa <LCD_writeCmdData>
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	d7 df       	rcall	.-82     	; 0x3fa <LCD_writeCmdData>
	//ENTRY_MODE_SET
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	d5 df       	rcall	.-86     	; 0x3fa <LCD_writeCmdData>
 450:	8c e0       	ldi	r24, 0x0C	; 12
	
	//LCD_DISPLAY_ON
	LCD_writeCmdData(LCD_DISPLAY_ON);
 452:	d3 cf       	rjmp	.-90     	; 0x3fa <LCD_writeCmdData>
 454:	08 95       	ret

00000456 <LCD_writeCharData>:
 456:	cf 93       	push	r28
 458:	c8 2f       	mov	r28, r24
}

void LCD_writeCharData(uint8_t data)
{
	//lcd char ì°ë ëì
	LCD_charMode();
 45a:	a2 df       	rcall	.-188    	; 0x3a0 <LCD_charMode>
	LCD_writeMode();
 45c:	a8 df       	rcall	.-176    	; 0x3ae <LCD_writeMode>
	LCD_enableHigh();
 45e:	ae df       	rcall	.-164    	; 0x3bc <LCD_enableHigh>
	LCD_writeByte(data);
 460:	8c 2f       	mov	r24, r28
 462:	c6 df       	rcall	.-116    	; 0x3f0 <LCD_writeByte>
 464:	b8 df       	rcall	.-144    	; 0x3d6 <LCD_enableLow>
	LCD_enableLow();
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <LCD_writeString>:
}
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17

void LCD_writeString(const char *str)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	8c 01       	movw	r16, r24
	for (int i = 0; str[i]; i++)
 474:	c0 e0       	ldi	r28, 0x00	; 0
 476:	d0 e0       	ldi	r29, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <LCD_writeString+0x14>
		LCD_writeCharData(str[i]);
 47a:	ed df       	rcall	.-38     	; 0x456 <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(const char *str)
{
	for (int i = 0; str[i]; i++)
 47c:	21 96       	adiw	r28, 0x01	; 1
 47e:	f8 01       	movw	r30, r16
 480:	ec 0f       	add	r30, r28
 482:	fd 1f       	adc	r31, r29
 484:	80 81       	ld	r24, Z
 486:	81 11       	cpse	r24, r1
 488:	f8 cf       	rjmp	.-16     	; 0x47a <LCD_writeString+0x10>
		LCD_writeCharData(str[i]);
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <LCD_goToXY>:

void LCD_goToXY(uint8_t row, uint8_t col)
{
	col %= 16, row %= 2;
 494:	6f 70       	andi	r22, 0x0F	; 15
 496:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdRegisterAddress = (0x40 * row) + col;
 498:	90 e4       	ldi	r25, 0x40	; 64
 49a:	89 9f       	mul	r24, r25
 49c:	60 0d       	add	r22, r0
 49e:	11 24       	eor	r1, r1
 4a0:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdRegisterAddress;
	LCD_writeCmdData(command);
 4a2:	80 58       	subi	r24, 0x80	; 128
 4a4:	aa cf       	rjmp	.-172    	; 0x3fa <LCD_writeCmdData>
 4a6:	08 95       	ret

000004a8 <LCD_writeStringXY>:
}

void LCD_writeStringXY(uint8_t row, uint8_t col, const char *str)
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	ea 01       	movw	r28, r20
	LCD_goToXY(row, col);
 4ae:	f2 df       	rcall	.-28     	; 0x494 <LCD_goToXY>
	LCD_writeString(str);
 4b0:	ce 01       	movw	r24, r28
 4b2:	db df       	rcall	.-74     	; 0x46a <LCD_writeString>
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <__vector_9>:
#include "ap/lcdTimeClock/lcdTimeClock.h"

ISR(TIMER2_COMP_vect)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	0b b6       	in	r0, 0x3b	; 59
 4c6:	0f 92       	push	r0
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	incMilisec();
 4e0:	f3 dd       	rcall	.-1050   	; 0xc8 <incMilisec>
}
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	bf 91       	pop	r27
 4e8:	af 91       	pop	r26
 4ea:	9f 91       	pop	r25
 4ec:	8f 91       	pop	r24
 4ee:	7f 91       	pop	r23
 4f0:	6f 91       	pop	r22
 4f2:	5f 91       	pop	r21
 4f4:	4f 91       	pop	r20
 4f6:	3f 91       	pop	r19
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0b be       	out	0x3b, r0	; 59
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <main>:

int main(void)
{
    init_timeClock();
 508:	1e de       	rcall	.-964    	; 0x146 <init_timeClock>
	sei();
    while (1) 
    {
		execute_timeClock();
 50a:	78 94       	sei
 50c:	cc de       	rcall	.-616    	; 0x2a6 <execute_timeClock>
 50e:	fe cf       	rjmp	.-4      	; 0x50c <main+0x4>

00000510 <GPIO_initPin>:
	*DDR = 0x00;
}

//init - pin (1EA)
void GPIO_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum)
{
 510:	fc 01       	movw	r30, r24
	if (dir == OUTPUT)
 512:	61 30       	cpi	r22, 0x01	; 1
 514:	59 f4       	brne	.+22     	; 0x52c <GPIO_initPin+0x1c>
	*DDR |= (1 << pinNum); //no ~?
 516:	20 81       	ld	r18, Z
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <GPIO_initPin+0x12>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	4a 95       	dec	r20
 524:	e2 f7       	brpl	.-8      	; 0x51e <GPIO_initPin+0xe>
 526:	82 2b       	or	r24, r18
 528:	80 83       	st	Z, r24
 52a:	08 95       	ret
	else
	*DDR &= ~(1 << pinNum);
 52c:	90 81       	ld	r25, Z
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <GPIO_initPin+0x28>
 534:	22 0f       	add	r18, r18
 536:	33 1f       	adc	r19, r19
 538:	4a 95       	dec	r20
 53a:	e2 f7       	brpl	.-8      	; 0x534 <GPIO_initPin+0x24>
 53c:	20 95       	com	r18
 53e:	29 23       	and	r18, r25
 540:	20 83       	st	Z, r18
 542:	08 95       	ret

00000544 <GPIO_writePort>:
}

//output - port (8EA or 5EA)
void GPIO_writePort(volatile uint8_t *PORT, uint8_t data)
{
	*PORT = data;
 544:	fc 01       	movw	r30, r24
 546:	60 83       	st	Z, r22
 548:	08 95       	ret

0000054a <initTIM2>:
}

void initTIM2()
{
	//prescaler 1/64ë¡ ì¤ì  > cs22, cs21, cs20 0 1 1ë¡ ì¤ì í´ì¼ í¨
	TCCR2 |= (0 << CS22) | (1 << CS21) | (1 << CS20);
 54a:	85 b5       	in	r24, 0x25	; 37
 54c:	83 60       	ori	r24, 0x03	; 3
 54e:	85 bd       	out	0x25, r24	; 37
	
	//CTC mode ì¤ì 
	TCCR2 |= (1 << WGM21) | (0 << WGM20);
 550:	85 b5       	in	r24, 0x25	; 37
 552:	88 60       	ori	r24, 0x08	; 8
 554:	85 bd       	out	0x25, r24	; 37
	
	//TIMSK timer compare bit on
	TIMSK |= (1 << OCIE2);
 556:	87 b7       	in	r24, 0x37	; 55
 558:	80 68       	ori	r24, 0x80	; 128
 55a:	87 bf       	out	0x37, r24	; 55
	
	//ë¹êµí  ì«ì ì¤ì 
	OCR2 = 250 - 1;
 55c:	89 ef       	ldi	r24, 0xF9	; 249
 55e:	83 bd       	out	0x23, r24	; 35
 560:	08 95       	ret

00000562 <__divmodhi4>:
 562:	97 fb       	bst	r25, 7
 564:	07 2e       	mov	r0, r23
 566:	16 f4       	brtc	.+4      	; 0x56c <__divmodhi4+0xa>
 568:	00 94       	com	r0
 56a:	06 d0       	rcall	.+12     	; 0x578 <__divmodhi4_neg1>
 56c:	77 fd       	sbrc	r23, 7
 56e:	08 d0       	rcall	.+16     	; 0x580 <__divmodhi4_neg2>
 570:	2d d0       	rcall	.+90     	; 0x5cc <__udivmodhi4>
 572:	07 fc       	sbrc	r0, 7
 574:	05 d0       	rcall	.+10     	; 0x580 <__divmodhi4_neg2>
 576:	3e f4       	brtc	.+14     	; 0x586 <__divmodhi4_exit>

00000578 <__divmodhi4_neg1>:
 578:	90 95       	com	r25
 57a:	81 95       	neg	r24
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	08 95       	ret

00000580 <__divmodhi4_neg2>:
 580:	70 95       	com	r23
 582:	61 95       	neg	r22
 584:	7f 4f       	sbci	r23, 0xFF	; 255

00000586 <__divmodhi4_exit>:
 586:	08 95       	ret

00000588 <__udivmodsi4>:
 588:	a1 e2       	ldi	r26, 0x21	; 33
 58a:	1a 2e       	mov	r1, r26
 58c:	aa 1b       	sub	r26, r26
 58e:	bb 1b       	sub	r27, r27
 590:	fd 01       	movw	r30, r26
 592:	0d c0       	rjmp	.+26     	; 0x5ae <__udivmodsi4_ep>

00000594 <__udivmodsi4_loop>:
 594:	aa 1f       	adc	r26, r26
 596:	bb 1f       	adc	r27, r27
 598:	ee 1f       	adc	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	a2 17       	cp	r26, r18
 59e:	b3 07       	cpc	r27, r19
 5a0:	e4 07       	cpc	r30, r20
 5a2:	f5 07       	cpc	r31, r21
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <__udivmodsi4_ep>
 5a6:	a2 1b       	sub	r26, r18
 5a8:	b3 0b       	sbc	r27, r19
 5aa:	e4 0b       	sbc	r30, r20
 5ac:	f5 0b       	sbc	r31, r21

000005ae <__udivmodsi4_ep>:
 5ae:	66 1f       	adc	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	1a 94       	dec	r1
 5b8:	69 f7       	brne	.-38     	; 0x594 <__udivmodsi4_loop>
 5ba:	60 95       	com	r22
 5bc:	70 95       	com	r23
 5be:	80 95       	com	r24
 5c0:	90 95       	com	r25
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	bd 01       	movw	r22, r26
 5c8:	cf 01       	movw	r24, r30
 5ca:	08 95       	ret

000005cc <__udivmodhi4>:
 5cc:	aa 1b       	sub	r26, r26
 5ce:	bb 1b       	sub	r27, r27
 5d0:	51 e1       	ldi	r21, 0x11	; 17
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <__udivmodhi4_ep>

000005d4 <__udivmodhi4_loop>:
 5d4:	aa 1f       	adc	r26, r26
 5d6:	bb 1f       	adc	r27, r27
 5d8:	a6 17       	cp	r26, r22
 5da:	b7 07       	cpc	r27, r23
 5dc:	10 f0       	brcs	.+4      	; 0x5e2 <__udivmodhi4_ep>
 5de:	a6 1b       	sub	r26, r22
 5e0:	b7 0b       	sbc	r27, r23

000005e2 <__udivmodhi4_ep>:
 5e2:	88 1f       	adc	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	5a 95       	dec	r21
 5e8:	a9 f7       	brne	.-22     	; 0x5d4 <__udivmodhi4_loop>
 5ea:	80 95       	com	r24
 5ec:	90 95       	com	r25
 5ee:	bc 01       	movw	r22, r24
 5f0:	cd 01       	movw	r24, r26
 5f2:	08 95       	ret

000005f4 <sprintf>:
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	2e 97       	sbiw	r28, 0x0e	; 14
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	0d 89       	ldd	r16, Y+21	; 0x15
 60e:	1e 89       	ldd	r17, Y+22	; 0x16
 610:	86 e0       	ldi	r24, 0x06	; 6
 612:	8c 83       	std	Y+4, r24	; 0x04
 614:	1a 83       	std	Y+2, r17	; 0x02
 616:	09 83       	std	Y+1, r16	; 0x01
 618:	8f ef       	ldi	r24, 0xFF	; 255
 61a:	9f e7       	ldi	r25, 0x7F	; 127
 61c:	9e 83       	std	Y+6, r25	; 0x06
 61e:	8d 83       	std	Y+5, r24	; 0x05
 620:	ae 01       	movw	r20, r28
 622:	47 5e       	subi	r20, 0xE7	; 231
 624:	5f 4f       	sbci	r21, 0xFF	; 255
 626:	6f 89       	ldd	r22, Y+23	; 0x17
 628:	78 8d       	ldd	r23, Y+24	; 0x18
 62a:	ce 01       	movw	r24, r28
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	10 d0       	rcall	.+32     	; 0x650 <vfprintf>
 630:	ef 81       	ldd	r30, Y+7	; 0x07
 632:	f8 85       	ldd	r31, Y+8	; 0x08
 634:	e0 0f       	add	r30, r16
 636:	f1 1f       	adc	r31, r17
 638:	10 82       	st	Z, r1
 63a:	2e 96       	adiw	r28, 0x0e	; 14
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	08 95       	ret

00000650 <vfprintf>:
 650:	2f 92       	push	r2
 652:	3f 92       	push	r3
 654:	4f 92       	push	r4
 656:	5f 92       	push	r5
 658:	6f 92       	push	r6
 65a:	7f 92       	push	r7
 65c:	8f 92       	push	r8
 65e:	9f 92       	push	r9
 660:	af 92       	push	r10
 662:	bf 92       	push	r11
 664:	cf 92       	push	r12
 666:	df 92       	push	r13
 668:	ef 92       	push	r14
 66a:	ff 92       	push	r15
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	2b 97       	sbiw	r28, 0x0b	; 11
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61
 684:	6c 01       	movw	r12, r24
 686:	7b 01       	movw	r14, r22
 688:	8a 01       	movw	r16, r20
 68a:	fc 01       	movw	r30, r24
 68c:	17 82       	std	Z+7, r1	; 0x07
 68e:	16 82       	std	Z+6, r1	; 0x06
 690:	83 81       	ldd	r24, Z+3	; 0x03
 692:	81 ff       	sbrs	r24, 1
 694:	bf c1       	rjmp	.+894    	; 0xa14 <vfprintf+0x3c4>
 696:	ce 01       	movw	r24, r28
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	3c 01       	movw	r6, r24
 69c:	f6 01       	movw	r30, r12
 69e:	93 81       	ldd	r25, Z+3	; 0x03
 6a0:	f7 01       	movw	r30, r14
 6a2:	93 fd       	sbrc	r25, 3
 6a4:	85 91       	lpm	r24, Z+
 6a6:	93 ff       	sbrs	r25, 3
 6a8:	81 91       	ld	r24, Z+
 6aa:	7f 01       	movw	r14, r30
 6ac:	88 23       	and	r24, r24
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <vfprintf+0x62>
 6b0:	ad c1       	rjmp	.+858    	; 0xa0c <vfprintf+0x3bc>
 6b2:	85 32       	cpi	r24, 0x25	; 37
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <vfprintf+0x74>
 6b6:	93 fd       	sbrc	r25, 3
 6b8:	85 91       	lpm	r24, Z+
 6ba:	93 ff       	sbrs	r25, 3
 6bc:	81 91       	ld	r24, Z+
 6be:	7f 01       	movw	r14, r30
 6c0:	85 32       	cpi	r24, 0x25	; 37
 6c2:	21 f4       	brne	.+8      	; 0x6cc <vfprintf+0x7c>
 6c4:	b6 01       	movw	r22, r12
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	d6 d1       	rcall	.+940    	; 0xa76 <fputc>
 6ca:	e8 cf       	rjmp	.-48     	; 0x69c <vfprintf+0x4c>
 6cc:	91 2c       	mov	r9, r1
 6ce:	21 2c       	mov	r2, r1
 6d0:	31 2c       	mov	r3, r1
 6d2:	ff e1       	ldi	r31, 0x1F	; 31
 6d4:	f3 15       	cp	r31, r3
 6d6:	d8 f0       	brcs	.+54     	; 0x70e <vfprintf+0xbe>
 6d8:	8b 32       	cpi	r24, 0x2B	; 43
 6da:	79 f0       	breq	.+30     	; 0x6fa <vfprintf+0xaa>
 6dc:	38 f4       	brcc	.+14     	; 0x6ec <vfprintf+0x9c>
 6de:	80 32       	cpi	r24, 0x20	; 32
 6e0:	79 f0       	breq	.+30     	; 0x700 <vfprintf+0xb0>
 6e2:	83 32       	cpi	r24, 0x23	; 35
 6e4:	a1 f4       	brne	.+40     	; 0x70e <vfprintf+0xbe>
 6e6:	23 2d       	mov	r18, r3
 6e8:	20 61       	ori	r18, 0x10	; 16
 6ea:	1d c0       	rjmp	.+58     	; 0x726 <vfprintf+0xd6>
 6ec:	8d 32       	cpi	r24, 0x2D	; 45
 6ee:	61 f0       	breq	.+24     	; 0x708 <vfprintf+0xb8>
 6f0:	80 33       	cpi	r24, 0x30	; 48
 6f2:	69 f4       	brne	.+26     	; 0x70e <vfprintf+0xbe>
 6f4:	23 2d       	mov	r18, r3
 6f6:	21 60       	ori	r18, 0x01	; 1
 6f8:	16 c0       	rjmp	.+44     	; 0x726 <vfprintf+0xd6>
 6fa:	83 2d       	mov	r24, r3
 6fc:	82 60       	ori	r24, 0x02	; 2
 6fe:	38 2e       	mov	r3, r24
 700:	e3 2d       	mov	r30, r3
 702:	e4 60       	ori	r30, 0x04	; 4
 704:	3e 2e       	mov	r3, r30
 706:	2a c0       	rjmp	.+84     	; 0x75c <vfprintf+0x10c>
 708:	f3 2d       	mov	r31, r3
 70a:	f8 60       	ori	r31, 0x08	; 8
 70c:	1d c0       	rjmp	.+58     	; 0x748 <vfprintf+0xf8>
 70e:	37 fc       	sbrc	r3, 7
 710:	2d c0       	rjmp	.+90     	; 0x76c <vfprintf+0x11c>
 712:	20 ed       	ldi	r18, 0xD0	; 208
 714:	28 0f       	add	r18, r24
 716:	2a 30       	cpi	r18, 0x0A	; 10
 718:	40 f0       	brcs	.+16     	; 0x72a <vfprintf+0xda>
 71a:	8e 32       	cpi	r24, 0x2E	; 46
 71c:	b9 f4       	brne	.+46     	; 0x74c <vfprintf+0xfc>
 71e:	36 fc       	sbrc	r3, 6
 720:	75 c1       	rjmp	.+746    	; 0xa0c <vfprintf+0x3bc>
 722:	23 2d       	mov	r18, r3
 724:	20 64       	ori	r18, 0x40	; 64
 726:	32 2e       	mov	r3, r18
 728:	19 c0       	rjmp	.+50     	; 0x75c <vfprintf+0x10c>
 72a:	36 fe       	sbrs	r3, 6
 72c:	06 c0       	rjmp	.+12     	; 0x73a <vfprintf+0xea>
 72e:	8a e0       	ldi	r24, 0x0A	; 10
 730:	98 9e       	mul	r9, r24
 732:	20 0d       	add	r18, r0
 734:	11 24       	eor	r1, r1
 736:	92 2e       	mov	r9, r18
 738:	11 c0       	rjmp	.+34     	; 0x75c <vfprintf+0x10c>
 73a:	ea e0       	ldi	r30, 0x0A	; 10
 73c:	2e 9e       	mul	r2, r30
 73e:	20 0d       	add	r18, r0
 740:	11 24       	eor	r1, r1
 742:	22 2e       	mov	r2, r18
 744:	f3 2d       	mov	r31, r3
 746:	f0 62       	ori	r31, 0x20	; 32
 748:	3f 2e       	mov	r3, r31
 74a:	08 c0       	rjmp	.+16     	; 0x75c <vfprintf+0x10c>
 74c:	8c 36       	cpi	r24, 0x6C	; 108
 74e:	21 f4       	brne	.+8      	; 0x758 <vfprintf+0x108>
 750:	83 2d       	mov	r24, r3
 752:	80 68       	ori	r24, 0x80	; 128
 754:	38 2e       	mov	r3, r24
 756:	02 c0       	rjmp	.+4      	; 0x75c <vfprintf+0x10c>
 758:	88 36       	cpi	r24, 0x68	; 104
 75a:	41 f4       	brne	.+16     	; 0x76c <vfprintf+0x11c>
 75c:	f7 01       	movw	r30, r14
 75e:	93 fd       	sbrc	r25, 3
 760:	85 91       	lpm	r24, Z+
 762:	93 ff       	sbrs	r25, 3
 764:	81 91       	ld	r24, Z+
 766:	7f 01       	movw	r14, r30
 768:	81 11       	cpse	r24, r1
 76a:	b3 cf       	rjmp	.-154    	; 0x6d2 <vfprintf+0x82>
 76c:	98 2f       	mov	r25, r24
 76e:	9f 7d       	andi	r25, 0xDF	; 223
 770:	95 54       	subi	r25, 0x45	; 69
 772:	93 30       	cpi	r25, 0x03	; 3
 774:	28 f4       	brcc	.+10     	; 0x780 <vfprintf+0x130>
 776:	0c 5f       	subi	r16, 0xFC	; 252
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	9f e3       	ldi	r25, 0x3F	; 63
 77c:	99 83       	std	Y+1, r25	; 0x01
 77e:	0d c0       	rjmp	.+26     	; 0x79a <vfprintf+0x14a>
 780:	83 36       	cpi	r24, 0x63	; 99
 782:	31 f0       	breq	.+12     	; 0x790 <vfprintf+0x140>
 784:	83 37       	cpi	r24, 0x73	; 115
 786:	71 f0       	breq	.+28     	; 0x7a4 <vfprintf+0x154>
 788:	83 35       	cpi	r24, 0x53	; 83
 78a:	09 f0       	breq	.+2      	; 0x78e <vfprintf+0x13e>
 78c:	55 c0       	rjmp	.+170    	; 0x838 <vfprintf+0x1e8>
 78e:	20 c0       	rjmp	.+64     	; 0x7d0 <vfprintf+0x180>
 790:	f8 01       	movw	r30, r16
 792:	80 81       	ld	r24, Z
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	0e 5f       	subi	r16, 0xFE	; 254
 798:	1f 4f       	sbci	r17, 0xFF	; 255
 79a:	88 24       	eor	r8, r8
 79c:	83 94       	inc	r8
 79e:	91 2c       	mov	r9, r1
 7a0:	53 01       	movw	r10, r6
 7a2:	12 c0       	rjmp	.+36     	; 0x7c8 <vfprintf+0x178>
 7a4:	28 01       	movw	r4, r16
 7a6:	f2 e0       	ldi	r31, 0x02	; 2
 7a8:	4f 0e       	add	r4, r31
 7aa:	51 1c       	adc	r5, r1
 7ac:	f8 01       	movw	r30, r16
 7ae:	a0 80       	ld	r10, Z
 7b0:	b1 80       	ldd	r11, Z+1	; 0x01
 7b2:	36 fe       	sbrs	r3, 6
 7b4:	03 c0       	rjmp	.+6      	; 0x7bc <vfprintf+0x16c>
 7b6:	69 2d       	mov	r22, r9
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <vfprintf+0x170>
 7bc:	6f ef       	ldi	r22, 0xFF	; 255
 7be:	7f ef       	ldi	r23, 0xFF	; 255
 7c0:	c5 01       	movw	r24, r10
 7c2:	4e d1       	rcall	.+668    	; 0xa60 <strnlen>
 7c4:	4c 01       	movw	r8, r24
 7c6:	82 01       	movw	r16, r4
 7c8:	f3 2d       	mov	r31, r3
 7ca:	ff 77       	andi	r31, 0x7F	; 127
 7cc:	3f 2e       	mov	r3, r31
 7ce:	15 c0       	rjmp	.+42     	; 0x7fa <vfprintf+0x1aa>
 7d0:	28 01       	movw	r4, r16
 7d2:	22 e0       	ldi	r18, 0x02	; 2
 7d4:	42 0e       	add	r4, r18
 7d6:	51 1c       	adc	r5, r1
 7d8:	f8 01       	movw	r30, r16
 7da:	a0 80       	ld	r10, Z
 7dc:	b1 80       	ldd	r11, Z+1	; 0x01
 7de:	36 fe       	sbrs	r3, 6
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <vfprintf+0x198>
 7e2:	69 2d       	mov	r22, r9
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0x19c>
 7e8:	6f ef       	ldi	r22, 0xFF	; 255
 7ea:	7f ef       	ldi	r23, 0xFF	; 255
 7ec:	c5 01       	movw	r24, r10
 7ee:	2d d1       	rcall	.+602    	; 0xa4a <strnlen_P>
 7f0:	4c 01       	movw	r8, r24
 7f2:	f3 2d       	mov	r31, r3
 7f4:	f0 68       	ori	r31, 0x80	; 128
 7f6:	3f 2e       	mov	r3, r31
 7f8:	82 01       	movw	r16, r4
 7fa:	33 fc       	sbrc	r3, 3
 7fc:	19 c0       	rjmp	.+50     	; 0x830 <vfprintf+0x1e0>
 7fe:	82 2d       	mov	r24, r2
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	88 16       	cp	r8, r24
 804:	99 06       	cpc	r9, r25
 806:	a0 f4       	brcc	.+40     	; 0x830 <vfprintf+0x1e0>
 808:	b6 01       	movw	r22, r12
 80a:	80 e2       	ldi	r24, 0x20	; 32
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	33 d1       	rcall	.+614    	; 0xa76 <fputc>
 810:	2a 94       	dec	r2
 812:	f5 cf       	rjmp	.-22     	; 0x7fe <vfprintf+0x1ae>
 814:	f5 01       	movw	r30, r10
 816:	37 fc       	sbrc	r3, 7
 818:	85 91       	lpm	r24, Z+
 81a:	37 fe       	sbrs	r3, 7
 81c:	81 91       	ld	r24, Z+
 81e:	5f 01       	movw	r10, r30
 820:	b6 01       	movw	r22, r12
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	28 d1       	rcall	.+592    	; 0xa76 <fputc>
 826:	21 10       	cpse	r2, r1
 828:	2a 94       	dec	r2
 82a:	21 e0       	ldi	r18, 0x01	; 1
 82c:	82 1a       	sub	r8, r18
 82e:	91 08       	sbc	r9, r1
 830:	81 14       	cp	r8, r1
 832:	91 04       	cpc	r9, r1
 834:	79 f7       	brne	.-34     	; 0x814 <vfprintf+0x1c4>
 836:	e1 c0       	rjmp	.+450    	; 0x9fa <vfprintf+0x3aa>
 838:	84 36       	cpi	r24, 0x64	; 100
 83a:	11 f0       	breq	.+4      	; 0x840 <vfprintf+0x1f0>
 83c:	89 36       	cpi	r24, 0x69	; 105
 83e:	39 f5       	brne	.+78     	; 0x88e <vfprintf+0x23e>
 840:	f8 01       	movw	r30, r16
 842:	37 fe       	sbrs	r3, 7
 844:	07 c0       	rjmp	.+14     	; 0x854 <vfprintf+0x204>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	93 81       	ldd	r25, Z+3	; 0x03
 84e:	0c 5f       	subi	r16, 0xFC	; 252
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	08 c0       	rjmp	.+16     	; 0x864 <vfprintf+0x214>
 854:	60 81       	ld	r22, Z
 856:	71 81       	ldd	r23, Z+1	; 0x01
 858:	07 2e       	mov	r0, r23
 85a:	00 0c       	add	r0, r0
 85c:	88 0b       	sbc	r24, r24
 85e:	99 0b       	sbc	r25, r25
 860:	0e 5f       	subi	r16, 0xFE	; 254
 862:	1f 4f       	sbci	r17, 0xFF	; 255
 864:	f3 2d       	mov	r31, r3
 866:	ff 76       	andi	r31, 0x6F	; 111
 868:	3f 2e       	mov	r3, r31
 86a:	97 ff       	sbrs	r25, 7
 86c:	09 c0       	rjmp	.+18     	; 0x880 <vfprintf+0x230>
 86e:	90 95       	com	r25
 870:	80 95       	com	r24
 872:	70 95       	com	r23
 874:	61 95       	neg	r22
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	f0 68       	ori	r31, 0x80	; 128
 87e:	3f 2e       	mov	r3, r31
 880:	2a e0       	ldi	r18, 0x0A	; 10
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	a3 01       	movw	r20, r6
 886:	33 d1       	rcall	.+614    	; 0xaee <__ultoa_invert>
 888:	88 2e       	mov	r8, r24
 88a:	86 18       	sub	r8, r6
 88c:	44 c0       	rjmp	.+136    	; 0x916 <vfprintf+0x2c6>
 88e:	85 37       	cpi	r24, 0x75	; 117
 890:	31 f4       	brne	.+12     	; 0x89e <vfprintf+0x24e>
 892:	23 2d       	mov	r18, r3
 894:	2f 7e       	andi	r18, 0xEF	; 239
 896:	b2 2e       	mov	r11, r18
 898:	2a e0       	ldi	r18, 0x0A	; 10
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	25 c0       	rjmp	.+74     	; 0x8e8 <vfprintf+0x298>
 89e:	93 2d       	mov	r25, r3
 8a0:	99 7f       	andi	r25, 0xF9	; 249
 8a2:	b9 2e       	mov	r11, r25
 8a4:	8f 36       	cpi	r24, 0x6F	; 111
 8a6:	c1 f0       	breq	.+48     	; 0x8d8 <vfprintf+0x288>
 8a8:	18 f4       	brcc	.+6      	; 0x8b0 <vfprintf+0x260>
 8aa:	88 35       	cpi	r24, 0x58	; 88
 8ac:	79 f0       	breq	.+30     	; 0x8cc <vfprintf+0x27c>
 8ae:	ae c0       	rjmp	.+348    	; 0xa0c <vfprintf+0x3bc>
 8b0:	80 37       	cpi	r24, 0x70	; 112
 8b2:	19 f0       	breq	.+6      	; 0x8ba <vfprintf+0x26a>
 8b4:	88 37       	cpi	r24, 0x78	; 120
 8b6:	21 f0       	breq	.+8      	; 0x8c0 <vfprintf+0x270>
 8b8:	a9 c0       	rjmp	.+338    	; 0xa0c <vfprintf+0x3bc>
 8ba:	e9 2f       	mov	r30, r25
 8bc:	e0 61       	ori	r30, 0x10	; 16
 8be:	be 2e       	mov	r11, r30
 8c0:	b4 fe       	sbrs	r11, 4
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <vfprintf+0x28e>
 8c4:	fb 2d       	mov	r31, r11
 8c6:	f4 60       	ori	r31, 0x04	; 4
 8c8:	bf 2e       	mov	r11, r31
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <vfprintf+0x28e>
 8cc:	34 fe       	sbrs	r3, 4
 8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <vfprintf+0x294>
 8d0:	29 2f       	mov	r18, r25
 8d2:	26 60       	ori	r18, 0x06	; 6
 8d4:	b2 2e       	mov	r11, r18
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <vfprintf+0x294>
 8d8:	28 e0       	ldi	r18, 0x08	; 8
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <vfprintf+0x298>
 8de:	20 e1       	ldi	r18, 0x10	; 16
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x298>
 8e4:	20 e1       	ldi	r18, 0x10	; 16
 8e6:	32 e0       	ldi	r19, 0x02	; 2
 8e8:	f8 01       	movw	r30, r16
 8ea:	b7 fe       	sbrs	r11, 7
 8ec:	07 c0       	rjmp	.+14     	; 0x8fc <vfprintf+0x2ac>
 8ee:	60 81       	ld	r22, Z
 8f0:	71 81       	ldd	r23, Z+1	; 0x01
 8f2:	82 81       	ldd	r24, Z+2	; 0x02
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	0c 5f       	subi	r16, 0xFC	; 252
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <vfprintf+0x2b8>
 8fc:	60 81       	ld	r22, Z
 8fe:	71 81       	ldd	r23, Z+1	; 0x01
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 5f       	subi	r16, 0xFE	; 254
 906:	1f 4f       	sbci	r17, 0xFF	; 255
 908:	a3 01       	movw	r20, r6
 90a:	f1 d0       	rcall	.+482    	; 0xaee <__ultoa_invert>
 90c:	88 2e       	mov	r8, r24
 90e:	86 18       	sub	r8, r6
 910:	fb 2d       	mov	r31, r11
 912:	ff 77       	andi	r31, 0x7F	; 127
 914:	3f 2e       	mov	r3, r31
 916:	36 fe       	sbrs	r3, 6
 918:	0d c0       	rjmp	.+26     	; 0x934 <vfprintf+0x2e4>
 91a:	23 2d       	mov	r18, r3
 91c:	2e 7f       	andi	r18, 0xFE	; 254
 91e:	a2 2e       	mov	r10, r18
 920:	89 14       	cp	r8, r9
 922:	58 f4       	brcc	.+22     	; 0x93a <vfprintf+0x2ea>
 924:	34 fe       	sbrs	r3, 4
 926:	0b c0       	rjmp	.+22     	; 0x93e <vfprintf+0x2ee>
 928:	32 fc       	sbrc	r3, 2
 92a:	09 c0       	rjmp	.+18     	; 0x93e <vfprintf+0x2ee>
 92c:	83 2d       	mov	r24, r3
 92e:	8e 7e       	andi	r24, 0xEE	; 238
 930:	a8 2e       	mov	r10, r24
 932:	05 c0       	rjmp	.+10     	; 0x93e <vfprintf+0x2ee>
 934:	b8 2c       	mov	r11, r8
 936:	a3 2c       	mov	r10, r3
 938:	03 c0       	rjmp	.+6      	; 0x940 <vfprintf+0x2f0>
 93a:	b8 2c       	mov	r11, r8
 93c:	01 c0       	rjmp	.+2      	; 0x940 <vfprintf+0x2f0>
 93e:	b9 2c       	mov	r11, r9
 940:	a4 fe       	sbrs	r10, 4
 942:	0f c0       	rjmp	.+30     	; 0x962 <vfprintf+0x312>
 944:	fe 01       	movw	r30, r28
 946:	e8 0d       	add	r30, r8
 948:	f1 1d       	adc	r31, r1
 94a:	80 81       	ld	r24, Z
 94c:	80 33       	cpi	r24, 0x30	; 48
 94e:	21 f4       	brne	.+8      	; 0x958 <vfprintf+0x308>
 950:	9a 2d       	mov	r25, r10
 952:	99 7e       	andi	r25, 0xE9	; 233
 954:	a9 2e       	mov	r10, r25
 956:	09 c0       	rjmp	.+18     	; 0x96a <vfprintf+0x31a>
 958:	a2 fe       	sbrs	r10, 2
 95a:	06 c0       	rjmp	.+12     	; 0x968 <vfprintf+0x318>
 95c:	b3 94       	inc	r11
 95e:	b3 94       	inc	r11
 960:	04 c0       	rjmp	.+8      	; 0x96a <vfprintf+0x31a>
 962:	8a 2d       	mov	r24, r10
 964:	86 78       	andi	r24, 0x86	; 134
 966:	09 f0       	breq	.+2      	; 0x96a <vfprintf+0x31a>
 968:	b3 94       	inc	r11
 96a:	a3 fc       	sbrc	r10, 3
 96c:	10 c0       	rjmp	.+32     	; 0x98e <vfprintf+0x33e>
 96e:	a0 fe       	sbrs	r10, 0
 970:	06 c0       	rjmp	.+12     	; 0x97e <vfprintf+0x32e>
 972:	b2 14       	cp	r11, r2
 974:	80 f4       	brcc	.+32     	; 0x996 <vfprintf+0x346>
 976:	28 0c       	add	r2, r8
 978:	92 2c       	mov	r9, r2
 97a:	9b 18       	sub	r9, r11
 97c:	0d c0       	rjmp	.+26     	; 0x998 <vfprintf+0x348>
 97e:	b2 14       	cp	r11, r2
 980:	58 f4       	brcc	.+22     	; 0x998 <vfprintf+0x348>
 982:	b6 01       	movw	r22, r12
 984:	80 e2       	ldi	r24, 0x20	; 32
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	76 d0       	rcall	.+236    	; 0xa76 <fputc>
 98a:	b3 94       	inc	r11
 98c:	f8 cf       	rjmp	.-16     	; 0x97e <vfprintf+0x32e>
 98e:	b2 14       	cp	r11, r2
 990:	18 f4       	brcc	.+6      	; 0x998 <vfprintf+0x348>
 992:	2b 18       	sub	r2, r11
 994:	02 c0       	rjmp	.+4      	; 0x99a <vfprintf+0x34a>
 996:	98 2c       	mov	r9, r8
 998:	21 2c       	mov	r2, r1
 99a:	a4 fe       	sbrs	r10, 4
 99c:	0f c0       	rjmp	.+30     	; 0x9bc <vfprintf+0x36c>
 99e:	b6 01       	movw	r22, r12
 9a0:	80 e3       	ldi	r24, 0x30	; 48
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	68 d0       	rcall	.+208    	; 0xa76 <fputc>
 9a6:	a2 fe       	sbrs	r10, 2
 9a8:	16 c0       	rjmp	.+44     	; 0x9d6 <vfprintf+0x386>
 9aa:	a1 fc       	sbrc	r10, 1
 9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <vfprintf+0x364>
 9ae:	88 e7       	ldi	r24, 0x78	; 120
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x368>
 9b4:	88 e5       	ldi	r24, 0x58	; 88
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	b6 01       	movw	r22, r12
 9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <vfprintf+0x384>
 9bc:	8a 2d       	mov	r24, r10
 9be:	86 78       	andi	r24, 0x86	; 134
 9c0:	51 f0       	breq	.+20     	; 0x9d6 <vfprintf+0x386>
 9c2:	a1 fe       	sbrs	r10, 1
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <vfprintf+0x37a>
 9c6:	8b e2       	ldi	r24, 0x2B	; 43
 9c8:	01 c0       	rjmp	.+2      	; 0x9cc <vfprintf+0x37c>
 9ca:	80 e2       	ldi	r24, 0x20	; 32
 9cc:	a7 fc       	sbrc	r10, 7
 9ce:	8d e2       	ldi	r24, 0x2D	; 45
 9d0:	b6 01       	movw	r22, r12
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	50 d0       	rcall	.+160    	; 0xa76 <fputc>
 9d6:	89 14       	cp	r8, r9
 9d8:	30 f4       	brcc	.+12     	; 0x9e6 <vfprintf+0x396>
 9da:	b6 01       	movw	r22, r12
 9dc:	80 e3       	ldi	r24, 0x30	; 48
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	4a d0       	rcall	.+148    	; 0xa76 <fputc>
 9e2:	9a 94       	dec	r9
 9e4:	f8 cf       	rjmp	.-16     	; 0x9d6 <vfprintf+0x386>
 9e6:	8a 94       	dec	r8
 9e8:	f3 01       	movw	r30, r6
 9ea:	e8 0d       	add	r30, r8
 9ec:	f1 1d       	adc	r31, r1
 9ee:	80 81       	ld	r24, Z
 9f0:	b6 01       	movw	r22, r12
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	40 d0       	rcall	.+128    	; 0xa76 <fputc>
 9f6:	81 10       	cpse	r8, r1
 9f8:	f6 cf       	rjmp	.-20     	; 0x9e6 <vfprintf+0x396>
 9fa:	22 20       	and	r2, r2
 9fc:	09 f4       	brne	.+2      	; 0xa00 <vfprintf+0x3b0>
 9fe:	4e ce       	rjmp	.-868    	; 0x69c <vfprintf+0x4c>
 a00:	b6 01       	movw	r22, r12
 a02:	80 e2       	ldi	r24, 0x20	; 32
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	37 d0       	rcall	.+110    	; 0xa76 <fputc>
 a08:	2a 94       	dec	r2
 a0a:	f7 cf       	rjmp	.-18     	; 0x9fa <vfprintf+0x3aa>
 a0c:	f6 01       	movw	r30, r12
 a0e:	86 81       	ldd	r24, Z+6	; 0x06
 a10:	97 81       	ldd	r25, Z+7	; 0x07
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <vfprintf+0x3c8>
 a14:	8f ef       	ldi	r24, 0xFF	; 255
 a16:	9f ef       	ldi	r25, 0xFF	; 255
 a18:	2b 96       	adiw	r28, 0x0b	; 11
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	f8 94       	cli
 a1e:	de bf       	out	0x3e, r29	; 62
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	cd bf       	out	0x3d, r28	; 61
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	ff 90       	pop	r15
 a2e:	ef 90       	pop	r14
 a30:	df 90       	pop	r13
 a32:	cf 90       	pop	r12
 a34:	bf 90       	pop	r11
 a36:	af 90       	pop	r10
 a38:	9f 90       	pop	r9
 a3a:	8f 90       	pop	r8
 a3c:	7f 90       	pop	r7
 a3e:	6f 90       	pop	r6
 a40:	5f 90       	pop	r5
 a42:	4f 90       	pop	r4
 a44:	3f 90       	pop	r3
 a46:	2f 90       	pop	r2
 a48:	08 95       	ret

00000a4a <strnlen_P>:
 a4a:	fc 01       	movw	r30, r24
 a4c:	05 90       	lpm	r0, Z+
 a4e:	61 50       	subi	r22, 0x01	; 1
 a50:	70 40       	sbci	r23, 0x00	; 0
 a52:	01 10       	cpse	r0, r1
 a54:	d8 f7       	brcc	.-10     	; 0xa4c <strnlen_P+0x2>
 a56:	80 95       	com	r24
 a58:	90 95       	com	r25
 a5a:	8e 0f       	add	r24, r30
 a5c:	9f 1f       	adc	r25, r31
 a5e:	08 95       	ret

00000a60 <strnlen>:
 a60:	fc 01       	movw	r30, r24
 a62:	61 50       	subi	r22, 0x01	; 1
 a64:	70 40       	sbci	r23, 0x00	; 0
 a66:	01 90       	ld	r0, Z+
 a68:	01 10       	cpse	r0, r1
 a6a:	d8 f7       	brcc	.-10     	; 0xa62 <strnlen+0x2>
 a6c:	80 95       	com	r24
 a6e:	90 95       	com	r25
 a70:	8e 0f       	add	r24, r30
 a72:	9f 1f       	adc	r25, r31
 a74:	08 95       	ret

00000a76 <fputc>:
 a76:	0f 93       	push	r16
 a78:	1f 93       	push	r17
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	fb 01       	movw	r30, r22
 a80:	23 81       	ldd	r18, Z+3	; 0x03
 a82:	21 fd       	sbrc	r18, 1
 a84:	03 c0       	rjmp	.+6      	; 0xa8c <fputc+0x16>
 a86:	8f ef       	ldi	r24, 0xFF	; 255
 a88:	9f ef       	ldi	r25, 0xFF	; 255
 a8a:	2c c0       	rjmp	.+88     	; 0xae4 <fputc+0x6e>
 a8c:	22 ff       	sbrs	r18, 2
 a8e:	16 c0       	rjmp	.+44     	; 0xabc <fputc+0x46>
 a90:	46 81       	ldd	r20, Z+6	; 0x06
 a92:	57 81       	ldd	r21, Z+7	; 0x07
 a94:	24 81       	ldd	r18, Z+4	; 0x04
 a96:	35 81       	ldd	r19, Z+5	; 0x05
 a98:	42 17       	cp	r20, r18
 a9a:	53 07       	cpc	r21, r19
 a9c:	44 f4       	brge	.+16     	; 0xaae <fputc+0x38>
 a9e:	a0 81       	ld	r26, Z
 aa0:	b1 81       	ldd	r27, Z+1	; 0x01
 aa2:	9d 01       	movw	r18, r26
 aa4:	2f 5f       	subi	r18, 0xFF	; 255
 aa6:	3f 4f       	sbci	r19, 0xFF	; 255
 aa8:	31 83       	std	Z+1, r19	; 0x01
 aaa:	20 83       	st	Z, r18
 aac:	8c 93       	st	X, r24
 aae:	26 81       	ldd	r18, Z+6	; 0x06
 ab0:	37 81       	ldd	r19, Z+7	; 0x07
 ab2:	2f 5f       	subi	r18, 0xFF	; 255
 ab4:	3f 4f       	sbci	r19, 0xFF	; 255
 ab6:	37 83       	std	Z+7, r19	; 0x07
 ab8:	26 83       	std	Z+6, r18	; 0x06
 aba:	14 c0       	rjmp	.+40     	; 0xae4 <fputc+0x6e>
 abc:	8b 01       	movw	r16, r22
 abe:	ec 01       	movw	r28, r24
 ac0:	fb 01       	movw	r30, r22
 ac2:	00 84       	ldd	r0, Z+8	; 0x08
 ac4:	f1 85       	ldd	r31, Z+9	; 0x09
 ac6:	e0 2d       	mov	r30, r0
 ac8:	09 95       	icall
 aca:	89 2b       	or	r24, r25
 acc:	e1 f6       	brne	.-72     	; 0xa86 <fputc+0x10>
 ace:	d8 01       	movw	r26, r16
 ad0:	16 96       	adiw	r26, 0x06	; 6
 ad2:	8d 91       	ld	r24, X+
 ad4:	9c 91       	ld	r25, X
 ad6:	17 97       	sbiw	r26, 0x07	; 7
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	17 96       	adiw	r26, 0x07	; 7
 adc:	9c 93       	st	X, r25
 ade:	8e 93       	st	-X, r24
 ae0:	16 97       	sbiw	r26, 0x06	; 6
 ae2:	ce 01       	movw	r24, r28
 ae4:	df 91       	pop	r29
 ae6:	cf 91       	pop	r28
 ae8:	1f 91       	pop	r17
 aea:	0f 91       	pop	r16
 aec:	08 95       	ret

00000aee <__ultoa_invert>:
 aee:	fa 01       	movw	r30, r20
 af0:	aa 27       	eor	r26, r26
 af2:	28 30       	cpi	r18, 0x08	; 8
 af4:	51 f1       	breq	.+84     	; 0xb4a <__ultoa_invert+0x5c>
 af6:	20 31       	cpi	r18, 0x10	; 16
 af8:	81 f1       	breq	.+96     	; 0xb5a <__ultoa_invert+0x6c>
 afa:	e8 94       	clt
 afc:	6f 93       	push	r22
 afe:	6e 7f       	andi	r22, 0xFE	; 254
 b00:	6e 5f       	subi	r22, 0xFE	; 254
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f 4f       	sbci	r24, 0xFF	; 255
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	af 4f       	sbci	r26, 0xFF	; 255
 b0a:	b1 e0       	ldi	r27, 0x01	; 1
 b0c:	3e d0       	rcall	.+124    	; 0xb8a <__ultoa_invert+0x9c>
 b0e:	b4 e0       	ldi	r27, 0x04	; 4
 b10:	3c d0       	rcall	.+120    	; 0xb8a <__ultoa_invert+0x9c>
 b12:	67 0f       	add	r22, r23
 b14:	78 1f       	adc	r23, r24
 b16:	89 1f       	adc	r24, r25
 b18:	9a 1f       	adc	r25, r26
 b1a:	a1 1d       	adc	r26, r1
 b1c:	68 0f       	add	r22, r24
 b1e:	79 1f       	adc	r23, r25
 b20:	8a 1f       	adc	r24, r26
 b22:	91 1d       	adc	r25, r1
 b24:	a1 1d       	adc	r26, r1
 b26:	6a 0f       	add	r22, r26
 b28:	71 1d       	adc	r23, r1
 b2a:	81 1d       	adc	r24, r1
 b2c:	91 1d       	adc	r25, r1
 b2e:	a1 1d       	adc	r26, r1
 b30:	20 d0       	rcall	.+64     	; 0xb72 <__ultoa_invert+0x84>
 b32:	09 f4       	brne	.+2      	; 0xb36 <__ultoa_invert+0x48>
 b34:	68 94       	set
 b36:	3f 91       	pop	r19
 b38:	2a e0       	ldi	r18, 0x0A	; 10
 b3a:	26 9f       	mul	r18, r22
 b3c:	11 24       	eor	r1, r1
 b3e:	30 19       	sub	r19, r0
 b40:	30 5d       	subi	r19, 0xD0	; 208
 b42:	31 93       	st	Z+, r19
 b44:	de f6       	brtc	.-74     	; 0xafc <__ultoa_invert+0xe>
 b46:	cf 01       	movw	r24, r30
 b48:	08 95       	ret
 b4a:	46 2f       	mov	r20, r22
 b4c:	47 70       	andi	r20, 0x07	; 7
 b4e:	40 5d       	subi	r20, 0xD0	; 208
 b50:	41 93       	st	Z+, r20
 b52:	b3 e0       	ldi	r27, 0x03	; 3
 b54:	0f d0       	rcall	.+30     	; 0xb74 <__ultoa_invert+0x86>
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__ultoa_invert+0x5c>
 b58:	f6 cf       	rjmp	.-20     	; 0xb46 <__ultoa_invert+0x58>
 b5a:	46 2f       	mov	r20, r22
 b5c:	4f 70       	andi	r20, 0x0F	; 15
 b5e:	40 5d       	subi	r20, 0xD0	; 208
 b60:	4a 33       	cpi	r20, 0x3A	; 58
 b62:	18 f0       	brcs	.+6      	; 0xb6a <__ultoa_invert+0x7c>
 b64:	49 5d       	subi	r20, 0xD9	; 217
 b66:	31 fd       	sbrc	r19, 1
 b68:	40 52       	subi	r20, 0x20	; 32
 b6a:	41 93       	st	Z+, r20
 b6c:	02 d0       	rcall	.+4      	; 0xb72 <__ultoa_invert+0x84>
 b6e:	a9 f7       	brne	.-22     	; 0xb5a <__ultoa_invert+0x6c>
 b70:	ea cf       	rjmp	.-44     	; 0xb46 <__ultoa_invert+0x58>
 b72:	b4 e0       	ldi	r27, 0x04	; 4
 b74:	a6 95       	lsr	r26
 b76:	97 95       	ror	r25
 b78:	87 95       	ror	r24
 b7a:	77 95       	ror	r23
 b7c:	67 95       	ror	r22
 b7e:	ba 95       	dec	r27
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__ultoa_invert+0x86>
 b82:	00 97       	sbiw	r24, 0x00	; 0
 b84:	61 05       	cpc	r22, r1
 b86:	71 05       	cpc	r23, r1
 b88:	08 95       	ret
 b8a:	9b 01       	movw	r18, r22
 b8c:	ac 01       	movw	r20, r24
 b8e:	0a 2e       	mov	r0, r26
 b90:	06 94       	lsr	r0
 b92:	57 95       	ror	r21
 b94:	47 95       	ror	r20
 b96:	37 95       	ror	r19
 b98:	27 95       	ror	r18
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0xa2>
 b9e:	62 0f       	add	r22, r18
 ba0:	73 1f       	adc	r23, r19
 ba2:	84 1f       	adc	r24, r20
 ba4:	95 1f       	adc	r25, r21
 ba6:	a0 1d       	adc	r26, r0
 ba8:	08 95       	ret

00000baa <_exit>:
 baa:	f8 94       	cli

00000bac <__stop_program>:
 bac:	ff cf       	rjmp	.-2      	; 0xbac <__stop_program>
