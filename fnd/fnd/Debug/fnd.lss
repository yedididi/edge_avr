
fnd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080010a  0080010a  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140f  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d96  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae2  00000000  00000000  00002981  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00003464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000677  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000418  00000000  00000000  00003d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	26 d2       	rcall	.+1100   	; 0x510 <main>
  c4:	5a c2       	rjmp	.+1204   	; 0x57a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
﻿#include "stopwatch.h"

//어떤 조건에 의한 ISR인지 명시해야함
ISR(TIMER0_OVF_vect) //timer overflow에 대한 ISR이라는 뜻
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	FND_ISR_Process();
  ee:	0a d2       	rcall	.+1044   	; 0x504 <FND_ISR_Process>
	TCNT0 = 130; //이 설정을 줬으니까 1ms 주기마다 인터럽트 발생
  f0:	82 e8       	ldi	r24, 0x82	; 130
	incTick();
  f2:	82 bf       	out	0x32, r24	; 50
  f4:	b4 d0       	rcall	.+360    	; 0x25e <incTick>
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0b be       	out	0x3b, r0	; 59
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <stopwatch_init>:

void stopwatch_init()
{
	FND_init();
 11c:	f6 d0       	rcall	.+492    	; 0x30a <FND_init>
	counter = 0;
 11e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <counter+0x1>
 122:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <counter>
	stopwatchState = STOP;
 126:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <stopwatchState>
	//timetick = 0;
	prevtime = 0;
 12a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <prevtime>
 12e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prevtime+0x1>
 132:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <prevtime+0x2>
 136:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prevtime+0x3>
	
	initTIM0();
 13a:	07 d2       	rcall	.+1038   	; 0x54a <initTIM0>
	//global interrupt enable 설정
	sei();
 13c:	78 94       	sei
	
	Button_init(&runStopBtn, &DDRA, &PINA, 0);
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	49 e3       	ldi	r20, 0x39	; 57
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	6a e3       	ldi	r22, 0x3A	; 58
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	81 e1       	ldi	r24, 0x11	; 17
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	a5 d0       	rcall	.+330    	; 0x298 <Button_init>
	Button_init(&initBtn, &DDRA, &PINA, 1);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	49 e3       	ldi	r20, 0x39	; 57
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	6a e3       	ldi	r22, 0x3A	; 58
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	8b e1       	ldi	r24, 0x1B	; 27
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	9d c0       	rjmp	.+314    	; 0x298 <Button_init>
 15e:	08 95       	ret

00000160 <stopwatch_execute>:
}

void stopwatch_execute()
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
	if (Button_GetState(&runStopBtn) == ACT_RELEASED)
 164:	81 e1       	ldi	r24, 0x11	; 17
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	a4 d0       	rcall	.+328    	; 0x2b2 <Button_GetState>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	71 f4       	brne	.+28     	; 0x18a <stopwatch_execute+0x2a>
		stopwatchState = (stopwatchState + 1) % 2;
 16e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <stopwatchState>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	81 70       	andi	r24, 0x01	; 1
 178:	90 78       	andi	r25, 0x80	; 128
 17a:	99 23       	and	r25, r25
 17c:	24 f4       	brge	.+8      	; 0x186 <stopwatch_execute+0x26>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	8e 6f       	ori	r24, 0xFE	; 254
 182:	9f 6f       	ori	r25, 0xFF	; 255
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <stopwatchState>
	if (Button_GetState(&initBtn) == ACT_RELEASED)
 18a:	8b e1       	ldi	r24, 0x1B	; 27
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	91 d0       	rcall	.+290    	; 0x2b2 <Button_GetState>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	49 f4       	brne	.+18     	; 0x1a6 <stopwatch_execute+0x46>
	{
		stopwatchState = STOP;
 194:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <stopwatchState>
		counter = 0;
 198:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <counter+0x1>
 19c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <counter>
		FND_setfndData(counter);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	aa d1       	rcall	.+852    	; 0x4fa <FND_setfndData>
	}
	
	switch (stopwatchState)
 1a6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <stopwatchState>
 1aa:	88 23       	and	r24, r24
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <stopwatch_execute+0x54>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	c1 f0       	breq	.+48     	; 0x1e2 <stopwatch_execute+0x82>
	{
		case STOP:
		if (Button_GetState(&runStopBtn) == ACT_RELEASED)
 1b2:	1e c0       	rjmp	.+60     	; 0x1f0 <stopwatch_execute+0x90>
 1b4:	81 e1       	ldi	r24, 0x11	; 17
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	7c d0       	rcall	.+248    	; 0x2b2 <Button_GetState>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <stopwatch_execute+0x64>
			stopwatchState = RUN;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <stopwatchState>
		if (Button_GetState(&initBtn) == ACT_RELEASED)
 1c4:	8b e1       	ldi	r24, 0x1B	; 27
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	74 d0       	rcall	.+232    	; 0x2b2 <Button_GetState>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	89 f4       	brne	.+34     	; 0x1f0 <stopwatch_execute+0x90>
		{
			stopwatchState = STOP;
 1ce:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <stopwatchState>
			counter = 0;
 1d2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <counter+0x1>
 1d6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <counter>
			FND_setfndData(counter);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	8d d1       	rcall	.+794    	; 0x4fa <FND_setfndData>
		}
		break;
		
		case RUN:
		if (Button_GetState(&runStopBtn) == ACT_RELEASED)
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <stopwatch_execute+0x90>
 1e2:	81 e1       	ldi	r24, 0x11	; 17
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	65 d0       	rcall	.+202    	; 0x2b2 <Button_GetState>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	11 f4       	brne	.+4      	; 0x1f0 <stopwatch_execute+0x90>
			stopwatchState = STOP;
 1ec:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <stopwatchState>
		break;
	}
	
	switch (stopwatchState)
 1f0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <stopwatchState>
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <stopwatch_execute+0x9e>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	39 f0       	breq	.+14     	; 0x20a <stopwatch_execute+0xaa>
	{
		case STOP:
		FND_setfndData(counter);
 1fc:	2d c0       	rjmp	.+90     	; 0x258 <stopwatch_execute+0xf8>
 1fe:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <counter>
 202:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <counter+0x1>
 206:	79 d1       	rcall	.+754    	; 0x4fa <FND_setfndData>
		break;
 208:	27 c0       	rjmp	.+78     	; 0x258 <stopwatch_execute+0xf8>
		
		case RUN:
		//FND_setfndData(counter++);
		if (getTick() - prevtime >= 1000)
 20a:	3d d0       	rcall	.+122    	; 0x286 <getTick>
 20c:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <prevtime>
 210:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <prevtime+0x1>
 214:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <prevtime+0x2>
 218:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <prevtime+0x3>
 21c:	dc 01       	movw	r26, r24
 21e:	cb 01       	movw	r24, r22
 220:	80 1b       	sub	r24, r16
 222:	91 0b       	sbc	r25, r17
 224:	a2 0b       	sbc	r26, r18
 226:	b3 0b       	sbc	r27, r19
 228:	88 3e       	cpi	r24, 0xE8	; 232
 22a:	93 40       	sbci	r25, 0x03	; 3
 22c:	a1 05       	cpc	r26, r1
 22e:	b1 05       	cpc	r27, r1
 230:	98 f0       	brcs	.+38     	; 0x258 <stopwatch_execute+0xf8>
		{
			prevtime = getTick();
 232:	29 d0       	rcall	.+82     	; 0x286 <getTick>
 234:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <prevtime>
 238:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <prevtime+0x1>
 23c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <prevtime+0x2>
 240:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <prevtime+0x3>
			FND_setfndData(++counter);
 244:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <counter>
 248:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <counter+0x1>
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <counter+0x1>
 252:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <counter>
 256:	51 d1       	rcall	.+674    	; 0x4fa <FND_setfndData>
 258:	1f 91       	pop	r17
		}
		//_delay_ms(1000);
		break;
	}
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <incTick>:
 25e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
	timeTick++;
}

void initTick()
{
	timeTick = 0;
 262:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 266:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 26a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	a1 1d       	adc	r26, r1
 272:	b1 1d       	adc	r27, r1
 274:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 278:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 27c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 280:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 284:	08 95       	ret

00000286 <getTick>:
}

uint32_t getTick()
{
	return (timeTick);
 286:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 28a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 28e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 292:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
}
 296:	08 95       	ret

00000298 <Button_init>:
﻿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 298:	fc 01       	movw	r30, r24
 29a:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;		// 포변일때는 -> 사용
 29c:	71 83       	std	Z+1, r23	; 0x01
 29e:	60 83       	st	Z, r22
	btn ->PIN = pin;
 2a0:	53 83       	std	Z+3, r21	; 0x03
 2a2:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 2a4:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 2a6:	31 e0       	ldi	r19, 0x01	; 1
 2a8:	35 83       	std	Z+5, r19	; 0x05
	//*btn ->DDR &= (1 << btn -> pinNum);
	GPIO_initPin(btn->DDR, INPUT, btn->pinNum);
 2aa:	42 2f       	mov	r20, r18
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	33 c1       	rjmp	.+614    	; 0x516 <GPIO_initPin>
 2b0:	08 95       	ret

000002b2 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn 주소 유효범위 button_t
{
 2b2:	fc 01       	movw	r30, r24
	uint8_t curState = *btn->PIN & (1 << btn->pinNum);
 2b4:	a2 81       	ldd	r26, Z+2	; 0x02
 2b6:	b3 81       	ldd	r27, Z+3	; 0x03
 2b8:	8c 91       	ld	r24, X
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	04 80       	ldd	r0, Z+4	; 0x04
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Button_GetState+0x14>
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Button_GetState+0x10>
 2ca:	28 23       	and	r18, r24
	//uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum);
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 2cc:	59 f4       	brne	.+22     	; 0x2e4 <Button_GetState+0x32>
 2ce:	85 81       	ldd	r24, Z+5	; 0x05
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	41 f4       	brne	.+16     	; 0x2e4 <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	af e3       	ldi	r26, 0x3F	; 63
 2d6:	bc e9       	ldi	r27, 0x9C	; 156
 2d8:	11 97       	sbiw	r26, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <Button_GetState+0x26>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <Button_GetState+0x2c>
 2de:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 2e0:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 2e2:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 2e4:	22 23       	and	r18, r18
 2e6:	69 f0       	breq	.+26     	; 0x302 <Button_GetState+0x50>
 2e8:	85 81       	ldd	r24, Z+5	; 0x05
 2ea:	81 11       	cpse	r24, r1
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <Button_GetState+0x54>
 2ee:	8f e3       	ldi	r24, 0x3F	; 63
 2f0:	9c e9       	ldi	r25, 0x9C	; 156
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Button_GetState+0x40>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Button_GetState+0x46>
 2f8:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;	
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	08 95       	ret
	}
	return ACT_NONE;
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
 306:	80 e0       	ldi	r24, 0x00	; 0
}
 308:	08 95       	ret

0000030a <FND_init>:

uint16_t data = 0;

void FND_init()
{
	FND_NUM_DDR = 0xff;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_DIGIT_DDR = 0xff;
 310:	82 b9       	out	0x02, r24	; 2
 312:	08 95       	ret

00000314 <showNum>:
}

void showNum(uint16_t num)
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	2a 97       	sbiw	r28, 0x0a	; 10
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	ac 01       	movw	r20, r24
	uint8_t fndFont[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	e0 e0       	ldi	r30, 0x00	; 0
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	de 01       	movw	r26, r28
 332:	11 96       	adiw	r26, 0x01	; 1
 334:	01 90       	ld	r0, Z+
 336:	0d 92       	st	X+, r0
 338:	8a 95       	dec	r24
 33a:	e1 f7       	brne	.-8      	; 0x334 <showNum+0x20>
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 4;
 33c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <fndDigitState.1741>
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	83 70       	andi	r24, 0x03	; 3
 346:	90 78       	andi	r25, 0x80	; 128
 348:	99 23       	and	r25, r25
 34a:	24 f4       	brge	.+8      	; 0x354 <showNum+0x40>
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	8c 6f       	ori	r24, 0xFC	; 252
 350:	9f 6f       	ori	r25, 0xFF	; 255
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <fndDigitState.1741>
	
	FND_DIGIT_PORT |= (1<<FND_DIGIT_4) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_1); //숫자 찍기 전에 불 다 끄기 (커먼핀 다 1로 설정)
 358:	83 b1       	in	r24, 0x03	; 3
 35a:	80 6f       	ori	r24, 0xF0	; 240
 35c:	83 b9       	out	0x03, r24	; 3
	switch (fndDigitState)
 35e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <fndDigitState.1741>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	09 f4       	brne	.+2      	; 0x368 <showNum+0x54>
 366:	3e c0       	rjmp	.+124    	; 0x3e4 <showNum+0xd0>
 368:	38 f0       	brcs	.+14     	; 0x378 <showNum+0x64>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	09 f4       	brne	.+2      	; 0x370 <showNum+0x5c>
 36e:	6a c0       	rjmp	.+212    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	09 f4       	brne	.+2      	; 0x376 <showNum+0x62>
 374:	95 c0       	rjmp	.+298    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 376:	b8 c0       	rjmp	.+368    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
	{
		case 0:
		FND_NUM_PORT = fndFont[(num / 1000) % 10]; // number 1
 378:	9a 01       	movw	r18, r20
 37a:	36 95       	lsr	r19
 37c:	27 95       	ror	r18
 37e:	36 95       	lsr	r19
 380:	27 95       	ror	r18
 382:	36 95       	lsr	r19
 384:	27 95       	ror	r18
 386:	a5 ec       	ldi	r26, 0xC5	; 197
 388:	b0 e2       	ldi	r27, 0x20	; 32
 38a:	e8 d0       	rcall	.+464    	; 0x55c <__umulhisi3>
 38c:	ac 01       	movw	r20, r24
 38e:	52 95       	swap	r21
 390:	42 95       	swap	r20
 392:	4f 70       	andi	r20, 0x0F	; 15
 394:	45 27       	eor	r20, r21
 396:	5f 70       	andi	r21, 0x0F	; 15
 398:	45 27       	eor	r20, r21
 39a:	9a 01       	movw	r18, r20
 39c:	ad ec       	ldi	r26, 0xCD	; 205
 39e:	bc ec       	ldi	r27, 0xCC	; 204
 3a0:	dd d0       	rcall	.+442    	; 0x55c <__umulhisi3>
 3a2:	96 95       	lsr	r25
 3a4:	87 95       	ror	r24
 3a6:	96 95       	lsr	r25
 3a8:	87 95       	ror	r24
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	9c 01       	movw	r18, r24
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	82 0f       	add	r24, r18
 3c2:	93 1f       	adc	r25, r19
 3c4:	9a 01       	movw	r18, r20
 3c6:	28 1b       	sub	r18, r24
 3c8:	39 0b       	sbc	r19, r25
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ec 0f       	add	r30, r28
 3d0:	fd 1f       	adc	r31, r29
 3d2:	e2 0f       	add	r30, r18
 3d4:	f3 1f       	adc	r31, r19
 3d6:	80 81       	ld	r24, Z
 3d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_1); //천의자리선택
 3dc:	83 b1       	in	r24, 0x03	; 3
 3de:	8f 7e       	andi	r24, 0xEF	; 239
 3e0:	83 b9       	out	0x03, r24	; 3
		break;
 3e2:	82 c0       	rjmp	.+260    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		
		case 1:
		FND_NUM_PORT = fndFont[(num / 100) % 10]; // number 1
 3e4:	9a 01       	movw	r18, r20
 3e6:	36 95       	lsr	r19
 3e8:	27 95       	ror	r18
 3ea:	36 95       	lsr	r19
 3ec:	27 95       	ror	r18
 3ee:	ab e7       	ldi	r26, 0x7B	; 123
 3f0:	b4 e1       	ldi	r27, 0x14	; 20
 3f2:	b4 d0       	rcall	.+360    	; 0x55c <__umulhisi3>
 3f4:	ac 01       	movw	r20, r24
 3f6:	56 95       	lsr	r21
 3f8:	47 95       	ror	r20
 3fa:	9a 01       	movw	r18, r20
 3fc:	ad ec       	ldi	r26, 0xCD	; 205
 3fe:	bc ec       	ldi	r27, 0xCC	; 204
 400:	ad d0       	rcall	.+346    	; 0x55c <__umulhisi3>
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	9c 01       	movw	r18, r24
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	82 0f       	add	r24, r18
 422:	93 1f       	adc	r25, r19
 424:	9a 01       	movw	r18, r20
 426:	28 1b       	sub	r18, r24
 428:	39 0b       	sbc	r19, r25
 42a:	e1 e0       	ldi	r30, 0x01	; 1
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ec 0f       	add	r30, r28
 430:	fd 1f       	adc	r31, r29
 432:	e2 0f       	add	r30, r18
 434:	f3 1f       	adc	r31, r19
 436:	80 81       	ld	r24, Z
 438:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_2); //백의자리선택
 43c:	83 b1       	in	r24, 0x03	; 3
 43e:	8f 7d       	andi	r24, 0xDF	; 223
 440:	83 b9       	out	0x03, r24	; 3
		break;
		
		case 2:
		FND_NUM_PORT = fndFont[(num / 10) % 10]; // number 1
 442:	52 c0       	rjmp	.+164    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 444:	9a 01       	movw	r18, r20
 446:	ad ec       	ldi	r26, 0xCD	; 205
 448:	bc ec       	ldi	r27, 0xCC	; 204
 44a:	88 d0       	rcall	.+272    	; 0x55c <__umulhisi3>
 44c:	ac 01       	movw	r20, r24
 44e:	56 95       	lsr	r21
 450:	47 95       	ror	r20
 452:	56 95       	lsr	r21
 454:	47 95       	ror	r20
 456:	56 95       	lsr	r21
 458:	47 95       	ror	r20
 45a:	9a 01       	movw	r18, r20
 45c:	7f d0       	rcall	.+254    	; 0x55c <__umulhisi3>
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	9c 01       	movw	r18, r24
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	82 0f       	add	r24, r18
 47e:	93 1f       	adc	r25, r19
 480:	9a 01       	movw	r18, r20
 482:	28 1b       	sub	r18, r24
 484:	39 0b       	sbc	r19, r25
 486:	e1 e0       	ldi	r30, 0x01	; 1
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	ec 0f       	add	r30, r28
 48c:	fd 1f       	adc	r31, r29
 48e:	e2 0f       	add	r30, r18
 490:	f3 1f       	adc	r31, r19
 492:	80 81       	ld	r24, Z
 494:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_3); //십의자리선택
 498:	83 b1       	in	r24, 0x03	; 3
 49a:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 49c:	83 b9       	out	0x03, r24	; 3
		
		case 3:
		FND_NUM_PORT = fndFont[num % 10]; // number 1
 49e:	24 c0       	rjmp	.+72     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4a0:	9a 01       	movw	r18, r20
 4a2:	ad ec       	ldi	r26, 0xCD	; 205
 4a4:	bc ec       	ldi	r27, 0xCC	; 204
 4a6:	5a d0       	rcall	.+180    	; 0x55c <__umulhisi3>
 4a8:	96 95       	lsr	r25
 4aa:	87 95       	ror	r24
 4ac:	96 95       	lsr	r25
 4ae:	87 95       	ror	r24
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	9c 01       	movw	r18, r24
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	82 0f       	add	r24, r18
 4c8:	93 1f       	adc	r25, r19
 4ca:	9a 01       	movw	r18, r20
 4cc:	28 1b       	sub	r18, r24
 4ce:	39 0b       	sbc	r19, r25
 4d0:	e1 e0       	ldi	r30, 0x01	; 1
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	ec 0f       	add	r30, r28
 4d6:	fd 1f       	adc	r31, r29
 4d8:	e2 0f       	add	r30, r18
 4da:	f3 1f       	adc	r31, r19
 4dc:	80 81       	ld	r24, Z
 4de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_4); //일의자리선택
 4e2:	83 b1       	in	r24, 0x03	; 3
 4e4:	8f 77       	andi	r24, 0x7F	; 127
 4e6:	83 b9       	out	0x03, r24	; 3
		break;
	}
}
 4e8:	2a 96       	adiw	r28, 0x0a	; 10
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <FND_setfndData>:

void FND_setfndData(uint16_t mydata)
{
	data = mydata;
 4fa:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <data+0x1>
 4fe:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data>
 502:	08 95       	ret

00000504 <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	showNum(data);
 504:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data>
 508:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <data+0x1>
 50c:	03 cf       	rjmp	.-506    	; 0x314 <showNum>
 50e:	08 95       	ret

00000510 <main>:
#include "ap/stopwatch/stopwatch.h"

int main(void)
{
	stopwatch_init();
 510:	05 de       	rcall	.-1014   	; 0x11c <stopwatch_init>
	while (1)
	{
		stopwatch_execute();
 512:	26 de       	rcall	.-948    	; 0x160 <stopwatch_execute>
 514:	fe cf       	rjmp	.-4      	; 0x512 <main+0x2>

00000516 <GPIO_initPin>:
 516:	fc 01       	movw	r30, r24
}

//init - pin (1EA)
void GPIO_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum)
{
	if (dir == OUTPUT)
 518:	61 30       	cpi	r22, 0x01	; 1
 51a:	59 f4       	brne	.+22     	; 0x532 <GPIO_initPin+0x1c>
	*DDR |= (1 << pinNum); //no ~?
 51c:	20 81       	ld	r18, Z
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <GPIO_initPin+0x12>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	4a 95       	dec	r20
 52a:	e2 f7       	brpl	.-8      	; 0x524 <GPIO_initPin+0xe>
 52c:	82 2b       	or	r24, r18
 52e:	80 83       	st	Z, r24
 530:	08 95       	ret
	else
	*DDR &= ~(1 << pinNum);
 532:	90 81       	ld	r25, Z
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_initPin+0x28>
 53a:	22 0f       	add	r18, r18
 53c:	33 1f       	adc	r19, r19
 53e:	4a 95       	dec	r20
 540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_initPin+0x24>
 542:	20 95       	com	r18
 544:	29 23       	and	r18, r25
 546:	20 83       	st	Z, r18
 548:	08 95       	ret

0000054a <initTIM0>:

void initTIM0()
{
	//timer/counter0에 대한 overflow interrupt 설정
	//prescaler 1/1024로 설정하고 test > cs00 cs01, cs02 다 1로 설정해야 함
	TCCR0 |= (1<<CS02) | (0<<CS01) | (1<<CS00);
 54a:	83 b7       	in	r24, 0x33	; 51
 54c:	85 60       	ori	r24, 0x05	; 5
 54e:	83 bf       	out	0x33, r24	; 51
	//TIMSK timer overflow interrupt enable 설정
	TIMSK |= (1<<TOIE0);
 550:	87 b7       	in	r24, 0x37	; 55
 552:	81 60       	ori	r24, 0x01	; 1
 554:	87 bf       	out	0x37, r24	; 55
	
	TCNT0 = 130; //이 설정을 줬으니까 1ms 주기마다 인터럽트 발생
 556:	82 e8       	ldi	r24, 0x82	; 130
 558:	82 bf       	out	0x32, r24	; 50
 55a:	08 95       	ret

0000055c <__umulhisi3>:
 55c:	a2 9f       	mul	r26, r18
 55e:	b0 01       	movw	r22, r0
 560:	b3 9f       	mul	r27, r19
 562:	c0 01       	movw	r24, r0
 564:	a3 9f       	mul	r26, r19
 566:	70 0d       	add	r23, r0
 568:	81 1d       	adc	r24, r1
 56a:	11 24       	eor	r1, r1
 56c:	91 1d       	adc	r25, r1
 56e:	b2 9f       	mul	r27, r18
 570:	70 0d       	add	r23, r0
 572:	81 1d       	adc	r24, r1
 574:	11 24       	eor	r1, r1
 576:	91 1d       	adc	r25, r1
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
