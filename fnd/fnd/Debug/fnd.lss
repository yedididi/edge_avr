
fnd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000722  000007b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000722  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080010a  0080010a  000007c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000149a  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ddd  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf0  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00003808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b5  00000000  00000000  00003adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000556  00000000  00000000  00004191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000046e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	d2 c2       	rjmp	.+1444   	; 0x5ca <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9a c2       	rjmp	.+1332   	; 0x576 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 32       	cpi	r26, 0x29	; 41
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d2       	rcall	.+1366   	; 0x61a <main>
  c4:	2c c3       	rjmp	.+1624   	; 0x71e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <incMilisec>:
ï»¿#include "stopwatch.h"

void incMilisec()
{
	milisec = (milisec + 1) % 1000;
  c8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <milisec>
  cc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <milisec+0x1>
  d0:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <milisec+0x2>
  d4:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <milisec+0x3>
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	8f 4f       	sbci	r24, 0xFF	; 255
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	28 ee       	ldi	r18, 0xE8	; 232
  e6:	33 e0       	ldi	r19, 0x03	; 3
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	d3 d2       	rcall	.+1446   	; 0x694 <__udivmodsi4>
  ee:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <milisec>
  f2:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <milisec+0x1>
  f6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <milisec+0x2>
  fa:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <milisec+0x3>
	if (milisec) 
  fe:	67 2b       	or	r22, r23
 100:	68 2b       	or	r22, r24
 102:	69 2b       	or	r22, r25
 104:	f9 f4       	brne	.+62     	; 0x144 <incMilisec+0x7c>
		return;
	else
	{
		sec = (sec + 1) % 60;
 106:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <sec>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	6c e3       	ldi	r22, 0x3C	; 60
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	ad d2       	rcall	.+1370   	; 0x66e <__divmodhi4>
 114:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <sec>
		if (sec)
 118:	81 11       	cpse	r24, r1
 11a:	14 c0       	rjmp	.+40     	; 0x144 <incMilisec+0x7c>
			return;
		else
		{
			min = (min + 1) % 60;
 11c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <min>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	6c e3       	ldi	r22, 0x3C	; 60
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	a2 d2       	rcall	.+1348   	; 0x66e <__divmodhi4>
 12a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <min>
			if (min)
 12e:	81 11       	cpse	r24, r1
 130:	09 c0       	rjmp	.+18     	; 0x144 <incMilisec+0x7c>
				return ;
			else
				hour = (hour + 1) % 24;
 132:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <hour>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	68 e1       	ldi	r22, 0x18	; 24
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	97 d2       	rcall	.+1326   	; 0x66e <__divmodhi4>
 140:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <hour>
 144:	08 95       	ret

00000146 <stopwatch_init>:
	}
}

void stopwatch_init()
{
	FND_init();
 146:	14 d1       	rcall	.+552    	; 0x370 <FND_init>
	
	milisec = 0;
 148:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <milisec>
 14c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <milisec+0x1>
 150:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <milisec+0x2>
 154:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <milisec+0x3>
	sec = 0;
 158:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <sec>
	min = 0;
 15c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <min>
	hour = 0;
 160:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <hour>
	prevtime = 0;
 164:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <prevtime>
 168:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prevtime+0x1>
 16c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <prevtime+0x2>
 170:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prevtime+0x3>
	stopWatchState = RUN;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stopWatchState>
	
	//initTIM0();
	initTIM2();
 17a:	6d d2       	rcall	.+1242   	; 0x656 <initTIM2>
	Button_init(&runStopBtn, &DDRA, &PINA, 0);
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	49 e3       	ldi	r20, 0x39	; 57
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	6a e3       	ldi	r22, 0x3A	; 58
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	81 e1       	ldi	r24, 0x11	; 17
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	b9 d0       	rcall	.+370    	; 0x2fe <Button_init>
	Button_init(&initBtn, &DDRA, &PINA, 1);
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	49 e3       	ldi	r20, 0x39	; 57
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	6a e3       	ldi	r22, 0x3A	; 58
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	8b e1       	ldi	r24, 0x1B	; 27
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	b1 c0       	rjmp	.+354    	; 0x2fe <Button_init>
 19c:	08 95       	ret

0000019e <displayTime>:
}

void displayTime()
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
	uint16_t stopWatchData = 0;
	
	stopWatchData = (min % 10) * 1000;
 1a2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <min>
 1a6:	8d ec       	ldi	r24, 0xCD	; 205
 1a8:	98 9f       	mul	r25, r24
 1aa:	81 2d       	mov	r24, r1
 1ac:	11 24       	eor	r1, r1
 1ae:	86 95       	lsr	r24
 1b0:	86 95       	lsr	r24
 1b2:	86 95       	lsr	r24
 1b4:	88 0f       	add	r24, r24
 1b6:	28 2f       	mov	r18, r24
 1b8:	22 0f       	add	r18, r18
 1ba:	22 0f       	add	r18, r18
 1bc:	82 0f       	add	r24, r18
 1be:	98 1b       	sub	r25, r24
 1c0:	28 ee       	ldi	r18, 0xE8	; 232
 1c2:	33 e0       	ldi	r19, 0x03	; 3
 1c4:	92 9f       	mul	r25, r18
 1c6:	b0 01       	movw	r22, r0
 1c8:	93 9f       	mul	r25, r19
 1ca:	70 0d       	add	r23, r0
 1cc:	11 24       	eor	r1, r1
	stopWatchData += sec * 10;
 1ce:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <sec>
 1d2:	29 2f       	mov	r18, r25
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	c9 01       	movw	r24, r18
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	28 0f       	add	r18, r24
 1ea:	39 1f       	adc	r19, r25
 1ec:	e9 01       	movw	r28, r18
 1ee:	c6 0f       	add	r28, r22
 1f0:	d7 1f       	adc	r29, r23
	stopWatchData += (milisec / 100) % 10;
 1f2:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <milisec>
 1f6:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <milisec+0x1>
 1fa:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <milisec+0x2>
 1fe:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <milisec+0x3>
 202:	24 e6       	ldi	r18, 0x64	; 100
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	44 d2       	rcall	.+1160   	; 0x694 <__udivmodsi4>
 20c:	ca 01       	movw	r24, r20
 20e:	b9 01       	movw	r22, r18
 210:	2a e0       	ldi	r18, 0x0A	; 10
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	3d d2       	rcall	.+1146   	; 0x694 <__udivmodsi4>
 21a:	ce 01       	movw	r24, r28
 21c:	86 0f       	add	r24, r22
 21e:	97 1f       	adc	r25, r23
	FND_setfndData(stopWatchData);
 220:	9f d1       	rcall	.+830    	; 0x560 <FND_setfndData>
 222:	df 91       	pop	r29
}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <stopwatch_execute>:
 228:	0f 93       	push	r16

void stopwatch_execute()
{
 22a:	1f 93       	push	r17
	switch (stopWatchState)
 22c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <stopWatchState>
 230:	88 23       	and	r24, r24
 232:	51 f0       	breq	.+20     	; 0x248 <stopwatch_execute+0x20>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	31 f5       	brne	.+76     	; 0x284 <stopwatch_execute+0x5c>
	{
		case (RUN):
		if (Button_GetState(&runStopBtn) == ACT_RELEASED)
 238:	81 e1       	ldi	r24, 0x11	; 17
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	6d d0       	rcall	.+218    	; 0x318 <Button_GetState>
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	09 f5       	brne	.+66     	; 0x284 <stopwatch_execute+0x5c>
		stopWatchState = STOP;
 242:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stopWatchState>
 246:	1e c0       	rjmp	.+60     	; 0x284 <stopwatch_execute+0x5c>
		break;
		
		case (STOP):
		if (Button_GetState(&runStopBtn) == ACT_RELEASED)
 248:	81 e1       	ldi	r24, 0x11	; 17
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	65 d0       	rcall	.+202    	; 0x318 <Button_GetState>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	19 f4       	brne	.+6      	; 0x258 <stopwatch_execute+0x30>
		stopWatchState = RUN;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stopWatchState>
		if (Button_GetState(&initBtn) == ACT_RELEASED)
 258:	8b e1       	ldi	r24, 0x1B	; 27
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	5d d0       	rcall	.+186    	; 0x318 <Button_GetState>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	89 f4       	brne	.+34     	; 0x284 <stopwatch_execute+0x5c>
		{
			stopWatchState = STOP;
 262:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stopWatchState>
			milisec = 0;
 266:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <milisec>
 26a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <milisec+0x1>
 26e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <milisec+0x2>
 272:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <milisec+0x3>
			sec = 0;
 276:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <sec>
			min = 0;
 27a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <min>
			hour = 0;
 27e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <hour>
			displayTime();
 282:	8d df       	rcall	.-230    	; 0x19e <displayTime>
		}
		break;
	}
	
	
	switch (stopWatchState)
 284:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <stopWatchState>
 288:	81 30       	cpi	r24, 0x01	; 1
	{
		case (RUN):
		if (getTick() - prevtime >= 1)
 28a:	c9 f4       	brne	.+50     	; 0x2be <stopwatch_execute+0x96>
 28c:	2f d0       	rcall	.+94     	; 0x2ec <getTick>
 28e:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <prevtime>
 292:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <prevtime+0x1>
 296:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <prevtime+0x2>
 29a:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <prevtime+0x3>
 29e:	60 17       	cp	r22, r16
 2a0:	71 07       	cpc	r23, r17
 2a2:	82 07       	cpc	r24, r18
 2a4:	93 07       	cpc	r25, r19
		{
			prevtime = getTick();
 2a6:	59 f0       	breq	.+22     	; 0x2be <stopwatch_execute+0x96>
 2a8:	21 d0       	rcall	.+66     	; 0x2ec <getTick>
 2aa:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <prevtime>
 2ae:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <prevtime+0x1>
 2b2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <prevtime+0x2>
			incMilisec();
 2b6:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <prevtime+0x3>
			displayTime();
 2ba:	06 df       	rcall	.-500    	; 0xc8 <incMilisec>
 2bc:	70 df       	rcall	.-288    	; 0x19e <displayTime>
		break;
		
		case (STOP):
		break;
	}
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <incTick>:
	timeTick++;
}

void initTick()
{
	timeTick = 0;
 2c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 2cc:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 2d0:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	a1 1d       	adc	r26, r1
 2d8:	b1 1d       	adc	r27, r1
 2da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 2de:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 2e2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 2e6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 2ea:	08 95       	ret

000002ec <getTick>:
}

uint32_t getTick()
{
	return (timeTick);
 2ec:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 2f0:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 2f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x2>
 2f8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x3>
}
 2fc:	08 95       	ret

000002fe <Button_init>:
ï»¿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 2fe:	fc 01       	movw	r30, r24
 300:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;		// í¬ë³ì¼ëë -> ì¬ì©
 302:	71 83       	std	Z+1, r23	; 0x01
 304:	60 83       	st	Z, r22
	btn ->PIN = pin;
 306:	53 83       	std	Z+3, r21	; 0x03
 308:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 30a:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 30c:	31 e0       	ldi	r19, 0x01	; 1
 30e:	35 83       	std	Z+5, r19	; 0x05
	//*btn ->DDR &= (1 << btn -> pinNum);
	GPIO_initPin(btn->DDR, INPUT, btn->pinNum);
 310:	42 2f       	mov	r20, r18
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	86 c1       	rjmp	.+780    	; 0x622 <GPIO_initPin>
 316:	08 95       	ret

00000318 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn ì£¼ì ì í¨ë²ì button_t
{
 318:	fc 01       	movw	r30, r24
	uint8_t curState = *btn->PIN & (1 << btn->pinNum);
 31a:	a2 81       	ldd	r26, Z+2	; 0x02
 31c:	b3 81       	ldd	r27, Z+3	; 0x03
 31e:	8c 91       	ld	r24, X
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	04 80       	ldd	r0, Z+4	; 0x04
 326:	02 c0       	rjmp	.+4      	; 0x32c <Button_GetState+0x14>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <Button_GetState+0x10>
 330:	28 23       	and	r18, r24
	//uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum);
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 332:	59 f4       	brne	.+22     	; 0x34a <Button_GetState+0x32>
 334:	85 81       	ldd	r24, Z+5	; 0x05
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	41 f4       	brne	.+16     	; 0x34a <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	af e3       	ldi	r26, 0x3F	; 63
 33c:	bc e9       	ldi	r27, 0x9C	; 156
 33e:	11 97       	sbiw	r26, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <Button_GetState+0x26>
 342:	00 c0       	rjmp	.+0      	; 0x344 <Button_GetState+0x2c>
 344:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 346:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 348:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 34a:	22 23       	and	r18, r18
 34c:	69 f0       	breq	.+26     	; 0x368 <Button_GetState+0x50>
 34e:	85 81       	ldd	r24, Z+5	; 0x05
 350:	81 11       	cpse	r24, r1
 352:	0c c0       	rjmp	.+24     	; 0x36c <Button_GetState+0x54>
 354:	8f e3       	ldi	r24, 0x3F	; 63
 356:	9c e9       	ldi	r25, 0x9C	; 156
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <Button_GetState+0x40>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <Button_GetState+0x46>
 35e:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;	
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	08 95       	ret
	}
	return ACT_NONE;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret
 36c:	80 e0       	ldi	r24, 0x00	; 0
}
 36e:	08 95       	ret

00000370 <FND_init>:

uint16_t data = 0;

void FND_init()
{
	FND_NUM_DDR = 0xff;
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	FND_DIGIT_DDR = 0xff;
 376:	82 b9       	out	0x02, r24	; 2
 378:	08 95       	ret

0000037a <showNum>:
}

void showNum(uint16_t num)
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	2a 97       	sbiw	r28, 0x0a	; 10
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	ac 01       	movw	r20, r24
	uint8_t fndFont[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x67};
 390:	8a e0       	ldi	r24, 0x0A	; 10
 392:	e0 e0       	ldi	r30, 0x00	; 0
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	de 01       	movw	r26, r28
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	01 90       	ld	r0, Z+
 39c:	0d 92       	st	X+, r0
 39e:	8a 95       	dec	r24
 3a0:	e1 f7       	brne	.-8      	; 0x39a <showNum+0x20>
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 4;
 3a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <fndDigitState.1741>
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	83 70       	andi	r24, 0x03	; 3
 3ac:	90 78       	andi	r25, 0x80	; 128
 3ae:	99 23       	and	r25, r25
 3b0:	24 f4       	brge	.+8      	; 0x3ba <showNum+0x40>
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	8c 6f       	ori	r24, 0xFC	; 252
 3b6:	9f 6f       	ori	r25, 0xFF	; 255
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <fndDigitState.1741>
	
	FND_DIGIT_PORT |= (1<<FND_DIGIT_4) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_1); //ì«ì ì°ê¸° ì ì ë¶ ë¤ ëê¸° (ì»¤ë¨¼í ë¤ 1ë¡ ì¤ì )
 3be:	83 b1       	in	r24, 0x03	; 3
 3c0:	80 6f       	ori	r24, 0xF0	; 240
 3c2:	83 b9       	out	0x03, r24	; 3
	switch (fndDigitState)
 3c4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <fndDigitState.1741>
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	09 f4       	brne	.+2      	; 0x3ce <showNum+0x54>
 3cc:	3e c0       	rjmp	.+124    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3ce:	38 f0       	brcs	.+14     	; 0x3de <showNum+0x64>
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <showNum+0x5c>
 3d4:	6a c0       	rjmp	.+212    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	09 f4       	brne	.+2      	; 0x3dc <showNum+0x62>
 3da:	95 c0       	rjmp	.+298    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 3dc:	b8 c0       	rjmp	.+368    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
	{
		case 0:
		FND_NUM_PORT = fndFont[(num / 1000) % 10]; // number 1
 3de:	9a 01       	movw	r18, r20
 3e0:	36 95       	lsr	r19
 3e2:	27 95       	ror	r18
 3e4:	36 95       	lsr	r19
 3e6:	27 95       	ror	r18
 3e8:	36 95       	lsr	r19
 3ea:	27 95       	ror	r18
 3ec:	a5 ec       	ldi	r26, 0xC5	; 197
 3ee:	b0 e2       	ldi	r27, 0x20	; 32
 3f0:	73 d1       	rcall	.+742    	; 0x6d8 <__umulhisi3>
 3f2:	ac 01       	movw	r20, r24
 3f4:	52 95       	swap	r21
 3f6:	42 95       	swap	r20
 3f8:	4f 70       	andi	r20, 0x0F	; 15
 3fa:	45 27       	eor	r20, r21
 3fc:	5f 70       	andi	r21, 0x0F	; 15
 3fe:	45 27       	eor	r20, r21
 400:	9a 01       	movw	r18, r20
 402:	ad ec       	ldi	r26, 0xCD	; 205
 404:	bc ec       	ldi	r27, 0xCC	; 204
 406:	68 d1       	rcall	.+720    	; 0x6d8 <__umulhisi3>
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	9c 01       	movw	r18, r24
 416:	22 0f       	add	r18, r18
 418:	33 1f       	adc	r19, r19
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	82 0f       	add	r24, r18
 428:	93 1f       	adc	r25, r19
 42a:	9a 01       	movw	r18, r20
 42c:	28 1b       	sub	r18, r24
 42e:	39 0b       	sbc	r19, r25
 430:	e1 e0       	ldi	r30, 0x01	; 1
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	ec 0f       	add	r30, r28
 436:	fd 1f       	adc	r31, r29
 438:	e2 0f       	add	r30, r18
 43a:	f3 1f       	adc	r31, r19
 43c:	80 81       	ld	r24, Z
 43e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_1); //ì²ììë¦¬ì í
 442:	83 b1       	in	r24, 0x03	; 3
 444:	8f 7e       	andi	r24, 0xEF	; 239
 446:	83 b9       	out	0x03, r24	; 3
		break;
 448:	82 c0       	rjmp	.+260    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
		
		case 1:
		FND_NUM_PORT = fndFont[(num / 100) % 10]; // number 1
 44a:	9a 01       	movw	r18, r20
 44c:	36 95       	lsr	r19
 44e:	27 95       	ror	r18
 450:	36 95       	lsr	r19
 452:	27 95       	ror	r18
 454:	ab e7       	ldi	r26, 0x7B	; 123
 456:	b4 e1       	ldi	r27, 0x14	; 20
 458:	3f d1       	rcall	.+638    	; 0x6d8 <__umulhisi3>
 45a:	ac 01       	movw	r20, r24
 45c:	56 95       	lsr	r21
 45e:	47 95       	ror	r20
 460:	9a 01       	movw	r18, r20
 462:	ad ec       	ldi	r26, 0xCD	; 205
 464:	bc ec       	ldi	r27, 0xCC	; 204
 466:	38 d1       	rcall	.+624    	; 0x6d8 <__umulhisi3>
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	96 95       	lsr	r25
 472:	87 95       	ror	r24
 474:	9c 01       	movw	r18, r24
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	82 0f       	add	r24, r18
 488:	93 1f       	adc	r25, r19
 48a:	9a 01       	movw	r18, r20
 48c:	28 1b       	sub	r18, r24
 48e:	39 0b       	sbc	r19, r25
 490:	e1 e0       	ldi	r30, 0x01	; 1
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ec 0f       	add	r30, r28
 496:	fd 1f       	adc	r31, r29
 498:	e2 0f       	add	r30, r18
 49a:	f3 1f       	adc	r31, r19
 49c:	80 81       	ld	r24, Z
 49e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_2); //ë°±ììë¦¬ì í
 4a2:	83 b1       	in	r24, 0x03	; 3
 4a4:	8f 7d       	andi	r24, 0xDF	; 223
 4a6:	83 b9       	out	0x03, r24	; 3
		break;
		
		case 2:
		FND_NUM_PORT = fndFont[(num / 10) % 10]; // number 1
 4a8:	52 c0       	rjmp	.+164    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 4aa:	9a 01       	movw	r18, r20
 4ac:	ad ec       	ldi	r26, 0xCD	; 205
 4ae:	bc ec       	ldi	r27, 0xCC	; 204
 4b0:	13 d1       	rcall	.+550    	; 0x6d8 <__umulhisi3>
 4b2:	ac 01       	movw	r20, r24
 4b4:	56 95       	lsr	r21
 4b6:	47 95       	ror	r20
 4b8:	56 95       	lsr	r21
 4ba:	47 95       	ror	r20
 4bc:	56 95       	lsr	r21
 4be:	47 95       	ror	r20
 4c0:	9a 01       	movw	r18, r20
 4c2:	0a d1       	rcall	.+532    	; 0x6d8 <__umulhisi3>
 4c4:	96 95       	lsr	r25
 4c6:	87 95       	ror	r24
 4c8:	96 95       	lsr	r25
 4ca:	87 95       	ror	r24
 4cc:	96 95       	lsr	r25
 4ce:	87 95       	ror	r24
 4d0:	9c 01       	movw	r18, r24
 4d2:	22 0f       	add	r18, r18
 4d4:	33 1f       	adc	r19, r19
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	82 0f       	add	r24, r18
 4e4:	93 1f       	adc	r25, r19
 4e6:	9a 01       	movw	r18, r20
 4e8:	28 1b       	sub	r18, r24
 4ea:	39 0b       	sbc	r19, r25
 4ec:	e1 e0       	ldi	r30, 0x01	; 1
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	ec 0f       	add	r30, r28
 4f2:	fd 1f       	adc	r31, r29
 4f4:	e2 0f       	add	r30, r18
 4f6:	f3 1f       	adc	r31, r19
 4f8:	80 81       	ld	r24, Z
 4fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_3); //ì­ììë¦¬ì í
 4fe:	83 b1       	in	r24, 0x03	; 3
 500:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 502:	83 b9       	out	0x03, r24	; 3
		
		case 3:
		FND_NUM_PORT = fndFont[num % 10]; // number 1
 504:	24 c0       	rjmp	.+72     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 506:	9a 01       	movw	r18, r20
 508:	ad ec       	ldi	r26, 0xCD	; 205
 50a:	bc ec       	ldi	r27, 0xCC	; 204
 50c:	e5 d0       	rcall	.+458    	; 0x6d8 <__umulhisi3>
 50e:	96 95       	lsr	r25
 510:	87 95       	ror	r24
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	9c 01       	movw	r18, r24
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	82 0f       	add	r24, r18
 52e:	93 1f       	adc	r25, r19
 530:	9a 01       	movw	r18, r20
 532:	28 1b       	sub	r18, r24
 534:	39 0b       	sbc	r19, r25
 536:	e1 e0       	ldi	r30, 0x01	; 1
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	ec 0f       	add	r30, r28
 53c:	fd 1f       	adc	r31, r29
 53e:	e2 0f       	add	r30, r18
 540:	f3 1f       	adc	r31, r19
 542:	80 81       	ld	r24, Z
 544:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1 << FND_DIGIT_4); //ì¼ììë¦¬ì í
 548:	83 b1       	in	r24, 0x03	; 3
 54a:	8f 77       	andi	r24, 0x7F	; 127
 54c:	83 b9       	out	0x03, r24	; 3
		break;
	}
}
 54e:	2a 96       	adiw	r28, 0x0a	; 10
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <FND_setfndData>:

void FND_setfndData(uint16_t mydata)
{
	data = mydata;
 560:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <data+0x1>
 564:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data>
 568:	08 95       	ret

0000056a <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	showNum(data);
 56a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data>
 56e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <data+0x1>
 572:	03 cf       	rjmp	.-506    	; 0x37a <showNum>
 574:	08 95       	ret

00000576 <__vector_16>:
#include "ap/stopwatch/stopwatch.h"

//¾î¶² Á¶°Ç¿¡ ÀÇÇÑ ISRÀÎÁö ¸í½ÃÇØ¾ßÇÔ
ISR(TIMER0_OVF_vect) //timer overflow¿¡ ´ëÇÑ ISRÀÌ¶ó´Â ¶æ
{
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	0b b6       	in	r0, 0x3b	; 59
 582:	0f 92       	push	r0
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
	FND_ISR_Process();
 59c:	e6 df       	rcall	.-52     	; 0x56a <FND_ISR_Process>
	TCNT0 = 131; //ÀÌ ¼³Á¤À» ÁáÀ¸´Ï±î 1ms ÁÖ±â¸¶´Ù ÀÎÅÍ·´Æ® ¹ß»ý
 59e:	83 e8       	ldi	r24, 0x83	; 131
	incTick();
 5a0:	82 bf       	out	0x32, r24	; 50
 5a2:	90 de       	rcall	.-736    	; 0x2c4 <incTick>
}
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	bf 91       	pop	r27
 5aa:	af 91       	pop	r26
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	7f 91       	pop	r23
 5b2:	6f 91       	pop	r22
 5b4:	5f 91       	pop	r21
 5b6:	4f 91       	pop	r20
 5b8:	3f 91       	pop	r19
 5ba:	2f 91       	pop	r18
 5bc:	0f 90       	pop	r0
 5be:	0b be       	out	0x3b, r0	; 59
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	0b b6       	in	r0, 0x3b	; 59
 5d6:	0f 92       	push	r0
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
	FND_ISR_Process();
 5f0:	bc df       	rcall	.-136    	; 0x56a <FND_ISR_Process>
	incTick();
 5f2:	68 de       	rcall	.-816    	; 0x2c4 <incTick>
 5f4:	ff 91       	pop	r31
}
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0b be       	out	0x3b, r0	; 59
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <main>:
 61a:	95 dd       	rcall	.-1238   	; 0x146 <stopwatch_init>
	
	//global interrupt enable ¼³Á¤
	sei();
	while (1)
	{
		stopwatch_execute();
 61c:	78 94       	sei
 61e:	04 de       	rcall	.-1016   	; 0x228 <stopwatch_execute>
 620:	fe cf       	rjmp	.-4      	; 0x61e <main+0x4>

00000622 <GPIO_initPin>:
	*DDR = 0x00;
}

//init - pin (1EA)
void GPIO_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum)
{
 622:	fc 01       	movw	r30, r24
	if (dir == OUTPUT)
 624:	61 30       	cpi	r22, 0x01	; 1
 626:	59 f4       	brne	.+22     	; 0x63e <GPIO_initPin+0x1c>
	*DDR |= (1 << pinNum); //no ~?
 628:	20 81       	ld	r18, Z
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <GPIO_initPin+0x12>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	4a 95       	dec	r20
 636:	e2 f7       	brpl	.-8      	; 0x630 <GPIO_initPin+0xe>
 638:	82 2b       	or	r24, r18
 63a:	80 83       	st	Z, r24
 63c:	08 95       	ret
	else
	*DDR &= ~(1 << pinNum);
 63e:	90 81       	ld	r25, Z
 640:	21 e0       	ldi	r18, 0x01	; 1
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <GPIO_initPin+0x28>
 646:	22 0f       	add	r18, r18
 648:	33 1f       	adc	r19, r19
 64a:	4a 95       	dec	r20
 64c:	e2 f7       	brpl	.-8      	; 0x646 <GPIO_initPin+0x24>
 64e:	20 95       	com	r18
 650:	29 23       	and	r18, r25
 652:	20 83       	st	Z, r18
 654:	08 95       	ret

00000656 <initTIM2>:
}

void initTIM2()
{
	//prescaler 1/64ë¡ ì¤ì  > cs22, cs21, cs20 0 1 1ë¡ ì¤ì í´ì¼ í¨
	TCCR2 |= (0 << CS22) | (1 << CS21) | (1 << CS20);
 656:	85 b5       	in	r24, 0x25	; 37
 658:	83 60       	ori	r24, 0x03	; 3
 65a:	85 bd       	out	0x25, r24	; 37
	
	//CTC mode ì¤ì 
	TCCR2 |= (1 << WGM21) | (0 << WGM20);
 65c:	85 b5       	in	r24, 0x25	; 37
 65e:	88 60       	ori	r24, 0x08	; 8
 660:	85 bd       	out	0x25, r24	; 37
	
	//TIMSK timer compare bit on
	TIMSK |= (1 << OCIE2);
 662:	87 b7       	in	r24, 0x37	; 55
 664:	80 68       	ori	r24, 0x80	; 128
 666:	87 bf       	out	0x37, r24	; 55
	
	//ë¹êµí  ì«ì ì¤ì 
	OCR2 = 250 - 1;
 668:	89 ef       	ldi	r24, 0xF9	; 249
 66a:	83 bd       	out	0x23, r24	; 35
 66c:	08 95       	ret

0000066e <__divmodhi4>:
 66e:	97 fb       	bst	r25, 7
 670:	07 2e       	mov	r0, r23
 672:	16 f4       	brtc	.+4      	; 0x678 <__divmodhi4+0xa>
 674:	00 94       	com	r0
 676:	06 d0       	rcall	.+12     	; 0x684 <__divmodhi4_neg1>
 678:	77 fd       	sbrc	r23, 7
 67a:	08 d0       	rcall	.+16     	; 0x68c <__divmodhi4_neg2>
 67c:	3c d0       	rcall	.+120    	; 0x6f6 <__udivmodhi4>
 67e:	07 fc       	sbrc	r0, 7
 680:	05 d0       	rcall	.+10     	; 0x68c <__divmodhi4_neg2>
 682:	3e f4       	brtc	.+14     	; 0x692 <__divmodhi4_exit>

00000684 <__divmodhi4_neg1>:
 684:	90 95       	com	r25
 686:	81 95       	neg	r24
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	08 95       	ret

0000068c <__divmodhi4_neg2>:
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255

00000692 <__divmodhi4_exit>:
 692:	08 95       	ret

00000694 <__udivmodsi4>:
 694:	a1 e2       	ldi	r26, 0x21	; 33
 696:	1a 2e       	mov	r1, r26
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	fd 01       	movw	r30, r26
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <__udivmodsi4_ep>

000006a0 <__udivmodsi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	ee 1f       	adc	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	a2 17       	cp	r26, r18
 6aa:	b3 07       	cpc	r27, r19
 6ac:	e4 07       	cpc	r30, r20
 6ae:	f5 07       	cpc	r31, r21
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__udivmodsi4_ep>
 6b2:	a2 1b       	sub	r26, r18
 6b4:	b3 0b       	sbc	r27, r19
 6b6:	e4 0b       	sbc	r30, r20
 6b8:	f5 0b       	sbc	r31, r21

000006ba <__udivmodsi4_ep>:
 6ba:	66 1f       	adc	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a 94       	dec	r1
 6c4:	69 f7       	brne	.-38     	; 0x6a0 <__udivmodsi4_loop>
 6c6:	60 95       	com	r22
 6c8:	70 95       	com	r23
 6ca:	80 95       	com	r24
 6cc:	90 95       	com	r25
 6ce:	9b 01       	movw	r18, r22
 6d0:	ac 01       	movw	r20, r24
 6d2:	bd 01       	movw	r22, r26
 6d4:	cf 01       	movw	r24, r30
 6d6:	08 95       	ret

000006d8 <__umulhisi3>:
 6d8:	a2 9f       	mul	r26, r18
 6da:	b0 01       	movw	r22, r0
 6dc:	b3 9f       	mul	r27, r19
 6de:	c0 01       	movw	r24, r0
 6e0:	a3 9f       	mul	r26, r19
 6e2:	70 0d       	add	r23, r0
 6e4:	81 1d       	adc	r24, r1
 6e6:	11 24       	eor	r1, r1
 6e8:	91 1d       	adc	r25, r1
 6ea:	b2 9f       	mul	r27, r18
 6ec:	70 0d       	add	r23, r0
 6ee:	81 1d       	adc	r24, r1
 6f0:	11 24       	eor	r1, r1
 6f2:	91 1d       	adc	r25, r1
 6f4:	08 95       	ret

000006f6 <__udivmodhi4>:
 6f6:	aa 1b       	sub	r26, r26
 6f8:	bb 1b       	sub	r27, r27
 6fa:	51 e1       	ldi	r21, 0x11	; 17
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <__udivmodhi4_ep>

000006fe <__udivmodhi4_loop>:
 6fe:	aa 1f       	adc	r26, r26
 700:	bb 1f       	adc	r27, r27
 702:	a6 17       	cp	r26, r22
 704:	b7 07       	cpc	r27, r23
 706:	10 f0       	brcs	.+4      	; 0x70c <__udivmodhi4_ep>
 708:	a6 1b       	sub	r26, r22
 70a:	b7 0b       	sbc	r27, r23

0000070c <__udivmodhi4_ep>:
 70c:	88 1f       	adc	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	5a 95       	dec	r21
 712:	a9 f7       	brne	.-22     	; 0x6fe <__udivmodhi4_loop>
 714:	80 95       	com	r24
 716:	90 95       	com	r25
 718:	bc 01       	movw	r22, r24
 71a:	cd 01       	movw	r24, r26
 71c:	08 95       	ret

0000071e <_exit>:
 71e:	f8 94       	cli

00000720 <__stop_program>:
 720:	ff cf       	rjmp	.-2      	; 0x720 <__stop_program>
