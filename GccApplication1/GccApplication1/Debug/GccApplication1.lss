
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fab  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b70  00000000  00000000  0000139f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ba  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000025cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000540  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000396  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	b9 d0       	rcall	.+370    	; 0x21c <main>
  aa:	e0 c0       	rjmp	.+448    	; 0x26c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Button_init>:
﻿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
  ae:	fc 01       	movw	r30, r24
	btn ->DDR = ddr;		// 포변일때는 -> 사용
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	60 83       	st	Z, r22
	btn ->PIN = pin;
  b4:	53 83       	std	Z+3, r21	; 0x03
  b6:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
  b8:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	85 83       	std	Z+5, r24	; 0x05
	*btn ->DDR &= (1 << btn -> pinNum);
  be:	fb 01       	movw	r30, r22
  c0:	30 81       	ld	r19, Z
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Button_init+0x1e>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	2a 95       	dec	r18
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Button_init+0x1a>
  d0:	83 23       	and	r24, r19
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn 주소 유효범위 button_t
{
  d6:	fc 01       	movw	r30, r24
	uint8_t curState = *btn -> PIN & (1<<btn -> pinNum);
  d8:	a2 81       	ldd	r26, Z+2	; 0x02
  da:	b3 81       	ldd	r27, Z+3	; 0x03
  dc:	8c 91       	ld	r24, X
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	04 80       	ldd	r0, Z+4	; 0x04
  e4:	02 c0       	rjmp	.+4      	; 0xea <Button_GetState+0x14>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Button_GetState+0x10>
  ee:	28 23       	and	r18, r24
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
  f0:	59 f4       	brne	.+22     	; 0x108 <Button_GetState+0x32>
  f2:	85 81       	ldd	r24, Z+5	; 0x05
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f4       	brne	.+16     	; 0x108 <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	af e3       	ldi	r26, 0x3F	; 63
  fa:	bc e9       	ldi	r27, 0x9C	; 156
  fc:	11 97       	sbiw	r26, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <Button_GetState+0x26>
 100:	00 c0       	rjmp	.+0      	; 0x102 <Button_GetState+0x2c>
 102:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 104:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 106:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 108:	22 23       	and	r18, r18
 10a:	69 f0       	breq	.+26     	; 0x126 <Button_GetState+0x50>
 10c:	85 81       	ldd	r24, Z+5	; 0x05
 10e:	81 11       	cpse	r24, r1
 110:	0c c0       	rjmp	.+24     	; 0x12a <Button_GetState+0x54>
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9c e9       	ldi	r25, 0x9C	; 156
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <Button_GetState+0x40>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Button_GetState+0x46>
 11c:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	08 95       	ret
		
	}
	return ACT_NONE;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	80 e0       	ldi	r24, 0x00	; 0
}
 12c:	08 95       	ret

0000012e <Led1_blink>:
﻿#include "led.h"

void Led1_blink()
{
	ledData ^= 0x01;
 12e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	89 27       	eor	r24, r25
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	LED_PORT = ledData;
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	08 95       	ret

0000013e <Led2_blink>:
}

void Led2_blink()
{
	ledData ^= 0x02;
 13e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	89 27       	eor	r24, r25
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	LED_PORT = ledData;
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	08 95       	ret

0000014e <Led3_blink>:
}

void Led3_blink()
{
	ledData ^= 0x04;
 14e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	89 27       	eor	r24, r25
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	LED_PORT = ledData;
 15a:	82 bb       	out	0x12, r24	; 18
 15c:	08 95       	ret

0000015e <Led4_blink>:
}
void Led4_blink()
{
	ledData ^= 0x08;
 15e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	89 27       	eor	r24, r25
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	LED_PORT = ledData;
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	08 95       	ret

0000016e <executeLedMachine>:
﻿#include "ledMachine.h"

void executeLedMachine(uint8_t ledState, button_t *btnPrev, button_t *btnNext)
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	8b 01       	movw	r16, r22
 178:	ea 01       	movw	r28, r20
	switch(ledState)
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	a9 f0       	breq	.+42     	; 0x1a8 <executeLedMachine+0x3a>
 17e:	28 f0       	brcs	.+10     	; 0x18a <executeLedMachine+0x1c>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	09 f1       	breq	.+66     	; 0x1c6 <executeLedMachine+0x58>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	71 f1       	breq	.+92     	; 0x1e4 <executeLedMachine+0x76>
 188:	3b c0       	rjmp	.+118    	; 0x200 <executeLedMachine+0x92>
	{
		case LED1 :
		Led1_blink();
 18a:	d1 df       	rcall	.-94     	; 0x12e <Led1_blink>
		if(Button_GetState(btnNext) == ACT_RELEASED)
 18c:	ce 01       	movw	r24, r28
 18e:	a3 df       	rcall	.-186    	; 0xd6 <Button_GetState>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	19 f4       	brne	.+6      	; 0x19a <executeLedMachine+0x2c>
		{
			ledState = LED2;
			ledData=0x00;
 194:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		else if(Button_GetState(btnPrev) == ACT_RELEASED)
 198:	33 c0       	rjmp	.+102    	; 0x200 <executeLedMachine+0x92>
 19a:	c8 01       	movw	r24, r16
 19c:	9c df       	rcall	.-200    	; 0xd6 <Button_GetState>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	79 f5       	brne	.+94     	; 0x200 <executeLedMachine+0x92>
		{
			ledState = LED4;
			ledData=0x00;
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
		case LED2 :
		Led2_blink();
 1a6:	2c c0       	rjmp	.+88     	; 0x200 <executeLedMachine+0x92>
 1a8:	ca df       	rcall	.-108    	; 0x13e <Led2_blink>
		if(Button_GetState(btnNext) == ACT_RELEASED)
 1aa:	ce 01       	movw	r24, r28
 1ac:	94 df       	rcall	.-216    	; 0xd6 <Button_GetState>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <executeLedMachine+0x4a>
		{
			ledState = LED3;
			ledData=0x00;
 1b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	24 c0       	rjmp	.+72     	; 0x200 <executeLedMachine+0x92>
		}
		else if(Button_GetState(btnPrev) == ACT_RELEASED)
 1b8:	c8 01       	movw	r24, r16
 1ba:	8d df       	rcall	.-230    	; 0xd6 <Button_GetState>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	01 f5       	brne	.+64     	; 0x200 <executeLedMachine+0x92>
		{
			ledState = LED1;
			ledData=0x00;
 1c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	1d c0       	rjmp	.+58     	; 0x200 <executeLedMachine+0x92>
		}
		break;
		case LED3 :
		Led3_blink();
 1c6:	c3 df       	rcall	.-122    	; 0x14e <Led3_blink>
 1c8:	ce 01       	movw	r24, r28
		if(Button_GetState(btnNext) == ACT_RELEASED)
 1ca:	85 df       	rcall	.-246    	; 0xd6 <Button_GetState>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <executeLedMachine+0x68>
 1d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			ledState = LED4;
			ledData=0x00;
 1d4:	15 c0       	rjmp	.+42     	; 0x200 <executeLedMachine+0x92>
		}
		else if(Button_GetState(btnPrev) == ACT_RELEASED)
 1d6:	c8 01       	movw	r24, r16
 1d8:	7e df       	rcall	.-260    	; 0xd6 <Button_GetState>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	89 f4       	brne	.+34     	; 0x200 <executeLedMachine+0x92>
		{
			ledState = LED2;
			ledData=0x00;
 1de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <executeLedMachine+0x92>
		}
		break;
		case LED4 :
		Led4_blink();
 1e4:	bc df       	rcall	.-136    	; 0x15e <Led4_blink>
		if(Button_GetState(btnNext) == ACT_RELEASED)
 1e6:	ce 01       	movw	r24, r28
 1e8:	76 df       	rcall	.-276    	; 0xd6 <Button_GetState>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <executeLedMachine+0x86>
 1ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			ledState = LED1;
			ledData=0x00;
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <executeLedMachine+0x92>
 1f4:	c8 01       	movw	r24, r16
		}
		else if(Button_GetState(btnPrev) == ACT_RELEASED)
 1f6:	6f df       	rcall	.-290    	; 0xd6 <Button_GetState>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	11 f4       	brne	.+4      	; 0x200 <executeLedMachine+0x92>
 1fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			ledState = LED3;
			ledData=0x00;
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	83 ec       	ldi	r24, 0xC3	; 195
 204:	99 e0       	ldi	r25, 0x09	; 9
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <executeLedMachine+0x98>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <executeLedMachine+0xa2>
 210:	00 00       	nop
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
		}
		break;
	}
	_delay_ms(200);
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	08 95       	ret

0000021c <main>:
#include "button.h"
#include "led.h"
#include "ledMachine.h"

int main(void)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	2c 97       	sbiw	r28, 0x0c	; 12
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	LED_DDR = 0xff;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	81 bb       	out	0x11, r24	; 17
	//BUTTON_DDR &= ~((1<<0) | (1<<1));

	ledData = 0x01;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	uint8_t ledState = LED1;
	
	button_t btnNext, btnPrev;				//구조체 변수 선언
	Button_init(&btnNext, &DDRA, &PINA, 0);
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	49 e3       	ldi	r20, 0x39	; 57
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	6a e3       	ldi	r22, 0x3A	; 58
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	ce 01       	movw	r24, r28
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	32 df       	rcall	.-412    	; 0xae <Button_init>
	Button_init(&btnPrev, &DDRA, &PINA, 1);
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	49 e3       	ldi	r20, 0x39	; 57
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	6a e3       	ldi	r22, 0x3A	; 58
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	ce 01       	movw	r24, r28
 256:	07 96       	adiw	r24, 0x07	; 7
 258:	2a df       	rcall	.-428    	; 0xae <Button_init>
	
	while (1)
	{
		executeLedMachine(ledState, &btnPrev, &btnNext);
 25a:	ae 01       	movw	r20, r28
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	be 01       	movw	r22, r28
 262:	69 5f       	subi	r22, 0xF9	; 249
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	82 df       	rcall	.-252    	; 0x16e <executeLedMachine>
 26a:	f7 cf       	rjmp	.-18     	; 0x25a <main+0x3e>

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
