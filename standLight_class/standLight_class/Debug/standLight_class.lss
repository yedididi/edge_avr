
standLight_class.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001337  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c39  00000000  00000000  000017db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dc  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000652  00000000  00000000  00002eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f0  00000000  00000000  00003506  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000037f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 30       	cpi	r26, 0x0D	; 13
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a4 d0       	rcall	.+328    	; 0x1f2 <main>
  aa:	f3 c0       	rjmp	.+486    	; 0x292 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <standLightInit>:
ï»¿#include "standLight.h"

void standLightInit()
{
	standLightState = MODE1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	Button_init(&nextBtn, &DDRA, &PINA, 0);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	49 e3       	ldi	r20, 0x39	; 57
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	6a e3       	ldi	r22, 0x3A	; 58
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	56 d0       	rcall	.+172    	; 0x170 <Button_init>
	Button_init(&offBtn, &DDRA, &PINA, 1);
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	49 e3       	ldi	r20, 0x39	; 57
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	6a e3       	ldi	r22, 0x3A	; 58
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	4e d0       	rcall	.+156    	; 0x170 <Button_init>
	led_init(&DDRD);
  d4:	81 e3       	ldi	r24, 0x31	; 49
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	84 c0       	rjmp	.+264    	; 0x1e2 <led_init>
  da:	08 95       	ret

000000dc <standLightEventCheck>:
}

void standLightEventCheck()
{
	if (Button_GetState(&nextBtn) == ACT_RELEASED)
  dc:	87 e0       	ldi	r24, 0x07	; 7
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	54 d0       	rcall	.+168    	; 0x18a <Button_GetState>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	49 f4       	brne	.+18     	; 0xf8 <standLightEventCheck+0x1c>
		standLightState = (standLightState + 1) % 5;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	a8 d0       	rcall	.+336    	; 0x244 <__divmodhi4>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (Button_GetState(&offBtn) == ACT_RELEASED)
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	46 d0       	rcall	.+140    	; 0x18a <Button_GetState>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	11 f4       	brne	.+4      	; 0x106 <standLightEventCheck+0x2a>
		standLightState = LED_OFF;
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	08 95       	ret

00000108 <standLightALLOFF>:
	standLightExecute();
}

void standLightALLOFF()
{
	led_allOff(&PORTD);
 108:	82 e3       	ldi	r24, 0x32	; 50
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	6d c0       	rjmp	.+218    	; 0x1e8 <led_allOff>
 10e:	08 95       	ret

00000110 <standLightMODE1>:
}

void standLightMODE1()
{
	led_writeData(&PORTD, 0b00000011);
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	6b c0       	rjmp	.+214    	; 0x1ee <led_writeData>
 118:	08 95       	ret

0000011a <standLightMODE2>:
}

void standLightMODE2()
{
	led_writeData(&PORTD, 0b00001111);
 11a:	6f e0       	ldi	r22, 0x0F	; 15
 11c:	82 e3       	ldi	r24, 0x32	; 50
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	66 c0       	rjmp	.+204    	; 0x1ee <led_writeData>
 122:	08 95       	ret

00000124 <standLightMODE3>:
}

void standLightMODE3()
{
	led_writeData(&PORTD, 0b00111111);
 124:	6f e3       	ldi	r22, 0x3F	; 63
 126:	82 e3       	ldi	r24, 0x32	; 50
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	61 c0       	rjmp	.+194    	; 0x1ee <led_writeData>
 12c:	08 95       	ret

0000012e <standLightMODE4>:
}

void standLightMODE4()
{
	led_writeData(&PORTD, 0b11111111);
 12e:	6f ef       	ldi	r22, 0xFF	; 255
 130:	82 e3       	ldi	r24, 0x32	; 50
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	5c c0       	rjmp	.+184    	; 0x1ee <led_writeData>
 136:	08 95       	ret

00000138 <standLightExecute>:
	
}

void standLightExecute()
{
	switch(standLightState)
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	79 f0       	breq	.+30     	; 0x15e <standLightExecute+0x26>
 140:	28 f4       	brcc	.+10     	; 0x14c <standLightExecute+0x14>
 142:	88 23       	and	r24, r24
 144:	41 f0       	breq	.+16     	; 0x156 <standLightExecute+0x1e>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <standLightExecute+0x22>
 14a:	08 95       	ret
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	49 f0       	breq	.+18     	; 0x162 <standLightExecute+0x2a>
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	49 f0       	breq	.+18     	; 0x166 <standLightExecute+0x2e>
 154:	08 95       	ret
	{
		case LED_OFF:
		standLightALLOFF();
 156:	d8 cf       	rjmp	.-80     	; 0x108 <standLightALLOFF>
		break;
		
		case MODE1:
		standLightMODE1();
 158:	08 95       	ret
		break;
 15a:	da cf       	rjmp	.-76     	; 0x110 <standLightMODE1>
		
		case MODE2:
		standLightMODE2();
 15c:	08 95       	ret
		break;
		
		case MODE3:
		standLightMODE3();
 15e:	dd cf       	rjmp	.-70     	; 0x11a <standLightMODE2>
 160:	08 95       	ret
		break;
 162:	e0 cf       	rjmp	.-64     	; 0x124 <standLightMODE3>
		
		case MODE4:
		standLightMODE4();
 164:	08 95       	ret
 166:	e3 cf       	rjmp	.-58     	; 0x12e <standLightMODE4>
 168:	08 95       	ret

0000016a <standLightRun>:

void standLightRun()
{
	
	//event check
	standLightEventCheck();
 16a:	b8 df       	rcall	.-144    	; 0xdc <standLightEventCheck>
	//execute
	standLightExecute();
 16c:	e5 cf       	rjmp	.-54     	; 0x138 <standLightExecute>
 16e:	08 95       	ret

00000170 <Button_init>:
 170:	fc 01       	movw	r30, r24
ï»¿#include "button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 172:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;		// í¬ë³ì¼ëë -> ì¬ì©
 174:	71 83       	std	Z+1, r23	; 0x01
 176:	60 83       	st	Z, r22
	btn ->PIN = pin;
 178:	53 83       	std	Z+3, r21	; 0x03
 17a:	42 83       	std	Z+2, r20	; 0x02
	btn ->pinNum = pinNum;
 17c:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = RELEASED;
 17e:	31 e0       	ldi	r19, 0x01	; 1
 180:	35 83       	std	Z+5, r19	; 0x05
	//*btn ->DDR &= (1 << btn -> pinNum);
	GPIO_initPin(btn->DDR, INPUT, btn->pinNum);
 182:	42 2f       	mov	r20, r18
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	41 c0       	rjmp	.+130    	; 0x20a <GPIO_initPin>
 188:	08 95       	ret

0000018a <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //*btn ì£¼ì ì í¨ë²ì button_t
{
 18a:	fc 01       	movw	r30, r24
	uint8_t curState = *btn->PIN & (1 << btn->pinNum);
 18c:	a2 81       	ldd	r26, Z+2	; 0x02
 18e:	b3 81       	ldd	r27, Z+3	; 0x03
 190:	8c 91       	ld	r24, X
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	04 80       	ldd	r0, Z+4	; 0x04
 198:	02 c0       	rjmp	.+4      	; 0x19e <Button_GetState+0x14>
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Button_GetState+0x10>
 1a2:	28 23       	and	r18, r24
	//uint8_t curState = GPIO_readPin(btn->PIN, btn->pinNum);
	
	if((curState == PUSHED) && (btn->prevstate == RELEASED))
 1a4:	59 f4       	brne	.+22     	; 0x1bc <Button_GetState+0x32>
 1a6:	85 81       	ldd	r24, Z+5	; 0x05
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	41 f4       	brne	.+16     	; 0x1bc <Button_GetState+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	af e3       	ldi	r26, 0x3F	; 63
 1ae:	bc e9       	ldi	r27, 0x9C	; 156
 1b0:	11 97       	sbiw	r26, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <Button_GetState+0x26>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <Button_GetState+0x2c>
 1b6:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = PUSHED;
 1b8:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 1ba:	08 95       	ret
	}
	else if((curState != PUSHED) && (btn->prevstate == PUSHED))
 1bc:	22 23       	and	r18, r18
 1be:	69 f0       	breq	.+26     	; 0x1da <Button_GetState+0x50>
 1c0:	85 81       	ldd	r24, Z+5	; 0x05
 1c2:	81 11       	cpse	r24, r1
 1c4:	0c c0       	rjmp	.+24     	; 0x1de <Button_GetState+0x54>
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	9c e9       	ldi	r25, 0x9C	; 156
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <Button_GetState+0x40>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <Button_GetState+0x46>
 1d0:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevstate = RELEASED;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;	
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	08 95       	ret
	}
	return ACT_NONE;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
 1de:	80 e0       	ldi	r24, 0x00	; 0
}
 1e0:	08 95       	ret

000001e2 <led_init>:
	GPIO_writePort(PORT, 0x00);
}

void led_allOn(volatile uint8_t *PORT)
{
	GPIO_writePort(PORT, 0xff);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <GPIO_initPort>
 1e6:	08 95       	ret

000001e8 <led_allOff>:
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	29 c0       	rjmp	.+82     	; 0x23e <GPIO_writePort>
 1ec:	08 95       	ret

000001ee <led_writeData>:
}

void led_writeData(volatile uint8_t *PORT, uint8_t data)
{
	GPIO_writePort(PORT, data);
 1ee:	27 c0       	rjmp	.+78     	; 0x23e <GPIO_writePort>
 1f0:	08 95       	ret

000001f2 <main>:
#include "./ap/standLight/standLight.h"

int main(void)
{
	standLightInit();
 1f2:	5d df       	rcall	.-326    	; 0xae <standLightInit>
	while (1) 
    {
		standLightRun();
 1f4:	ba df       	rcall	.-140    	; 0x16a <standLightRun>
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <main+0x2>

000001f8 <GPIO_initPort>:
 1f8:	61 30       	cpi	r22, 0x01	; 1
ï»¿#include "GPIO.h"

//init - port (8EA or 5EA)
void GPIO_initPort(volatile uint8_t *DDR, uint8_t dir)
{
	if (dir == OUTPUT)
 1fa:	21 f4       	brne	.+8      	; 0x204 <GPIO_initPort+0xc>
		*DDR = 0xff;
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
 202:	08 95       	ret
	else
		*DDR = 0x00;	
 204:	fc 01       	movw	r30, r24
 206:	10 82       	st	Z, r1
 208:	08 95       	ret

0000020a <GPIO_initPin>:
}

//init - pin (1EA)
void GPIO_initPin(volatile uint8_t *DDR, uint8_t dir, uint8_t pinNum)
{
 20a:	fc 01       	movw	r30, r24
	if (dir == OUTPUT)
 20c:	61 30       	cpi	r22, 0x01	; 1
 20e:	59 f4       	brne	.+22     	; 0x226 <GPIO_initPin+0x1c>
		*DDR |= (1 << pinNum); //no ~?
 210:	20 81       	ld	r18, Z
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <GPIO_initPin+0x12>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	4a 95       	dec	r20
 21e:	e2 f7       	brpl	.-8      	; 0x218 <GPIO_initPin+0xe>
 220:	82 2b       	or	r24, r18
 222:	80 83       	st	Z, r24
 224:	08 95       	ret
	else
		*DDR &= ~(1 << pinNum);
 226:	90 81       	ld	r25, Z
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_initPin+0x28>
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	4a 95       	dec	r20
 234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_initPin+0x24>
 236:	20 95       	com	r18
 238:	29 23       	and	r18, r25
 23a:	20 83       	st	Z, r18
 23c:	08 95       	ret

0000023e <GPIO_writePort>:
}

//output - port (8EA or 5EA) 
void GPIO_writePort(volatile uint8_t *PORT, uint8_t data)
{
	*PORT = data;
 23e:	fc 01       	movw	r30, r24
 240:	60 83       	st	Z, r22
 242:	08 95       	ret

00000244 <__divmodhi4>:
 244:	97 fb       	bst	r25, 7
 246:	07 2e       	mov	r0, r23
 248:	16 f4       	brtc	.+4      	; 0x24e <__divmodhi4+0xa>
 24a:	00 94       	com	r0
 24c:	06 d0       	rcall	.+12     	; 0x25a <__divmodhi4_neg1>
 24e:	77 fd       	sbrc	r23, 7
 250:	08 d0       	rcall	.+16     	; 0x262 <__divmodhi4_neg2>
 252:	0b d0       	rcall	.+22     	; 0x26a <__udivmodhi4>
 254:	07 fc       	sbrc	r0, 7
 256:	05 d0       	rcall	.+10     	; 0x262 <__divmodhi4_neg2>
 258:	3e f4       	brtc	.+14     	; 0x268 <__divmodhi4_exit>

0000025a <__divmodhi4_neg1>:
 25a:	90 95       	com	r25
 25c:	81 95       	neg	r24
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	08 95       	ret

00000262 <__divmodhi4_neg2>:
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255

00000268 <__divmodhi4_exit>:
 268:	08 95       	ret

0000026a <__udivmodhi4>:
 26a:	aa 1b       	sub	r26, r26
 26c:	bb 1b       	sub	r27, r27
 26e:	51 e1       	ldi	r21, 0x11	; 17
 270:	07 c0       	rjmp	.+14     	; 0x280 <__udivmodhi4_ep>

00000272 <__udivmodhi4_loop>:
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	a6 17       	cp	r26, r22
 278:	b7 07       	cpc	r27, r23
 27a:	10 f0       	brcs	.+4      	; 0x280 <__udivmodhi4_ep>
 27c:	a6 1b       	sub	r26, r22
 27e:	b7 0b       	sbc	r27, r23

00000280 <__udivmodhi4_ep>:
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	5a 95       	dec	r21
 286:	a9 f7       	brne	.-22     	; 0x272 <__udivmodhi4_loop>
 288:	80 95       	com	r24
 28a:	90 95       	com	r25
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
